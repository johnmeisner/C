/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 06-Mar-2019.
 */
#ifndef DSRC_H
#define DSRC_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtpersrc/asn1per.h"

#include "ITIS.h"
#include "NTCIP.h"

/**
 * Header file for ASN.1 module DSRC
 */
/**************************************************************/
/*                                                            */
/*  PartII_Id                                                 */
/*                                                            */
/**************************************************************/
/*
PartII-Id ::= INTEGER (0..63)
*/
typedef OSUINT8 PartII_Id;

EXTERN int asn1PE_PartII_Id (OSCTXT* pctxt, PartII_Id value);

EXTERN int asn1PD_PartII_Id (OSCTXT* pctxt, PartII_Id* pvalue);

EXTERN void asn1Print_PartII_Id (const char* name, const PartII_Id* pvalue);

EXTERN int asn1PrtToStrm_PartII_Id (OSCTXT *pctxt, 
   const char* name, const PartII_Id* pvalue);

/**************************************************************/
/*                                                            */
/*  Acceleration                                              */
/*                                                            */
/**************************************************************/
/*
 -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 
 Start of entries from table Data_Elements...
 This table typically contains data element entries.
 -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 
Acceleration ::= INTEGER (-2000..2001)
    LSB units are 0.01 m/s^2
    the value 2000 shall be used for values greater than 2000     
    the value -2000 shall be used for values less than -2000  
    a value of 2001 shall be used for Unavailable

*/
typedef OSINT16 Acceleration;

EXTERN int asn1PE_Acceleration (OSCTXT* pctxt, Acceleration value);

EXTERN int asn1PD_Acceleration (OSCTXT* pctxt, Acceleration* pvalue);

EXTERN void asn1Print_Acceleration (const char* name, const Acceleration* pvalue);

EXTERN int asn1PrtToStrm_Acceleration (OSCTXT *pctxt, 
   const char* name, const Acceleration* pvalue);

/**************************************************************/
/*                                                            */
/*  AccelerationConfidence                                    */
/*                                                            */
/**************************************************************/
/*
AccelerationConfidence ::= ENUMERATED { unavailable(0), accl-100-00(1), accl-010-00(2), accl-005-00(3), accl-001-00(4), accl-000-10(5), accl-000-05(6), accl-000-01(7) }
      Encoded as a 3 bit value

*/
typedef enum {
   unavailable = 0,
   accl_100_00 = 1,
   accl_010_00 = 2,
   accl_005_00 = 3,
   accl_001_00 = 4,
   accl_000_10 = 5,
   accl_000_05 = 6,
   accl_000_01 = 7
} AccelerationConfidence_Root;

typedef OSUINT32 AccelerationConfidence;

EXTERN int asn1PE_AccelerationConfidence (OSCTXT* pctxt, AccelerationConfidence value);

EXTERN int asn1PD_AccelerationConfidence (OSCTXT* pctxt, AccelerationConfidence* pvalue);

EXTERN void asn1Print_AccelerationConfidence 
   (const char* name, const AccelerationConfidence* pvalue);

EXTERN int asn1PrtToStrm_AccelerationConfidence (OSCTXT *pctxt, 
   const char* name, const AccelerationConfidence* pvalue);

EXTERN const OSUTF8CHAR* AccelerationConfidence_ToString (OSINT32 value);

EXTERN int AccelerationConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, AccelerationConfidence* pvalue);

EXTERN int AccelerationConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, AccelerationConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  AdvisorySpeedType                                         */
/*                                                            */
/**************************************************************/
/*
AdvisorySpeedType ::= ENUMERATED { none(0), greenwave(1), ecoDrive(2), transit(3), ... }
       Note: subject to further growth

*/
typedef enum {
   none = 0,
   greenwave = 1,
   ecoDrive = 2,
   transit = 3
} AdvisorySpeedType_Root;

typedef OSUINT32 AdvisorySpeedType;

EXTERN int asn1PE_AdvisorySpeedType (OSCTXT* pctxt, AdvisorySpeedType value);

EXTERN int asn1PD_AdvisorySpeedType (OSCTXT* pctxt, AdvisorySpeedType* pvalue);

EXTERN void asn1Print_AdvisorySpeedType 
   (const char* name, const AdvisorySpeedType* pvalue);

EXTERN int asn1PrtToStrm_AdvisorySpeedType (OSCTXT *pctxt, 
   const char* name, const AdvisorySpeedType* pvalue);

EXTERN const OSUTF8CHAR* AdvisorySpeedType_ToString (OSINT32 value);

EXTERN int AdvisorySpeedType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, AdvisorySpeedType* pvalue);

EXTERN int AdvisorySpeedType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, AdvisorySpeedType* pvalue);

/**************************************************************/
/*                                                            */
/*  AllowedManeuvers                                          */
/*                                                            */
/**************************************************************/
/*
AllowedManeuvers ::= BIT STRING  { maneuverStraightAllowed(0), maneuverLeftAllowed(1), maneuverRightAllowed(2), maneuverUTurnAllowed(3), maneuverLeftTurnOnRedAllowed(4), maneuverRightTurnOnRedAllowed(5), maneuverLaneChangeAllowed(6), maneuverNoStoppingAllowed(7), yieldAllwaysRequired(8), goWithHalt(9), caution(10), reserved1(11) } (SIZE (12))
*/
/* Named bit constants */

#define AllowedManeuvers_maneuverStraightAllowed         0
#define AllowedManeuvers_maneuverLeftAllowed             1
#define AllowedManeuvers_maneuverRightAllowed            2
#define AllowedManeuvers_maneuverUTurnAllowed            3
#define AllowedManeuvers_maneuverLeftTurnOnRedAllowed    4
#define AllowedManeuvers_maneuverRightTurnOnRedAllowed   5
#define AllowedManeuvers_maneuverLaneChangeAllowed       6
#define AllowedManeuvers_maneuverNoStoppingAllowed       7
#define AllowedManeuvers_yieldAllwaysRequired            8
#define AllowedManeuvers_goWithHalt                      9
#define AllowedManeuvers_caution                         10
#define AllowedManeuvers_reserved1                       11

typedef struct AllowedManeuvers {
   OSUINT32 numbits;
   OSOCTET data[2];
} AllowedManeuvers;

EXTERN int asn1PE_AllowedManeuvers (OSCTXT* pctxt, AllowedManeuvers* pvalue);

EXTERN int asn1PD_AllowedManeuvers (OSCTXT* pctxt, AllowedManeuvers* pvalue);

EXTERN void asn1Print_AllowedManeuvers 
   (const char* name, const AllowedManeuvers* pvalue);

EXTERN int asn1PrtToStrm_AllowedManeuvers (OSCTXT *pctxt, 
   const char* name, const AllowedManeuvers* pvalue);

EXTERN int asn1Init_AllowedManeuvers (AllowedManeuvers* pvalue);

/**************************************************************/
/*                                                            */
/*  AmbientAirPressure                                        */
/*                                                            */
/**************************************************************/
/*
AmbientAirPressure ::= INTEGER (0..255)
    8 Bits in hPa starting at 580 with a resolution of 
    2 hPa resulting in a range of 580 to 1088

*/
typedef OSUINT8 AmbientAirPressure;

EXTERN int asn1PE_AmbientAirPressure (OSCTXT* pctxt, AmbientAirPressure value);

EXTERN int asn1PD_AmbientAirPressure (OSCTXT* pctxt, AmbientAirPressure* pvalue);

EXTERN void asn1Print_AmbientAirPressure 
   (const char* name, const AmbientAirPressure* pvalue);

EXTERN int asn1PrtToStrm_AmbientAirPressure (OSCTXT *pctxt, 
   const char* name, const AmbientAirPressure* pvalue);

/**************************************************************/
/*                                                            */
/*  AmbientAirTemperature                                     */
/*                                                            */
/**************************************************************/
/*
AmbientAirTemperature ::= INTEGER (0..191)
                                            in deg C with a -40 offset
     The value 191 shall indicate an unknown value

*/
typedef OSUINT8 AmbientAirTemperature;

EXTERN int asn1PE_AmbientAirTemperature (OSCTXT* pctxt, AmbientAirTemperature value);

EXTERN int asn1PD_AmbientAirTemperature (OSCTXT* pctxt, AmbientAirTemperature* pvalue);

EXTERN void asn1Print_AmbientAirTemperature 
   (const char* name, const AmbientAirTemperature* pvalue);

EXTERN int asn1PrtToStrm_AmbientAirTemperature (OSCTXT *pctxt, 
   const char* name, const AmbientAirTemperature* pvalue);

/**************************************************************/
/*                                                            */
/*  Angle                                                     */
/*                                                            */
/**************************************************************/
/*
Angle ::= INTEGER (0..28800)
    LSB of 0.0125 degrees
    A range of 0 to 359.9875 degrees

*/
typedef OSUINT16 Angle;

EXTERN int asn1PE_Angle (OSCTXT* pctxt, Angle value);

EXTERN int asn1PD_Angle (OSCTXT* pctxt, Angle* pvalue);

EXTERN void asn1Print_Angle (const char* name, const Angle* pvalue);

EXTERN int asn1PrtToStrm_Angle (OSCTXT *pctxt, const char* name, const Angle* pvalue);

/**************************************************************/
/*                                                            */
/*  AnimalPropelledType                                       */
/*                                                            */
/**************************************************************/
/*
AnimalPropelledType ::= ENUMERATED { unavailable(0), otherTypes(1), animalMounted(2), animalDrawnCarriage(3), ... }
*/
typedef enum {
   unavailable_1 = 0,
   otherTypes = 1,
   animalMounted = 2,
   animalDrawnCarriage = 3
} AnimalPropelledType_Root;

typedef OSUINT32 AnimalPropelledType;

EXTERN int asn1PE_AnimalPropelledType (OSCTXT* pctxt, AnimalPropelledType value);

EXTERN int asn1PD_AnimalPropelledType (OSCTXT* pctxt, AnimalPropelledType* pvalue);

EXTERN void asn1Print_AnimalPropelledType 
   (const char* name, const AnimalPropelledType* pvalue);

EXTERN int asn1PrtToStrm_AnimalPropelledType (OSCTXT *pctxt, 
   const char* name, const AnimalPropelledType* pvalue);

EXTERN const OSUTF8CHAR* AnimalPropelledType_ToString (OSINT32 value);

EXTERN int AnimalPropelledType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, AnimalPropelledType* pvalue);

EXTERN int AnimalPropelledType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, AnimalPropelledType* pvalue);

/**************************************************************/
/*                                                            */
/*  AnimalType                                                */
/*                                                            */
/**************************************************************/
/*
AnimalType ::= ENUMERATED { unavailable(0), serviceUse(1), pet(2), farm(3), ... }
*/
typedef enum {
   unavailable_2 = 0,
   serviceUse = 1,
   pet = 2,
   farm = 3
} AnimalType_Root;

typedef OSUINT32 AnimalType;

EXTERN int asn1PE_AnimalType (OSCTXT* pctxt, AnimalType value);

EXTERN int asn1PD_AnimalType (OSCTXT* pctxt, AnimalType* pvalue);

EXTERN void asn1Print_AnimalType (const char* name, const AnimalType* pvalue);

EXTERN int asn1PrtToStrm_AnimalType (OSCTXT *pctxt, 
   const char* name, const AnimalType* pvalue);

EXTERN const OSUTF8CHAR* AnimalType_ToString (OSINT32 value);

EXTERN int AnimalType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, AnimalType* pvalue);

EXTERN int AnimalType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, AnimalType* pvalue);

/**************************************************************/
/*                                                            */
/*  AntiLockBrakeStatus                                       */
/*                                                            */
/**************************************************************/
/*
AntiLockBrakeStatus ::= ENUMERATED { unavailable(0), off(1), on(2), engaged(3) }
*/
typedef enum {
   unavailable_3 = 0,
   off = 1,
   on = 2,
   engaged = 3
} AntiLockBrakeStatus_Root;

typedef OSUINT32 AntiLockBrakeStatus;

EXTERN int asn1PE_AntiLockBrakeStatus (OSCTXT* pctxt, AntiLockBrakeStatus value);

EXTERN int asn1PD_AntiLockBrakeStatus (OSCTXT* pctxt, AntiLockBrakeStatus* pvalue);

EXTERN void asn1Print_AntiLockBrakeStatus 
   (const char* name, const AntiLockBrakeStatus* pvalue);

EXTERN int asn1PrtToStrm_AntiLockBrakeStatus (OSCTXT *pctxt, 
   const char* name, const AntiLockBrakeStatus* pvalue);

EXTERN const OSUTF8CHAR* AntiLockBrakeStatus_ToString (OSINT32 value);

EXTERN int AntiLockBrakeStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, AntiLockBrakeStatus* pvalue);

EXTERN int AntiLockBrakeStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, AntiLockBrakeStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  ApproachID                                                */
/*                                                            */
/**************************************************************/
/*
ApproachID ::= INTEGER (0..15)
                                zero to be used when valid value is unknown

*/
typedef OSUINT8 ApproachID;

EXTERN int asn1PE_ApproachID (OSCTXT* pctxt, ApproachID value);

EXTERN int asn1PD_ApproachID (OSCTXT* pctxt, ApproachID* pvalue);

EXTERN void asn1Print_ApproachID (const char* name, const ApproachID* pvalue);

EXTERN int asn1PrtToStrm_ApproachID (OSCTXT *pctxt, 
   const char* name, const ApproachID* pvalue);

/**************************************************************/
/*                                                            */
/*  Attachment                                                */
/*                                                            */
/**************************************************************/
/*
Attachment ::= ENUMERATED { unavailable(0), stroller(1), bicycleTrailer(2), cart(3), wheelchair(4), otherWalkAssistAttachments(5), pet(6), ... }
*/
typedef enum {
   unavailable_4 = 0,
   stroller = 1,
   bicycleTrailer = 2,
   cart = 3,
   wheelchair = 4,
   otherWalkAssistAttachments = 5,
   pet_1 = 6
} Attachment_Root;

typedef OSUINT32 Attachment;

EXTERN int asn1PE_Attachment (OSCTXT* pctxt, Attachment value);

EXTERN int asn1PD_Attachment (OSCTXT* pctxt, Attachment* pvalue);

EXTERN void asn1Print_Attachment (const char* name, const Attachment* pvalue);

EXTERN int asn1PrtToStrm_Attachment (OSCTXT *pctxt, 
   const char* name, const Attachment* pvalue);

EXTERN const OSUTF8CHAR* Attachment_ToString (OSINT32 value);

EXTERN int Attachment_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, Attachment* pvalue);

EXTERN int Attachment_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, Attachment* pvalue);

/**************************************************************/
/*                                                            */
/*  AttachmentRadius                                          */
/*                                                            */
/**************************************************************/
/*
AttachmentRadius ::= INTEGER (0..200)
                                       In LSB units of one decimeter

*/
typedef OSUINT8 AttachmentRadius;

EXTERN int asn1PE_AttachmentRadius (OSCTXT* pctxt, AttachmentRadius value);

EXTERN int asn1PD_AttachmentRadius (OSCTXT* pctxt, AttachmentRadius* pvalue);

EXTERN void asn1Print_AttachmentRadius 
   (const char* name, const AttachmentRadius* pvalue);

EXTERN int asn1PrtToStrm_AttachmentRadius (OSCTXT *pctxt, 
   const char* name, const AttachmentRadius* pvalue);

/**************************************************************/
/*                                                            */
/*  AuxiliaryBrakeStatus                                      */
/*                                                            */
/**************************************************************/
/*
AuxiliaryBrakeStatus ::= ENUMERATED { unavailable(0), off(1), on(2), reserved(3) }
*/
typedef enum {
   unavailable_5 = 0,
   off_1 = 1,
   on_1 = 2,
   reserved = 3
} AuxiliaryBrakeStatus_Root;

typedef OSUINT32 AuxiliaryBrakeStatus;

EXTERN int asn1PE_AuxiliaryBrakeStatus (OSCTXT* pctxt, AuxiliaryBrakeStatus value);

EXTERN int asn1PD_AuxiliaryBrakeStatus (OSCTXT* pctxt, AuxiliaryBrakeStatus* pvalue);

EXTERN void asn1Print_AuxiliaryBrakeStatus 
   (const char* name, const AuxiliaryBrakeStatus* pvalue);

EXTERN int asn1PrtToStrm_AuxiliaryBrakeStatus (OSCTXT *pctxt, 
   const char* name, const AuxiliaryBrakeStatus* pvalue);

EXTERN const OSUTF8CHAR* AuxiliaryBrakeStatus_ToString (OSINT32 value);

EXTERN int AuxiliaryBrakeStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, AuxiliaryBrakeStatus* pvalue);

EXTERN int AuxiliaryBrakeStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, AuxiliaryBrakeStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicVehicleClass                                         */
/*                                                            */
/**************************************************************/
/*
BasicVehicleClass ::= INTEGER (0..255)
*/
typedef OSUINT8 BasicVehicleClass;

EXTERN int asn1PE_BasicVehicleClass (OSCTXT* pctxt, BasicVehicleClass value);

EXTERN int asn1PD_BasicVehicleClass (OSCTXT* pctxt, BasicVehicleClass* pvalue);

EXTERN void asn1Print_BasicVehicleClass 
   (const char* name, const BasicVehicleClass* pvalue);

EXTERN int asn1PrtToStrm_BasicVehicleClass (OSCTXT *pctxt, 
   const char* name, const BasicVehicleClass* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicVehicleRole                                          */
/*                                                            */
/**************************************************************/
/*
BasicVehicleRole ::= ENUMERATED { basicVehicle(0), publicTransport(1), specialTransport(2), dangerousGoods(3), roadWork(4), roadRescue(5), emergency(6), safetyCar(7), none-unknown(8), truck(9), motorcycle(10), roadSideSource(11), police(12), fire(13), ambulance(14), dot(15), transit(16), slowMoving(17), stopNgo(18), cyclist(19), pedestrian(20), nonMotorized(21), military(22), ... }
*/
typedef enum {
   basicVehicle = 0,
   publicTransport = 1,
   specialTransport = 2,
   dangerousGoods = 3,
   roadWork = 4,
   roadRescue = 5,
   emergency = 6,
   safetyCar = 7,
   none_unknown = 8,
   truck = 9,
   motorcycle = 10,
   roadSideSource = 11,
   police = 12,
   fire = 13,
   ambulance = 14,
   dot = 15,
   transit_1 = 16,
   slowMoving = 17,
   stopNgo = 18,
   cyclist = 19,
   pedestrian = 20,
   nonMotorized = 21,
   military = 22
} BasicVehicleRole_Root;

typedef OSUINT32 BasicVehicleRole;

EXTERN int asn1PE_BasicVehicleRole (OSCTXT* pctxt, BasicVehicleRole value);

EXTERN int asn1PD_BasicVehicleRole (OSCTXT* pctxt, BasicVehicleRole* pvalue);

EXTERN void asn1Print_BasicVehicleRole 
   (const char* name, const BasicVehicleRole* pvalue);

EXTERN int asn1PrtToStrm_BasicVehicleRole (OSCTXT *pctxt, 
   const char* name, const BasicVehicleRole* pvalue);

EXTERN const OSUTF8CHAR* BasicVehicleRole_ToString (OSINT32 value);

EXTERN int BasicVehicleRole_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, BasicVehicleRole* pvalue);

EXTERN int BasicVehicleRole_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, BasicVehicleRole* pvalue);

/**************************************************************/
/*                                                            */
/*  BrakeAppliedPressure                                      */
/*                                                            */
/**************************************************************/
/*
BrakeAppliedPressure ::= ENUMERATED { unavailable(0), minPressure(1), bkLvl-2(2), bkLvl-3(3), bkLvl-4(4), bkLvl-5(5), bkLvl-6(6), bkLvl-7(7), bkLvl-8(8), bkLvl-9(9), bkLvl-10(10), bkLvl-11(11), bkLvl-12(12), bkLvl-13(13), bkLvl-14(14), maxPressure(15) }
       Encoded as a 4 bit value

*/
typedef enum {
   unavailable_6 = 0,
   minPressure = 1,
   bkLvl_2 = 2,
   bkLvl_3 = 3,
   bkLvl_4 = 4,
   bkLvl_5 = 5,
   bkLvl_6 = 6,
   bkLvl_7 = 7,
   bkLvl_8 = 8,
   bkLvl_9 = 9,
   bkLvl_10 = 10,
   bkLvl_11 = 11,
   bkLvl_12 = 12,
   bkLvl_13 = 13,
   bkLvl_14 = 14,
   maxPressure = 15
} BrakeAppliedPressure_Root;

typedef OSUINT32 BrakeAppliedPressure;

EXTERN int asn1PE_BrakeAppliedPressure (OSCTXT* pctxt, BrakeAppliedPressure value);

EXTERN int asn1PD_BrakeAppliedPressure (OSCTXT* pctxt, BrakeAppliedPressure* pvalue);

EXTERN void asn1Print_BrakeAppliedPressure 
   (const char* name, const BrakeAppliedPressure* pvalue);

EXTERN int asn1PrtToStrm_BrakeAppliedPressure (OSCTXT *pctxt, 
   const char* name, const BrakeAppliedPressure* pvalue);

EXTERN const OSUTF8CHAR* BrakeAppliedPressure_ToString (OSINT32 value);

EXTERN int BrakeAppliedPressure_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, BrakeAppliedPressure* pvalue);

EXTERN int BrakeAppliedPressure_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, BrakeAppliedPressure* pvalue);

/**************************************************************/
/*                                                            */
/*  BrakeAppliedStatus                                        */
/*                                                            */
/**************************************************************/
/*
BrakeAppliedStatus ::= BIT STRING  { unavailable(0), leftFront(1), leftRear(2), rightFront(3), rightRear(4) } (SIZE (5))
*/
/* Named bit constants */

#define BrakeAppliedStatus_unavailable                     0
#define BrakeAppliedStatus_leftFront                       1
#define BrakeAppliedStatus_leftRear                        2
#define BrakeAppliedStatus_rightFront                      3
#define BrakeAppliedStatus_rightRear                       4

typedef struct BrakeAppliedStatus {
   OSUINT32 numbits;
   OSOCTET data[1];
} BrakeAppliedStatus;

EXTERN int asn1PE_BrakeAppliedStatus (OSCTXT* pctxt, BrakeAppliedStatus* pvalue);

EXTERN int asn1PD_BrakeAppliedStatus (OSCTXT* pctxt, BrakeAppliedStatus* pvalue);

EXTERN void asn1Print_BrakeAppliedStatus 
   (const char* name, const BrakeAppliedStatus* pvalue);

EXTERN int asn1PrtToStrm_BrakeAppliedStatus (OSCTXT *pctxt, 
   const char* name, const BrakeAppliedStatus* pvalue);

EXTERN int asn1Init_BrakeAppliedStatus (BrakeAppliedStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  BrakeBoostApplied                                         */
/*                                                            */
/**************************************************************/
/*
BrakeBoostApplied ::= ENUMERATED { unavailable(0), off(1), on(2) }
*/
typedef enum {
   unavailable_7 = 0,
   off_2 = 1,
   on_2 = 2
} BrakeBoostApplied_Root;

typedef OSUINT32 BrakeBoostApplied;

EXTERN int asn1PE_BrakeBoostApplied (OSCTXT* pctxt, BrakeBoostApplied value);

EXTERN int asn1PD_BrakeBoostApplied (OSCTXT* pctxt, BrakeBoostApplied* pvalue);

EXTERN void asn1Print_BrakeBoostApplied 
   (const char* name, const BrakeBoostApplied* pvalue);

EXTERN int asn1PrtToStrm_BrakeBoostApplied (OSCTXT *pctxt, 
   const char* name, const BrakeBoostApplied* pvalue);

EXTERN const OSUTF8CHAR* BrakeBoostApplied_ToString (OSINT32 value);

EXTERN int BrakeBoostApplied_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, BrakeBoostApplied* pvalue);

EXTERN int BrakeBoostApplied_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, BrakeBoostApplied* pvalue);

/**************************************************************/
/*                                                            */
/*  BumperHeight                                              */
/*                                                            */
/**************************************************************/
/*
BumperHeight ::= INTEGER (0..127)
                                   in units of 0.01 meters from ground surface.

*/
typedef OSUINT8 BumperHeight;

EXTERN int asn1PE_BumperHeight (OSCTXT* pctxt, BumperHeight value);

EXTERN int asn1PD_BumperHeight (OSCTXT* pctxt, BumperHeight* pvalue);

EXTERN void asn1Print_BumperHeight (const char* name, const BumperHeight* pvalue);

EXTERN int asn1PrtToStrm_BumperHeight (OSCTXT *pctxt, 
   const char* name, const BumperHeight* pvalue);

/**************************************************************/
/*                                                            */
/*  CoarseHeading                                             */
/*                                                            */
/**************************************************************/
/*
CoarseHeading ::= INTEGER (0..240)
    Where the LSB is in units of 1.5 degrees 
    over a range of 0~358.5 degrees
    the value 240 shall be used for unavailable

*/
typedef OSUINT8 CoarseHeading;

EXTERN int asn1PE_CoarseHeading (OSCTXT* pctxt, CoarseHeading value);

EXTERN int asn1PD_CoarseHeading (OSCTXT* pctxt, CoarseHeading* pvalue);

EXTERN void asn1Print_CoarseHeading (const char* name, const CoarseHeading* pvalue);

EXTERN int asn1PrtToStrm_CoarseHeading (OSCTXT *pctxt, 
   const char* name, const CoarseHeading* pvalue);

/**************************************************************/
/*                                                            */
/*  CodeWord                                                  */
/*                                                            */
/**************************************************************/
/*
CodeWord ::= OCTET STRING (SIZE (1..16))
    any octet string up to 16 octets

*/
typedef struct EXTERN CodeWord {
   OSUINT32 numocts;
   OSOCTET data[16];
} CodeWord;

EXTERN int asn1PE_CodeWord (OSCTXT* pctxt, CodeWord* pvalue);

EXTERN int asn1PD_CodeWord (OSCTXT* pctxt, CodeWord* pvalue);

EXTERN void asn1Print_CodeWord (const char* name, const CodeWord* pvalue);

EXTERN int asn1PrtToStrm_CodeWord (OSCTXT *pctxt, 
   const char* name, const CodeWord* pvalue);

EXTERN int asn1Init_CodeWord (CodeWord* pvalue);

/**************************************************************/
/*                                                            */
/*  CoefficientOfFriction                                     */
/*                                                            */
/**************************************************************/
/*
CoefficientOfFriction ::= INTEGER (0..50)
    where 0 = 0.00 micro (frictionless), also used when data is unavailable 
    and  50 = 1.00 micro, in steps of 0.02

*/
typedef OSUINT8 CoefficientOfFriction;

EXTERN int asn1PE_CoefficientOfFriction (OSCTXT* pctxt, CoefficientOfFriction value);

EXTERN int asn1PD_CoefficientOfFriction (OSCTXT* pctxt, CoefficientOfFriction* pvalue);

EXTERN void asn1Print_CoefficientOfFriction 
   (const char* name, const CoefficientOfFriction* pvalue);

EXTERN int asn1PrtToStrm_CoefficientOfFriction (OSCTXT *pctxt, 
   const char* name, const CoefficientOfFriction* pvalue);

/**************************************************************/
/*                                                            */
/*  Confidence                                                */
/*                                                            */
/**************************************************************/
/*
Confidence ::= INTEGER (0..200)
    LSB units of 0.5 percent

*/
typedef OSUINT8 Confidence;

EXTERN int asn1PE_Confidence (OSCTXT* pctxt, Confidence value);

EXTERN int asn1PD_Confidence (OSCTXT* pctxt, Confidence* pvalue);

EXTERN void asn1Print_Confidence (const char* name, const Confidence* pvalue);

EXTERN int asn1PrtToStrm_Confidence (OSCTXT *pctxt, 
   const char* name, const Confidence* pvalue);

/**************************************************************/
/*                                                            */
/*  Count                                                     */
/*                                                            */
/**************************************************************/
/*
Count ::= INTEGER (0..32)
*/
typedef OSUINT8 Count;

EXTERN int asn1PE_Count (OSCTXT* pctxt, Count value);

EXTERN int asn1PD_Count (OSCTXT* pctxt, Count* pvalue);

EXTERN void asn1Print_Count (const char* name, const Count* pvalue);

EXTERN int asn1PrtToStrm_Count (OSCTXT *pctxt, const char* name, const Count* pvalue);

/**************************************************************/
/*                                                            */
/*  DDay                                                      */
/*                                                            */
/**************************************************************/
/*
DDay ::= INTEGER (0..31)
                           units of days

*/
typedef OSUINT8 DDay;

EXTERN int asn1PE_DDay (OSCTXT* pctxt, DDay value);

EXTERN int asn1PD_DDay (OSCTXT* pctxt, DDay* pvalue);

EXTERN void asn1Print_DDay (const char* name, const DDay* pvalue);

EXTERN int asn1PrtToStrm_DDay (OSCTXT *pctxt, const char* name, const DDay* pvalue);

/**************************************************************/
/*                                                            */
/*  DeltaAngle                                                */
/*                                                            */
/**************************************************************/
/*
DeltaAngle ::= INTEGER (-150..150)
    With an angle range from 
    negative 150 to positive 150 
    in one degree steps where zero is directly
    along the axis or the lane center line as defined by the
    two closest points

*/
typedef OSINT16 DeltaAngle;

EXTERN int asn1PE_DeltaAngle (OSCTXT* pctxt, DeltaAngle value);

EXTERN int asn1PD_DeltaAngle (OSCTXT* pctxt, DeltaAngle* pvalue);

EXTERN void asn1Print_DeltaAngle (const char* name, const DeltaAngle* pvalue);

EXTERN int asn1PrtToStrm_DeltaAngle (OSCTXT *pctxt, 
   const char* name, const DeltaAngle* pvalue);

/**************************************************************/
/*                                                            */
/*  DeltaTime                                                 */
/*                                                            */
/**************************************************************/
/*
DeltaTime ::= INTEGER (-122..121)
    Supporting a range of +/- 20 minute in steps of 10 seconds
    the value of -121 shall be used when more than -20 minutes
    the value of +120 shall be used when more than +20 minutes
    the value -122 shall be used when the value is unavailable

*/
typedef OSINT8 DeltaTime;

EXTERN int asn1PE_DeltaTime (OSCTXT* pctxt, DeltaTime value);

EXTERN int asn1PD_DeltaTime (OSCTXT* pctxt, DeltaTime* pvalue);

EXTERN void asn1Print_DeltaTime (const char* name, const DeltaTime* pvalue);

EXTERN int asn1PrtToStrm_DeltaTime (OSCTXT *pctxt, 
   const char* name, const DeltaTime* pvalue);

/**************************************************************/
/*                                                            */
/*  DescriptiveName                                           */
/*                                                            */
/**************************************************************/
/*
DescriptiveName ::= IA5String (SIZE (1..63))
*/
typedef const char* DescriptiveName;

EXTERN int asn1PE_DescriptiveName (OSCTXT* pctxt, DescriptiveName value);

EXTERN int asn1PD_DescriptiveName (OSCTXT* pctxt, DescriptiveName* pvalue);

EXTERN void asn1Print_DescriptiveName (const char* name, const DescriptiveName pvalue);

EXTERN int asn1PrtToStrm_DescriptiveName (OSCTXT *pctxt, 
   const char* name, const DescriptiveName pvalue);

EXTERN void asn1Free_DescriptiveName (OSCTXT *pctxt, DescriptiveName pvalue);

/**************************************************************/
/*                                                            */
/*  DHour                                                     */
/*                                                            */
/**************************************************************/
/*
DHour ::= INTEGER (0..31)
                           units of hours

*/
typedef OSUINT8 DHour;

EXTERN int asn1PE_DHour (OSCTXT* pctxt, DHour value);

EXTERN int asn1PD_DHour (OSCTXT* pctxt, DHour* pvalue);

EXTERN void asn1Print_DHour (const char* name, const DHour* pvalue);

EXTERN int asn1PrtToStrm_DHour (OSCTXT *pctxt, const char* name, const DHour* pvalue);

/**************************************************************/
/*                                                            */
/*  DirectionOfUse                                            */
/*                                                            */
/**************************************************************/
/*
DirectionOfUse ::= ENUMERATED { unavailable(0), forward(1), reverse(2), both(3) }
*/
typedef enum {
   unavailable_8 = 0,
   forward = 1,
   reverse = 2,
   both = 3
} DirectionOfUse_Root;

typedef OSUINT32 DirectionOfUse;

EXTERN int asn1PE_DirectionOfUse (OSCTXT* pctxt, DirectionOfUse value);

EXTERN int asn1PD_DirectionOfUse (OSCTXT* pctxt, DirectionOfUse* pvalue);

EXTERN void asn1Print_DirectionOfUse (const char* name, const DirectionOfUse* pvalue);

EXTERN int asn1PrtToStrm_DirectionOfUse (OSCTXT *pctxt, 
   const char* name, const DirectionOfUse* pvalue);

EXTERN const OSUTF8CHAR* DirectionOfUse_ToString (OSINT32 value);

EXTERN int DirectionOfUse_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, DirectionOfUse* pvalue);

EXTERN int DirectionOfUse_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, DirectionOfUse* pvalue);

/**************************************************************/
/*                                                            */
/*  DistanceUnits                                             */
/*                                                            */
/**************************************************************/
/*
DistanceUnits ::= ENUMERATED { centimeter(0), cm2-5(1), decimeter(2), meter(3), kilometer(4), foot(5), yard(6), mile(7) }
*/
typedef enum {
   centimeter = 0,
   cm2_5 = 1,
   decimeter = 2,
   meter = 3,
   kilometer = 4,
   foot = 5,
   yard = 6,
   mile = 7
} DistanceUnits_Root;

typedef OSUINT32 DistanceUnits;

EXTERN int asn1PE_DistanceUnits (OSCTXT* pctxt, DistanceUnits value);

EXTERN int asn1PD_DistanceUnits (OSCTXT* pctxt, DistanceUnits* pvalue);

EXTERN void asn1Print_DistanceUnits (const char* name, const DistanceUnits* pvalue);

EXTERN int asn1PrtToStrm_DistanceUnits (OSCTXT *pctxt, 
   const char* name, const DistanceUnits* pvalue);

EXTERN const OSUTF8CHAR* DistanceUnits_ToString (OSINT32 value);

EXTERN int DistanceUnits_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, DistanceUnits* pvalue);

EXTERN int DistanceUnits_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, DistanceUnits* pvalue);

/**************************************************************/
/*                                                            */
/*  DMinute                                                   */
/*                                                            */
/**************************************************************/
/*
DMinute ::= INTEGER (0..60)
                             units of minutes

*/
typedef OSUINT8 DMinute;

EXTERN int asn1PE_DMinute (OSCTXT* pctxt, DMinute value);

EXTERN int asn1PD_DMinute (OSCTXT* pctxt, DMinute* pvalue);

EXTERN void asn1Print_DMinute (const char* name, const DMinute* pvalue);

EXTERN int asn1PrtToStrm_DMinute (OSCTXT *pctxt, 
   const char* name, const DMinute* pvalue);

/**************************************************************/
/*                                                            */
/*  DMonth                                                    */
/*                                                            */
/**************************************************************/
/*
DMonth ::= INTEGER (0..12)
                            units of months

*/
typedef OSUINT8 DMonth;

EXTERN int asn1PE_DMonth (OSCTXT* pctxt, DMonth value);

EXTERN int asn1PD_DMonth (OSCTXT* pctxt, DMonth* pvalue);

EXTERN void asn1Print_DMonth (const char* name, const DMonth* pvalue);

EXTERN int asn1PrtToStrm_DMonth (OSCTXT *pctxt, 
   const char* name, const DMonth* pvalue);

/**************************************************************/
/*                                                            */
/*  DOffset                                                   */
/*                                                            */
/**************************************************************/
/*
DOffset ::= INTEGER (-840..840)
                                 units of minutes from UTC time

*/
typedef OSINT16 DOffset;

EXTERN int asn1PE_DOffset (OSCTXT* pctxt, DOffset value);

EXTERN int asn1PD_DOffset (OSCTXT* pctxt, DOffset* pvalue);

EXTERN void asn1Print_DOffset (const char* name, const DOffset* pvalue);

EXTERN int asn1PrtToStrm_DOffset (OSCTXT *pctxt, 
   const char* name, const DOffset* pvalue);

/**************************************************************/
/*                                                            */
/*  DrivenLineOffsetLg                                        */
/*                                                            */
/**************************************************************/
/*
DrivenLineOffsetLg ::= INTEGER (-32767..32767)
    LSB units are 1 cm.

*/
typedef OSINT16 DrivenLineOffsetLg;

EXTERN int asn1PE_DrivenLineOffsetLg (OSCTXT* pctxt, DrivenLineOffsetLg value);

EXTERN int asn1PD_DrivenLineOffsetLg (OSCTXT* pctxt, DrivenLineOffsetLg* pvalue);

EXTERN void asn1Print_DrivenLineOffsetLg 
   (const char* name, const DrivenLineOffsetLg* pvalue);

EXTERN int asn1PrtToStrm_DrivenLineOffsetLg (OSCTXT *pctxt, 
   const char* name, const DrivenLineOffsetLg* pvalue);

/**************************************************************/
/*                                                            */
/*  DrivenLineOffsetSm                                        */
/*                                                            */
/**************************************************************/
/*
DrivenLineOffsetSm ::= INTEGER (-2047..2047)
    LSB units are 1 cm.

*/
typedef OSINT16 DrivenLineOffsetSm;

EXTERN int asn1PE_DrivenLineOffsetSm (OSCTXT* pctxt, DrivenLineOffsetSm value);

EXTERN int asn1PD_DrivenLineOffsetSm (OSCTXT* pctxt, DrivenLineOffsetSm* pvalue);

EXTERN void asn1Print_DrivenLineOffsetSm 
   (const char* name, const DrivenLineOffsetSm* pvalue);

EXTERN int asn1PrtToStrm_DrivenLineOffsetSm (OSCTXT *pctxt, 
   const char* name, const DrivenLineOffsetSm* pvalue);

/**************************************************************/
/*                                                            */
/*  DrivingWheelAngle                                         */
/*                                                            */
/**************************************************************/
/*
DrivingWheelAngle ::= INTEGER (-128..127)
    LSB units of 0.3333 degrees.  
    a range of 42.33 degrees each way

*/
typedef OSINT8 DrivingWheelAngle;

EXTERN int asn1PE_DrivingWheelAngle (OSCTXT* pctxt, DrivingWheelAngle value);

EXTERN int asn1PD_DrivingWheelAngle (OSCTXT* pctxt, DrivingWheelAngle* pvalue);

EXTERN void asn1Print_DrivingWheelAngle 
   (const char* name, const DrivingWheelAngle* pvalue);

EXTERN int asn1PrtToStrm_DrivingWheelAngle (OSCTXT *pctxt, 
   const char* name, const DrivingWheelAngle* pvalue);

/**************************************************************/
/*                                                            */
/*  DSecond                                                   */
/*                                                            */
/**************************************************************/
/*
DSecond ::= INTEGER (0..65535)
                                units of milliseconds

*/
typedef OSUINT16 DSecond;

EXTERN int asn1PE_DSecond (OSCTXT* pctxt, DSecond value);

EXTERN int asn1PD_DSecond (OSCTXT* pctxt, DSecond* pvalue);

EXTERN void asn1Print_DSecond (const char* name, const DSecond* pvalue);

EXTERN int asn1PrtToStrm_DSecond (OSCTXT *pctxt, 
   const char* name, const DSecond* pvalue);

/**************************************************************/
/*                                                            */
/*  DSRCmsgID                                                 */
/*                                                            */
/**************************************************************/
/*
DSRCmsgID ::= INTEGER (0..32767)
*/
typedef OSUINT16 DSRCmsgID;

EXTERN int asn1PE_DSRCmsgID (OSCTXT* pctxt, DSRCmsgID value);

EXTERN int asn1PD_DSRCmsgID (OSCTXT* pctxt, DSRCmsgID* pvalue);

EXTERN void asn1Print_DSRCmsgID (const char* name, const DSRCmsgID* pvalue);

EXTERN int asn1PrtToStrm_DSRCmsgID (OSCTXT *pctxt, 
   const char* name, const DSRCmsgID* pvalue);

/**************************************************************/
/*                                                            */
/*  Duration                                                  */
/*                                                            */
/**************************************************************/
/*
Duration ::= INTEGER (0..3600)
                                units of seconds

*/
typedef OSUINT16 Duration;

EXTERN int asn1PE_Duration (OSCTXT* pctxt, Duration value);

EXTERN int asn1PD_Duration (OSCTXT* pctxt, Duration* pvalue);

EXTERN void asn1Print_Duration (const char* name, const Duration* pvalue);

EXTERN int asn1PrtToStrm_Duration (OSCTXT *pctxt, 
   const char* name, const Duration* pvalue);

/**************************************************************/
/*                                                            */
/*  DYear                                                     */
/*                                                            */
/**************************************************************/
/*
DYear ::= INTEGER (0..4095)
                             units of years

*/
typedef OSUINT16 DYear;

EXTERN int asn1PE_DYear (OSCTXT* pctxt, DYear value);

EXTERN int asn1PD_DYear (OSCTXT* pctxt, DYear* pvalue);

EXTERN void asn1Print_DYear (const char* name, const DYear* pvalue);

EXTERN int asn1PrtToStrm_DYear (OSCTXT *pctxt, const char* name, const DYear* pvalue);

/**************************************************************/
/*                                                            */
/*  ElevationConfidence                                       */
/*                                                            */
/**************************************************************/
/*
ElevationConfidence ::= ENUMERATED { unavailable(0), elev-500-00(1), elev-200-00(2), elev-100-00(3), elev-050-00(4), elev-020-00(5), elev-010-00(6), elev-005-00(7), elev-002-00(8), elev-001-00(9), elev-000-50(10), elev-000-20(11), elev-000-10(12), elev-000-05(13), elev-000-02(14), elev-000-01(15) }
       Encoded as a 4 bit value

*/
typedef enum {
   unavailable_9 = 0,
   elev_500_00 = 1,
   elev_200_00 = 2,
   elev_100_00 = 3,
   elev_050_00 = 4,
   elev_020_00 = 5,
   elev_010_00 = 6,
   elev_005_00 = 7,
   elev_002_00 = 8,
   elev_001_00 = 9,
   elev_000_50 = 10,
   elev_000_20 = 11,
   elev_000_10 = 12,
   elev_000_05 = 13,
   elev_000_02 = 14,
   elev_000_01 = 15
} ElevationConfidence_Root;

typedef OSUINT32 ElevationConfidence;

EXTERN int asn1PE_ElevationConfidence (OSCTXT* pctxt, ElevationConfidence value);

EXTERN int asn1PD_ElevationConfidence (OSCTXT* pctxt, ElevationConfidence* pvalue);

EXTERN void asn1Print_ElevationConfidence 
   (const char* name, const ElevationConfidence* pvalue);

EXTERN int asn1PrtToStrm_ElevationConfidence (OSCTXT *pctxt, 
   const char* name, const ElevationConfidence* pvalue);

EXTERN const OSUTF8CHAR* ElevationConfidence_ToString (OSINT32 value);

EXTERN int ElevationConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ElevationConfidence* pvalue);

EXTERN int ElevationConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ElevationConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  Elevation                                                 */
/*                                                            */
/**************************************************************/
/*
Elevation ::= INTEGER (-4096..61439)
     In units of 10 cm steps above or below the reference ellipsoid
     Providing a range of -409.5 to + 6143.9 meters
     The value -4096 shall be used when Unknown is to be sent

*/
typedef OSINT32 Elevation;

EXTERN int asn1PE_Elevation (OSCTXT* pctxt, Elevation value);

EXTERN int asn1PD_Elevation (OSCTXT* pctxt, Elevation* pvalue);

EXTERN void asn1Print_Elevation (const char* name, const Elevation* pvalue);

EXTERN int asn1PrtToStrm_Elevation (OSCTXT *pctxt, 
   const char* name, const Elevation* pvalue);

/**************************************************************/
/*                                                            */
/*  Extent                                                    */
/*                                                            */
/**************************************************************/
/*
Extent ::= ENUMERATED { useInstantlyOnly(0), useFor3meters(1), useFor10meters(2), useFor50meters(3), useFor100meters(4), useFor500meters(5), useFor1000meters(6), useFor5000meters(7), useFor10000meters(8), useFor50000meters(9), useFor100000meters(10), useFor500000meters(11), useFor1000000meters(12), useFor5000000meters(13), useFor10000000meters(14), forever(15) }
       Encoded as a 4 bit value

*/
typedef enum {
   useInstantlyOnly = 0,
   useFor3meters = 1,
   useFor10meters = 2,
   useFor50meters = 3,
   useFor100meters = 4,
   useFor500meters = 5,
   useFor1000meters = 6,
   useFor5000meters = 7,
   useFor10000meters = 8,
   useFor50000meters = 9,
   useFor100000meters = 10,
   useFor500000meters = 11,
   useFor1000000meters = 12,
   useFor5000000meters = 13,
   useFor10000000meters = 14,
   forever = 15
} Extent_Root;

typedef OSUINT32 Extent;

EXTERN int asn1PE_Extent (OSCTXT* pctxt, Extent value);

EXTERN int asn1PD_Extent (OSCTXT* pctxt, Extent* pvalue);

EXTERN void asn1Print_Extent (const char* name, const Extent* pvalue);

EXTERN int asn1PrtToStrm_Extent (OSCTXT *pctxt, 
   const char* name, const Extent* pvalue);

EXTERN const OSUTF8CHAR* Extent_ToString (OSINT32 value);

EXTERN int Extent_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, Extent* pvalue);

EXTERN int Extent_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, Extent* pvalue);

/**************************************************************/
/*                                                            */
/*  ExteriorLights                                            */
/*                                                            */
/**************************************************************/
/*
ExteriorLights ::= BIT STRING  { lowBeamHeadlightsOn(0), highBeamHeadlightsOn(1), leftTurnSignalOn(2), rightTurnSignalOn(3), hazardSignalOn(4), automaticLightControlOn(5), daytimeRunningLightsOn(6), fogLightOn(7), parkingLightsOn(8) } (SIZE (9, ...))
*/
/* Named bit constants */

#define ExteriorLights_lowBeamHeadlightsOn             0
#define ExteriorLights_highBeamHeadlightsOn            1
#define ExteriorLights_leftTurnSignalOn                2
#define ExteriorLights_rightTurnSignalOn               3
#define ExteriorLights_hazardSignalOn                  4
#define ExteriorLights_automaticLightControlOn         5
#define ExteriorLights_daytimeRunningLightsOn          6
#define ExteriorLights_fogLightOn                      7
#define ExteriorLights_parkingLightsOn                 8

typedef struct ExteriorLights {
   OSUINT32 numbits;
   OSOCTET data[2];
   OSOCTET* extdata;
} ExteriorLights;

EXTERN int asn1PE_ExteriorLights (OSCTXT* pctxt, ExteriorLights* pvalue);

EXTERN int asn1PD_ExteriorLights (OSCTXT* pctxt, ExteriorLights* pvalue);

EXTERN void asn1Print_ExteriorLights (const char* name, const ExteriorLights* pvalue);

EXTERN int asn1PrtToStrm_ExteriorLights (OSCTXT *pctxt, 
   const char* name, const ExteriorLights* pvalue);

EXTERN int asn1Init_ExteriorLights (ExteriorLights* pvalue);

/**************************************************************/
/*                                                            */
/*  FuelType                                                  */
/*                                                            */
/**************************************************************/
/*
FuelType ::= INTEGER (0..15)
*/
typedef OSUINT8 FuelType;

EXTERN int asn1PE_FuelType (OSCTXT* pctxt, FuelType value);

EXTERN int asn1PD_FuelType (OSCTXT* pctxt, FuelType* pvalue);

EXTERN void asn1Print_FuelType (const char* name, const FuelType* pvalue);

EXTERN int asn1PrtToStrm_FuelType (OSCTXT *pctxt, 
   const char* name, const FuelType* pvalue);

/**************************************************************/
/*                                                            */
/*  FurtherInfoID                                             */
/*                                                            */
/**************************************************************/
/*
FurtherInfoID ::= OCTET STRING (SIZE (2))
    a link to any other incident 
    information data that may be available 
    in the normal ATIS incident description 
    or other messages

*/
typedef struct EXTERN FurtherInfoID {
   OSUINT32 numocts;
   OSOCTET data[2];
} FurtherInfoID;

EXTERN int asn1PE_FurtherInfoID (OSCTXT* pctxt, FurtherInfoID* pvalue);

EXTERN int asn1PD_FurtherInfoID (OSCTXT* pctxt, FurtherInfoID* pvalue);

EXTERN void asn1Print_FurtherInfoID (const char* name, const FurtherInfoID* pvalue);

EXTERN int asn1PrtToStrm_FurtherInfoID (OSCTXT *pctxt, 
   const char* name, const FurtherInfoID* pvalue);

EXTERN int asn1Init_FurtherInfoID (FurtherInfoID* pvalue);

/**************************************************************/
/*                                                            */
/*  GNSSstatus                                                */
/*                                                            */
/**************************************************************/
/*
GNSSstatus ::= BIT STRING  { unavailable(0), isHealthy(1), isMonitored(2), baseStationType(3), aPDOPofUnder5(4), inViewOfUnder5(5), localCorrectionsPresent(6), networkCorrectionsPresent(7) } (SIZE (8))
*/
/* Named bit constants */

#define GNSSstatus_unavailable_1                   0
#define GNSSstatus_isHealthy                       1
#define GNSSstatus_isMonitored                     2
#define GNSSstatus_baseStationType                 3
#define GNSSstatus_aPDOPofUnder5                   4
#define GNSSstatus_inViewOfUnder5                  5
#define GNSSstatus_localCorrectionsPresent         6
#define GNSSstatus_networkCorrectionsPresent       7

typedef struct GNSSstatus {
   OSUINT32 numbits;
   OSOCTET data[1];
} GNSSstatus;

EXTERN int asn1PE_GNSSstatus (OSCTXT* pctxt, GNSSstatus* pvalue);

EXTERN int asn1PD_GNSSstatus (OSCTXT* pctxt, GNSSstatus* pvalue);

EXTERN void asn1Print_GNSSstatus (const char* name, const GNSSstatus* pvalue);

EXTERN int asn1PrtToStrm_GNSSstatus (OSCTXT *pctxt, 
   const char* name, const GNSSstatus* pvalue);

EXTERN int asn1Init_GNSSstatus (GNSSstatus* pvalue);

/**************************************************************/
/*                                                            */
/*  GrossDistance                                             */
/*                                                            */
/**************************************************************/
/*
GrossDistance ::= INTEGER (0..1023)
                                     Units of 1.00 meters
    The value 1023 shall indicate unavailable

*/
typedef OSUINT16 GrossDistance;

EXTERN int asn1PE_GrossDistance (OSCTXT* pctxt, GrossDistance value);

EXTERN int asn1PD_GrossDistance (OSCTXT* pctxt, GrossDistance* pvalue);

EXTERN void asn1Print_GrossDistance (const char* name, const GrossDistance* pvalue);

EXTERN int asn1PrtToStrm_GrossDistance (OSCTXT *pctxt, 
   const char* name, const GrossDistance* pvalue);

/**************************************************************/
/*                                                            */
/*  GrossSpeed                                                */
/*                                                            */
/**************************************************************/
/*
GrossSpeed ::= INTEGER (0..31)
                                Units of 1.00 m/s
    The value 30 shall be used for speeds of 30 m/s or greater (67.1 mph)
    The value 31 shall indicate that the speed is unavailable

*/
typedef OSUINT8 GrossSpeed;

EXTERN int asn1PE_GrossSpeed (OSCTXT* pctxt, GrossSpeed value);

EXTERN int asn1PD_GrossSpeed (OSCTXT* pctxt, GrossSpeed* pvalue);

EXTERN void asn1Print_GrossSpeed (const char* name, const GrossSpeed* pvalue);

EXTERN int asn1PrtToStrm_GrossSpeed (OSCTXT *pctxt, 
   const char* name, const GrossSpeed* pvalue);

/**************************************************************/
/*                                                            */
/*  HeadingConfidence                                         */
/*                                                            */
/**************************************************************/
/*
HeadingConfidence ::= ENUMERATED { unavailable(0), prec10deg(1), prec05deg(2), prec01deg(3), prec0-1deg(4), prec0-05deg(5), prec0-01deg(6), prec0-0125deg(7) }
       Encoded as a 3 bit value

*/
typedef enum {
   unavailable_10 = 0,
   prec10deg = 1,
   prec05deg = 2,
   prec01deg = 3,
   prec0_1deg = 4,
   prec0_05deg = 5,
   prec0_01deg = 6,
   prec0_0125deg = 7
} HeadingConfidence_Root;

typedef OSUINT32 HeadingConfidence;

EXTERN int asn1PE_HeadingConfidence (OSCTXT* pctxt, HeadingConfidence value);

EXTERN int asn1PD_HeadingConfidence (OSCTXT* pctxt, HeadingConfidence* pvalue);

EXTERN void asn1Print_HeadingConfidence 
   (const char* name, const HeadingConfidence* pvalue);

EXTERN int asn1PrtToStrm_HeadingConfidence (OSCTXT *pctxt, 
   const char* name, const HeadingConfidence* pvalue);

EXTERN const OSUTF8CHAR* HeadingConfidence_ToString (OSINT32 value);

EXTERN int HeadingConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, HeadingConfidence* pvalue);

EXTERN int HeadingConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, HeadingConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  Heading                                                   */
/*                                                            */
/**************************************************************/
/*
Heading ::= INTEGER (0..28800)
    LSB of 0.0125 degrees
    A range of 0 to 359.9875 degrees

*/
typedef OSUINT16 Heading;

EXTERN int asn1PE_Heading (OSCTXT* pctxt, Heading value);

EXTERN int asn1PD_Heading (OSCTXT* pctxt, Heading* pvalue);

EXTERN void asn1Print_Heading (const char* name, const Heading* pvalue);

EXTERN int asn1PrtToStrm_Heading (OSCTXT *pctxt, 
   const char* name, const Heading* pvalue);

/**************************************************************/
/*                                                            */
/*  HeadingSlice                                              */
/*                                                            */
/**************************************************************/
/*
HeadingSlice ::= BIT STRING  { from000-0to022-5degrees(0), from022-5to045-0degrees(1), from045-0to067-5degrees(2), from067-5to090-0degrees(3), from090-0to112-5degrees(4), from112-5to135-0degrees(5), from135-0to157-5degrees(6), from157-5to180-0degrees(7), from180-0to202-5degrees(8), from202-5to225-0degrees(9), from225-0to247-5degrees(10), from247-5to270-0degrees(11), from270-0to292-5degrees(12), from292-5to315-0degrees(13), from315-0to337-5degrees(14), from337-5to360-0degrees(15) } (SIZE (16))
*/
/* Named bit constants */

#define HeadingSlice_from000_0to022_5degrees         0
#define HeadingSlice_from022_5to045_0degrees         1
#define HeadingSlice_from045_0to067_5degrees         2
#define HeadingSlice_from067_5to090_0degrees         3
#define HeadingSlice_from090_0to112_5degrees         4
#define HeadingSlice_from112_5to135_0degrees         5
#define HeadingSlice_from135_0to157_5degrees         6
#define HeadingSlice_from157_5to180_0degrees         7
#define HeadingSlice_from180_0to202_5degrees         8
#define HeadingSlice_from202_5to225_0degrees         9
#define HeadingSlice_from225_0to247_5degrees         10
#define HeadingSlice_from247_5to270_0degrees         11
#define HeadingSlice_from270_0to292_5degrees         12
#define HeadingSlice_from292_5to315_0degrees         13
#define HeadingSlice_from315_0to337_5degrees         14
#define HeadingSlice_from337_5to360_0degrees         15

typedef struct HeadingSlice {
   OSUINT32 numbits;
   OSOCTET data[2];
} HeadingSlice;

EXTERN int asn1PE_HeadingSlice (OSCTXT* pctxt, HeadingSlice* pvalue);

EXTERN int asn1PD_HeadingSlice (OSCTXT* pctxt, HeadingSlice* pvalue);

EXTERN void asn1Print_HeadingSlice (const char* name, const HeadingSlice* pvalue);

EXTERN int asn1PrtToStrm_HeadingSlice (OSCTXT *pctxt, 
   const char* name, const HeadingSlice* pvalue);

EXTERN int asn1Init_HeadingSlice (HeadingSlice* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionID                                            */
/*                                                            */
/**************************************************************/
/*
IntersectionID ::= INTEGER (0..65535)
    The values zero through 255 are allocated for testing purposes
    Note that the value assigned to an intersection will be
    unique within a given regional ID only

*/
typedef OSUINT16 IntersectionID;

EXTERN int asn1PE_IntersectionID (OSCTXT* pctxt, IntersectionID value);

EXTERN int asn1PD_IntersectionID (OSCTXT* pctxt, IntersectionID* pvalue);

EXTERN void asn1Print_IntersectionID (const char* name, const IntersectionID* pvalue);

EXTERN int asn1PrtToStrm_IntersectionID (OSCTXT *pctxt, 
   const char* name, const IntersectionID* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionStatusObject                                  */
/*                                                            */
/**************************************************************/
/*
IntersectionStatusObject ::= BIT STRING  { manualControlIsEnabled(0), stopTimeIsActivated(1), failureFlash(2), preemptIsActive(3), signalPriorityIsActive(4), fixedTimeOperation(5), trafficDependentOperation(6), standbyOperation(7), failureMode(8), off(9), recentMAPmessageUpdate(10), recentChangeInMAPassignedLanesIDsUsed(11), noValidMAPisAvailableAtThisTime(12), noValidSPATisAvailableAtThisTime(13) } (SIZE (16))
*/
/* Named bit constants */

#define IntersectionStatusObject_manualControlIsEnabled          0
#define IntersectionStatusObject_stopTimeIsActivated             1
#define IntersectionStatusObject_failureFlash                    2
#define IntersectionStatusObject_preemptIsActive                 3
#define IntersectionStatusObject_signalPriorityIsActive          4
#define IntersectionStatusObject_fixedTimeOperation              5
#define IntersectionStatusObject_trafficDependentOperation       6
#define IntersectionStatusObject_standbyOperation                7
#define IntersectionStatusObject_failureMode                     8
#define IntersectionStatusObject_off                             9
#define IntersectionStatusObject_recentMAPmessageUpdate          10
#define IntersectionStatusObject_recentChangeInMAPassignedLanesIDsUsed 11
#define IntersectionStatusObject_noValidMAPisAvailableAtThisTime 12
#define IntersectionStatusObject_noValidSPATisAvailableAtThisTime 13

typedef struct IntersectionStatusObject {
   OSUINT32 numbits;
   OSOCTET data[2];
} IntersectionStatusObject;

EXTERN int asn1PE_IntersectionStatusObject (OSCTXT* pctxt, IntersectionStatusObject* pvalue);

EXTERN int asn1PD_IntersectionStatusObject (OSCTXT* pctxt, IntersectionStatusObject* pvalue);

EXTERN void asn1Print_IntersectionStatusObject 
   (const char* name, const IntersectionStatusObject* pvalue);

EXTERN int asn1PrtToStrm_IntersectionStatusObject (OSCTXT *pctxt, 
   const char* name, const IntersectionStatusObject* pvalue);

EXTERN int asn1Init_IntersectionStatusObject (IntersectionStatusObject* pvalue);

/**************************************************************/
/*                                                            */
/*  IsDolly                                                   */
/*                                                            */
/**************************************************************/
/*
IsDolly ::= BOOLEAN
                     When false indicates a trailer unit

*/
typedef OSBOOL IsDolly;

EXTERN int asn1PE_IsDolly (OSCTXT* pctxt, IsDolly value);

EXTERN int asn1PD_IsDolly (OSCTXT* pctxt, IsDolly* pvalue);

EXTERN void asn1Print_IsDolly (const char* name, const IsDolly* pvalue);

EXTERN int asn1PrtToStrm_IsDolly (OSCTXT *pctxt, 
   const char* name, const IsDolly* pvalue);

/**************************************************************/
/*                                                            */
/*  Iso3833VehicleType                                        */
/*                                                            */
/**************************************************************/
/*
Iso3833VehicleType ::= INTEGER (0..100)
*/
typedef OSUINT8 Iso3833VehicleType;

EXTERN int asn1PE_Iso3833VehicleType (OSCTXT* pctxt, Iso3833VehicleType value);

EXTERN int asn1PD_Iso3833VehicleType (OSCTXT* pctxt, Iso3833VehicleType* pvalue);

EXTERN void asn1Print_Iso3833VehicleType 
   (const char* name, const Iso3833VehicleType* pvalue);

EXTERN int asn1PrtToStrm_Iso3833VehicleType (OSCTXT *pctxt, 
   const char* name, const Iso3833VehicleType* pvalue);

/**************************************************************/
/*                                                            */
/*  ITIStextPhrase                                            */
/*                                                            */
/**************************************************************/
/*
ITIStextPhrase ::= IA5String (SIZE (1..16))
*/
typedef const char* ITIStextPhrase;

EXTERN int asn1PE_ITIStextPhrase (OSCTXT* pctxt, ITIStextPhrase value);

EXTERN int asn1PD_ITIStextPhrase (OSCTXT* pctxt, ITIStextPhrase* pvalue);

EXTERN void asn1Print_ITIStextPhrase (const char* name, const ITIStextPhrase pvalue);

EXTERN int asn1PrtToStrm_ITIStextPhrase (OSCTXT *pctxt, 
   const char* name, const ITIStextPhrase pvalue);

EXTERN void asn1Free_ITIStextPhrase (OSCTXT *pctxt, ITIStextPhrase pvalue);

/**************************************************************/
/*                                                            */
/*  AxleLocation                                              */
/*                                                            */
/**************************************************************/
/*
AxleLocation ::= INTEGER (0..255)
*/
typedef OSUINT8 AxleLocation;

EXTERN int asn1PE_AxleLocation (OSCTXT* pctxt, AxleLocation value);

EXTERN int asn1PD_AxleLocation (OSCTXT* pctxt, AxleLocation* pvalue);

EXTERN void asn1Print_AxleLocation (const char* name, const AxleLocation* pvalue);

EXTERN int asn1PrtToStrm_AxleLocation (OSCTXT *pctxt, 
   const char* name, const AxleLocation* pvalue);

/**************************************************************/
/*                                                            */
/*  AxleWeight                                                */
/*                                                            */
/**************************************************************/
/*
AxleWeight ::= INTEGER (0..64255)
*/
typedef OSUINT16 AxleWeight;

EXTERN int asn1PE_AxleWeight (OSCTXT* pctxt, AxleWeight value);

EXTERN int asn1PD_AxleWeight (OSCTXT* pctxt, AxleWeight* pvalue);

EXTERN void asn1Print_AxleWeight (const char* name, const AxleWeight* pvalue);

EXTERN int asn1PrtToStrm_AxleWeight (OSCTXT *pctxt, 
   const char* name, const AxleWeight* pvalue);

/**************************************************************/
/*                                                            */
/*  CargoWeight                                               */
/*                                                            */
/**************************************************************/
/*
CargoWeight ::= INTEGER (0..64255)
*/
typedef OSUINT16 CargoWeight;

EXTERN int asn1PE_CargoWeight (OSCTXT* pctxt, CargoWeight value);

EXTERN int asn1PD_CargoWeight (OSCTXT* pctxt, CargoWeight* pvalue);

EXTERN void asn1Print_CargoWeight (const char* name, const CargoWeight* pvalue);

EXTERN int asn1PrtToStrm_CargoWeight (OSCTXT *pctxt, 
   const char* name, const CargoWeight* pvalue);

/**************************************************************/
/*                                                            */
/*  DriveAxleLiftAirPressure                                  */
/*                                                            */
/**************************************************************/
/*
DriveAxleLiftAirPressure ::= INTEGER (0..1000)
*/
typedef OSUINT16 DriveAxleLiftAirPressure;

EXTERN int asn1PE_DriveAxleLiftAirPressure (OSCTXT* pctxt, DriveAxleLiftAirPressure value);

EXTERN int asn1PD_DriveAxleLiftAirPressure (OSCTXT* pctxt, DriveAxleLiftAirPressure* pvalue);

EXTERN void asn1Print_DriveAxleLiftAirPressure 
   (const char* name, const DriveAxleLiftAirPressure* pvalue);

EXTERN int asn1PrtToStrm_DriveAxleLiftAirPressure (OSCTXT *pctxt, 
   const char* name, const DriveAxleLiftAirPressure* pvalue);

/**************************************************************/
/*                                                            */
/*  DriveAxleLocation                                         */
/*                                                            */
/**************************************************************/
/*
DriveAxleLocation ::= INTEGER (0..255)
*/
typedef OSUINT8 DriveAxleLocation;

EXTERN int asn1PE_DriveAxleLocation (OSCTXT* pctxt, DriveAxleLocation value);

EXTERN int asn1PD_DriveAxleLocation (OSCTXT* pctxt, DriveAxleLocation* pvalue);

EXTERN void asn1Print_DriveAxleLocation 
   (const char* name, const DriveAxleLocation* pvalue);

EXTERN int asn1PrtToStrm_DriveAxleLocation (OSCTXT *pctxt, 
   const char* name, const DriveAxleLocation* pvalue);

/**************************************************************/
/*                                                            */
/*  DriveAxleLubePressure                                     */
/*                                                            */
/**************************************************************/
/*
DriveAxleLubePressure ::= INTEGER (0..250)
*/
typedef OSUINT8 DriveAxleLubePressure;

EXTERN int asn1PE_DriveAxleLubePressure (OSCTXT* pctxt, DriveAxleLubePressure value);

EXTERN int asn1PD_DriveAxleLubePressure (OSCTXT* pctxt, DriveAxleLubePressure* pvalue);

EXTERN void asn1Print_DriveAxleLubePressure 
   (const char* name, const DriveAxleLubePressure* pvalue);

EXTERN int asn1PrtToStrm_DriveAxleLubePressure (OSCTXT *pctxt, 
   const char* name, const DriveAxleLubePressure* pvalue);

/**************************************************************/
/*                                                            */
/*  DriveAxleTemperature                                      */
/*                                                            */
/**************************************************************/
/*
DriveAxleTemperature ::= INTEGER (-40..210)
*/
typedef OSINT16 DriveAxleTemperature;

EXTERN int asn1PE_DriveAxleTemperature (OSCTXT* pctxt, DriveAxleTemperature value);

EXTERN int asn1PD_DriveAxleTemperature (OSCTXT* pctxt, DriveAxleTemperature* pvalue);

EXTERN void asn1Print_DriveAxleTemperature 
   (const char* name, const DriveAxleTemperature* pvalue);

EXTERN int asn1PrtToStrm_DriveAxleTemperature (OSCTXT *pctxt, 
   const char* name, const DriveAxleTemperature* pvalue);

/**************************************************************/
/*                                                            */
/*  SteeringAxleLubePressure                                  */
/*                                                            */
/**************************************************************/
/*
SteeringAxleLubePressure ::= INTEGER (0..250)
*/
typedef OSUINT8 SteeringAxleLubePressure;

EXTERN int asn1PE_SteeringAxleLubePressure (OSCTXT* pctxt, SteeringAxleLubePressure value);

EXTERN int asn1PD_SteeringAxleLubePressure (OSCTXT* pctxt, SteeringAxleLubePressure* pvalue);

EXTERN void asn1Print_SteeringAxleLubePressure 
   (const char* name, const SteeringAxleLubePressure* pvalue);

EXTERN int asn1PrtToStrm_SteeringAxleLubePressure (OSCTXT *pctxt, 
   const char* name, const SteeringAxleLubePressure* pvalue);

/**************************************************************/
/*                                                            */
/*  SteeringAxleTemperature                                   */
/*                                                            */
/**************************************************************/
/*
SteeringAxleTemperature ::= INTEGER (-40..210)
*/
typedef OSINT16 SteeringAxleTemperature;

EXTERN int asn1PE_SteeringAxleTemperature (OSCTXT* pctxt, SteeringAxleTemperature value);

EXTERN int asn1PD_SteeringAxleTemperature (OSCTXT* pctxt, SteeringAxleTemperature* pvalue);

EXTERN void asn1Print_SteeringAxleTemperature 
   (const char* name, const SteeringAxleTemperature* pvalue);

EXTERN int asn1PrtToStrm_SteeringAxleTemperature (OSCTXT *pctxt, 
   const char* name, const SteeringAxleTemperature* pvalue);

/**************************************************************/
/*                                                            */
/*  TireLeakageRate                                           */
/*                                                            */
/**************************************************************/
/*
TireLeakageRate ::= INTEGER (0..64255)
*/
typedef OSUINT16 TireLeakageRate;

EXTERN int asn1PE_TireLeakageRate (OSCTXT* pctxt, TireLeakageRate value);

EXTERN int asn1PD_TireLeakageRate (OSCTXT* pctxt, TireLeakageRate* pvalue);

EXTERN void asn1Print_TireLeakageRate 
   (const char* name, const TireLeakageRate* pvalue);

EXTERN int asn1PrtToStrm_TireLeakageRate (OSCTXT *pctxt, 
   const char* name, const TireLeakageRate* pvalue);

/**************************************************************/
/*                                                            */
/*  TireLocation                                              */
/*                                                            */
/**************************************************************/
/*
TireLocation ::= INTEGER (0..255)
*/
typedef OSUINT8 TireLocation;

EXTERN int asn1PE_TireLocation (OSCTXT* pctxt, TireLocation value);

EXTERN int asn1PD_TireLocation (OSCTXT* pctxt, TireLocation* pvalue);

EXTERN void asn1Print_TireLocation (const char* name, const TireLocation* pvalue);

EXTERN int asn1PrtToStrm_TireLocation (OSCTXT *pctxt, 
   const char* name, const TireLocation* pvalue);

/**************************************************************/
/*                                                            */
/*  TirePressureThresholdDetection                            */
/*                                                            */
/**************************************************************/
/*
TirePressureThresholdDetection ::= ENUMERATED { noData(0), overPressure(1), noWarningPressure(2), underPressure(3), extremeUnderPressure(4), undefined(5), errorIndicator(6), notAvailable(7) }
       Encoded as a 3 bit value

*/
typedef enum {
   noData = 0,
   overPressure = 1,
   noWarningPressure = 2,
   underPressure = 3,
   extremeUnderPressure = 4,
   undefined = 5,
   errorIndicator = 6,
   notAvailable = 7
} TirePressureThresholdDetection_Root;

typedef OSUINT32 TirePressureThresholdDetection;

EXTERN int asn1PE_TirePressureThresholdDetection (OSCTXT* pctxt, TirePressureThresholdDetection value);

EXTERN int asn1PD_TirePressureThresholdDetection (OSCTXT* pctxt, TirePressureThresholdDetection* pvalue);

EXTERN void asn1Print_TirePressureThresholdDetection 
   (const char* name, const TirePressureThresholdDetection* pvalue);

EXTERN int asn1PrtToStrm_TirePressureThresholdDetection (OSCTXT *pctxt, 
   const char* name, const TirePressureThresholdDetection* pvalue);

EXTERN const OSUTF8CHAR* TirePressureThresholdDetection_ToString (OSINT32 value);

EXTERN int TirePressureThresholdDetection_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, TirePressureThresholdDetection* pvalue);

EXTERN int TirePressureThresholdDetection_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      TirePressureThresholdDetection* pvalue);

/**************************************************************/
/*                                                            */
/*  TirePressure                                              */
/*                                                            */
/**************************************************************/
/*
TirePressure ::= INTEGER (0..250)
*/
typedef OSUINT8 TirePressure;

EXTERN int asn1PE_TirePressure (OSCTXT* pctxt, TirePressure value);

EXTERN int asn1PD_TirePressure (OSCTXT* pctxt, TirePressure* pvalue);

EXTERN void asn1Print_TirePressure (const char* name, const TirePressure* pvalue);

EXTERN int asn1PrtToStrm_TirePressure (OSCTXT *pctxt, 
   const char* name, const TirePressure* pvalue);

/**************************************************************/
/*                                                            */
/*  TireTemp                                                  */
/*                                                            */
/**************************************************************/
/*
TireTemp ::= INTEGER (-8736..55519)
*/
typedef OSINT32 TireTemp;

EXTERN int asn1PE_TireTemp (OSCTXT* pctxt, TireTemp value);

EXTERN int asn1PD_TireTemp (OSCTXT* pctxt, TireTemp* pvalue);

EXTERN void asn1Print_TireTemp (const char* name, const TireTemp* pvalue);

EXTERN int asn1PrtToStrm_TireTemp (OSCTXT *pctxt, 
   const char* name, const TireTemp* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerWeight                                             */
/*                                                            */
/**************************************************************/
/*
TrailerWeight ::= INTEGER (0..64255)
*/
typedef OSUINT16 TrailerWeight;

EXTERN int asn1PE_TrailerWeight (OSCTXT* pctxt, TrailerWeight value);

EXTERN int asn1PD_TrailerWeight (OSCTXT* pctxt, TrailerWeight* pvalue);

EXTERN void asn1Print_TrailerWeight (const char* name, const TrailerWeight* pvalue);

EXTERN int asn1PrtToStrm_TrailerWeight (OSCTXT *pctxt, 
   const char* name, const TrailerWeight* pvalue);

/**************************************************************/
/*                                                            */
/*  WheelEndElectFault                                        */
/*                                                            */
/**************************************************************/
/*
WheelEndElectFault ::= ENUMERATED { isOk(0), isNotDefined(1), isError(2), isNotSupported(3) }
*/
typedef enum {
   isOk = 0,
   isNotDefined = 1,
   isError = 2,
   isNotSupported = 3
} WheelEndElectFault_Root;

typedef OSUINT32 WheelEndElectFault;

EXTERN int asn1PE_WheelEndElectFault (OSCTXT* pctxt, WheelEndElectFault value);

EXTERN int asn1PD_WheelEndElectFault (OSCTXT* pctxt, WheelEndElectFault* pvalue);

EXTERN void asn1Print_WheelEndElectFault 
   (const char* name, const WheelEndElectFault* pvalue);

EXTERN int asn1PrtToStrm_WheelEndElectFault (OSCTXT *pctxt, 
   const char* name, const WheelEndElectFault* pvalue);

EXTERN const OSUTF8CHAR* WheelEndElectFault_ToString (OSINT32 value);

EXTERN int WheelEndElectFault_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, WheelEndElectFault* pvalue);

EXTERN int WheelEndElectFault_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, WheelEndElectFault* pvalue);

/**************************************************************/
/*                                                            */
/*  WheelSensorStatus                                         */
/*                                                            */
/**************************************************************/
/*
WheelSensorStatus ::= ENUMERATED { off(0), on(1), notDefined(2), notSupported(3) }
*/
typedef enum {
   off_3 = 0,
   on_3 = 1,
   notDefined = 2,
   notSupported = 3
} WheelSensorStatus_Root;

typedef OSUINT32 WheelSensorStatus;

EXTERN int asn1PE_WheelSensorStatus (OSCTXT* pctxt, WheelSensorStatus value);

EXTERN int asn1PD_WheelSensorStatus (OSCTXT* pctxt, WheelSensorStatus* pvalue);

EXTERN void asn1Print_WheelSensorStatus 
   (const char* name, const WheelSensorStatus* pvalue);

EXTERN int asn1PrtToStrm_WheelSensorStatus (OSCTXT *pctxt, 
   const char* name, const WheelSensorStatus* pvalue);

EXTERN const OSUTF8CHAR* WheelSensorStatus_ToString (OSINT32 value);

EXTERN int WheelSensorStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, WheelSensorStatus* pvalue);

EXTERN int WheelSensorStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, WheelSensorStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Barrier                                    */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Barrier ::= BIT STRING  { median-RevocableLane(0), median(1), whiteLineHashing(2), stripedLines(3), doubleStripedLines(4), trafficCones(5), constructionBarrier(6), trafficChannels(7), lowCurbs(8), highCurbs(9) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_Barrier_median_RevocableLane            0
#define LaneAttributes_Barrier_median                          1
#define LaneAttributes_Barrier_whiteLineHashing                2
#define LaneAttributes_Barrier_stripedLines                    3
#define LaneAttributes_Barrier_doubleStripedLines              4
#define LaneAttributes_Barrier_trafficCones                    5
#define LaneAttributes_Barrier_constructionBarrier             6
#define LaneAttributes_Barrier_trafficChannels                 7
#define LaneAttributes_Barrier_lowCurbs                        8
#define LaneAttributes_Barrier_highCurbs                       9

typedef struct LaneAttributes_Barrier {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_Barrier;

EXTERN int asn1PE_LaneAttributes_Barrier (OSCTXT* pctxt, LaneAttributes_Barrier* pvalue);

EXTERN int asn1PD_LaneAttributes_Barrier (OSCTXT* pctxt, LaneAttributes_Barrier* pvalue);

EXTERN void asn1Print_LaneAttributes_Barrier 
   (const char* name, const LaneAttributes_Barrier* pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Barrier (OSCTXT *pctxt, 
   const char* name, const LaneAttributes_Barrier* pvalue);

EXTERN int asn1Init_LaneAttributes_Barrier (LaneAttributes_Barrier* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Bike                                       */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Bike ::= BIT STRING  { bikeRevocableLane(0), pedestrianUseAllowed(1), isBikeFlyOverLane(2), fixedCycleTime(3), biDirectionalCycleTimes(4), isolatedByBarrier(5), unsignalizedSegmentsPresent(6) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_Bike_bikeRevocableLane               0
#define LaneAttributes_Bike_pedestrianUseAllowed            1
#define LaneAttributes_Bike_isBikeFlyOverLane               2
#define LaneAttributes_Bike_fixedCycleTime                  3
#define LaneAttributes_Bike_biDirectionalCycleTimes         4
#define LaneAttributes_Bike_isolatedByBarrier               5
#define LaneAttributes_Bike_unsignalizedSegmentsPresent     6

typedef struct LaneAttributes_Bike {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_Bike;

EXTERN int asn1PE_LaneAttributes_Bike (OSCTXT* pctxt, LaneAttributes_Bike* pvalue);

EXTERN int asn1PD_LaneAttributes_Bike (OSCTXT* pctxt, LaneAttributes_Bike* pvalue);

EXTERN void asn1Print_LaneAttributes_Bike 
   (const char* name, const LaneAttributes_Bike* pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Bike (OSCTXT *pctxt, 
   const char* name, const LaneAttributes_Bike* pvalue);

EXTERN int asn1Init_LaneAttributes_Bike (LaneAttributes_Bike* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Crosswalk                                  */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Crosswalk ::= BIT STRING  { crosswalkRevocableLane(0), bicyleUseAllowed(1), isXwalkFlyOverLane(2), fixedCycleTime(3), biDirectionalCycleTimes(4), hasPushToWalkButton(5), audioSupport(6), rfSignalRequestPresent(7), unsignalizedSegmentsPresent(8) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_Crosswalk_crosswalkRevocableLane          0
#define LaneAttributes_Crosswalk_bicyleUseAllowed                1
#define LaneAttributes_Crosswalk_isXwalkFlyOverLane              2
#define LaneAttributes_Crosswalk_fixedCycleTime_1                3
#define LaneAttributes_Crosswalk_biDirectionalCycleTimes_1       4
#define LaneAttributes_Crosswalk_hasPushToWalkButton             5
#define LaneAttributes_Crosswalk_audioSupport                    6
#define LaneAttributes_Crosswalk_rfSignalRequestPresent          7
#define LaneAttributes_Crosswalk_unsignalizedSegmentsPresent_1   8

typedef struct LaneAttributes_Crosswalk {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_Crosswalk;

EXTERN int asn1PE_LaneAttributes_Crosswalk (OSCTXT* pctxt, LaneAttributes_Crosswalk* pvalue);

EXTERN int asn1PD_LaneAttributes_Crosswalk (OSCTXT* pctxt, LaneAttributes_Crosswalk* pvalue);

EXTERN void asn1Print_LaneAttributes_Crosswalk 
   (const char* name, const LaneAttributes_Crosswalk* pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Crosswalk (OSCTXT *pctxt, 
   const char* name, const LaneAttributes_Crosswalk* pvalue);

EXTERN int asn1Init_LaneAttributes_Crosswalk (LaneAttributes_Crosswalk* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Parking                                    */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Parking ::= BIT STRING  { parkingRevocableLane(0), parallelParkingInUse(1), headInParkingInUse(2), doNotParkZone(3), parkingForBusUse(4), parkingForTaxiUse(5), noPublicParkingUse(6) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_Parking_parkingRevocableLane            0
#define LaneAttributes_Parking_parallelParkingInUse            1
#define LaneAttributes_Parking_headInParkingInUse              2
#define LaneAttributes_Parking_doNotParkZone                   3
#define LaneAttributes_Parking_parkingForBusUse                4
#define LaneAttributes_Parking_parkingForTaxiUse               5
#define LaneAttributes_Parking_noPublicParkingUse              6

typedef struct LaneAttributes_Parking {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_Parking;

EXTERN int asn1PE_LaneAttributes_Parking (OSCTXT* pctxt, LaneAttributes_Parking* pvalue);

EXTERN int asn1PD_LaneAttributes_Parking (OSCTXT* pctxt, LaneAttributes_Parking* pvalue);

EXTERN void asn1Print_LaneAttributes_Parking 
   (const char* name, const LaneAttributes_Parking* pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Parking (OSCTXT *pctxt, 
   const char* name, const LaneAttributes_Parking* pvalue);

EXTERN int asn1Init_LaneAttributes_Parking (LaneAttributes_Parking* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Sidewalk                                   */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Sidewalk ::= BIT STRING  { sidewalk-RevocableLane(0), bicyleUseAllowed(1), isSidewalkFlyOverLane(2), walkBikes(3) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_Sidewalk_sidewalk_RevocableLane          0
#define LaneAttributes_Sidewalk_bicyleUseAllowed_1              1
#define LaneAttributes_Sidewalk_isSidewalkFlyOverLane           2
#define LaneAttributes_Sidewalk_walkBikes                       3

typedef struct LaneAttributes_Sidewalk {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_Sidewalk;

EXTERN int asn1PE_LaneAttributes_Sidewalk (OSCTXT* pctxt, LaneAttributes_Sidewalk* pvalue);

EXTERN int asn1PD_LaneAttributes_Sidewalk (OSCTXT* pctxt, LaneAttributes_Sidewalk* pvalue);

EXTERN void asn1Print_LaneAttributes_Sidewalk 
   (const char* name, const LaneAttributes_Sidewalk* pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Sidewalk (OSCTXT *pctxt, 
   const char* name, const LaneAttributes_Sidewalk* pvalue);

EXTERN int asn1Init_LaneAttributes_Sidewalk (LaneAttributes_Sidewalk* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Striping                                   */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Striping ::= BIT STRING  { stripeToConnectingLanesRevocableLane(0), stripeDrawOnLeft(1), stripeDrawOnRight(2), stripeToConnectingLanesLeft(3), stripeToConnectingLanesRight(4), stripeToConnectingLanesAhead(5) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_Striping_stripeToConnectingLanesRevocableLane 0
#define LaneAttributes_Striping_stripeDrawOnLeft                1
#define LaneAttributes_Striping_stripeDrawOnRight               2
#define LaneAttributes_Striping_stripeToConnectingLanesLeft     3
#define LaneAttributes_Striping_stripeToConnectingLanesRight    4
#define LaneAttributes_Striping_stripeToConnectingLanesAhead    5

typedef struct LaneAttributes_Striping {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_Striping;

EXTERN int asn1PE_LaneAttributes_Striping (OSCTXT* pctxt, LaneAttributes_Striping* pvalue);

EXTERN int asn1PD_LaneAttributes_Striping (OSCTXT* pctxt, LaneAttributes_Striping* pvalue);

EXTERN void asn1Print_LaneAttributes_Striping 
   (const char* name, const LaneAttributes_Striping* pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Striping (OSCTXT *pctxt, 
   const char* name, const LaneAttributes_Striping* pvalue);

EXTERN int asn1Init_LaneAttributes_Striping (LaneAttributes_Striping* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_TrackedVehicle                             */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-TrackedVehicle ::= BIT STRING  { spec-RevocableLane(0), spec-commuterRailRoadTrack(1), spec-lightRailRoadTrack(2), spec-heavyRailRoadTrack(3), spec-otherRailType(4) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_TrackedVehicle_spec_RevocableLane              0
#define LaneAttributes_TrackedVehicle_spec_commuterRailRoadTrack      1
#define LaneAttributes_TrackedVehicle_spec_lightRailRoadTrack         2
#define LaneAttributes_TrackedVehicle_spec_heavyRailRoadTrack         3
#define LaneAttributes_TrackedVehicle_spec_otherRailType              4

typedef struct LaneAttributes_TrackedVehicle {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_TrackedVehicle;

EXTERN int asn1PE_LaneAttributes_TrackedVehicle (OSCTXT* pctxt, LaneAttributes_TrackedVehicle* pvalue);

EXTERN int asn1PD_LaneAttributes_TrackedVehicle (OSCTXT* pctxt, LaneAttributes_TrackedVehicle* pvalue);

EXTERN void asn1Print_LaneAttributes_TrackedVehicle 
   (const char* name, const LaneAttributes_TrackedVehicle* pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_TrackedVehicle (OSCTXT *pctxt, 
   const char* name, const LaneAttributes_TrackedVehicle* pvalue);

EXTERN int asn1Init_LaneAttributes_TrackedVehicle (
   LaneAttributes_TrackedVehicle* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Vehicle                                    */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Vehicle ::= BIT STRING  { isVehicleRevocableLane(0), isVehicleFlyOverLane(1), hovLaneUseOnly(2), restrictedToBusUse(3), restrictedToTaxiUse(4), restrictedFromPublicUse(5), hasIRbeaconCoverage(6), permissionOnRequest(7) } (SIZE (8, ...))
*/
/* Named bit constants */

#define LaneAttributes_Vehicle_isVehicleRevocableLane          0
#define LaneAttributes_Vehicle_isVehicleFlyOverLane            1
#define LaneAttributes_Vehicle_hovLaneUseOnly                  2
#define LaneAttributes_Vehicle_restrictedToBusUse              3
#define LaneAttributes_Vehicle_restrictedToTaxiUse             4
#define LaneAttributes_Vehicle_restrictedFromPublicUse         5
#define LaneAttributes_Vehicle_hasIRbeaconCoverage             6
#define LaneAttributes_Vehicle_permissionOnRequest             7

typedef struct LaneAttributes_Vehicle {
   OSUINT32 numbits;
   OSOCTET data[1];
   OSOCTET* extdata;
} LaneAttributes_Vehicle;

EXTERN int asn1PE_LaneAttributes_Vehicle (OSCTXT* pctxt, LaneAttributes_Vehicle* pvalue);

EXTERN int asn1PD_LaneAttributes_Vehicle (OSCTXT* pctxt, LaneAttributes_Vehicle* pvalue);

EXTERN void asn1Print_LaneAttributes_Vehicle 
   (const char* name, const LaneAttributes_Vehicle* pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes_Vehicle (OSCTXT *pctxt, 
   const char* name, const LaneAttributes_Vehicle* pvalue);

EXTERN int asn1Init_LaneAttributes_Vehicle (LaneAttributes_Vehicle* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneConnectionID                                          */
/*                                                            */
/**************************************************************/
/*
LaneConnectionID ::= INTEGER (0..255)
*/
typedef OSUINT8 LaneConnectionID;

EXTERN int asn1PE_LaneConnectionID (OSCTXT* pctxt, LaneConnectionID value);

EXTERN int asn1PD_LaneConnectionID (OSCTXT* pctxt, LaneConnectionID* pvalue);

EXTERN void asn1Print_LaneConnectionID 
   (const char* name, const LaneConnectionID* pvalue);

EXTERN int asn1PrtToStrm_LaneConnectionID (OSCTXT *pctxt, 
   const char* name, const LaneConnectionID* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneDirection                                             */
/*                                                            */
/**************************************************************/
/*
LaneDirection ::= BIT STRING  { ingressPath(0), egressPath(1) } (SIZE (2))
*/
/* Named bit constants */

#define LaneDirection_ingressPath                     0
#define LaneDirection_egressPath                      1

typedef struct LaneDirection {
   OSUINT32 numbits;
   OSOCTET data[1];
} LaneDirection;

EXTERN int asn1PE_LaneDirection (OSCTXT* pctxt, LaneDirection* pvalue);

EXTERN int asn1PD_LaneDirection (OSCTXT* pctxt, LaneDirection* pvalue);

EXTERN void asn1Print_LaneDirection (const char* name, const LaneDirection* pvalue);

EXTERN int asn1PrtToStrm_LaneDirection (OSCTXT *pctxt, 
   const char* name, const LaneDirection* pvalue);

EXTERN int asn1Init_LaneDirection (LaneDirection* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneID                                                    */
/*                                                            */
/**************************************************************/
/*
LaneID ::= INTEGER (0..255)
    the value 0 shall be used when the lane ID is
    not available or not known
    the value 255 is reserved for future use

*/
typedef OSUINT8 LaneID;

EXTERN int asn1PE_LaneID (OSCTXT* pctxt, LaneID value);

EXTERN int asn1PD_LaneID (OSCTXT* pctxt, LaneID* pvalue);

EXTERN void asn1Print_LaneID (const char* name, const LaneID* pvalue);

EXTERN int asn1PrtToStrm_LaneID (OSCTXT *pctxt, 
   const char* name, const LaneID* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneSharing                                               */
/*                                                            */
/**************************************************************/
/*
LaneSharing ::= BIT STRING  { overlappingLaneDescriptionProvided(0), multipleLanesTreatedAsOneLane(1), otherNonMotorizedTrafficTypes(2), individualMotorizedVehicleTraffic(3), busVehicleTraffic(4), taxiVehicleTraffic(5), pedestriansTraffic(6), cyclistVehicleTraffic(7), trackedVehicleTraffic(8), pedestrianTraffic(9) } (SIZE (10))
     All zeros would indicate 'not shared' and 'not overlapping'

*/
/* Named bit constants */

#define LaneSharing_overlappingLaneDescriptionProvided 0
#define LaneSharing_multipleLanesTreatedAsOneLane   1
#define LaneSharing_otherNonMotorizedTrafficTypes   2
#define LaneSharing_individualMotorizedVehicleTraffic 3
#define LaneSharing_busVehicleTraffic               4
#define LaneSharing_taxiVehicleTraffic              5
#define LaneSharing_pedestriansTraffic              6
#define LaneSharing_cyclistVehicleTraffic           7
#define LaneSharing_trackedVehicleTraffic           8
#define LaneSharing_pedestrianTraffic               9

typedef struct LaneSharing {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneSharing;

EXTERN int asn1PE_LaneSharing (OSCTXT* pctxt, LaneSharing* pvalue);

EXTERN int asn1PD_LaneSharing (OSCTXT* pctxt, LaneSharing* pvalue);

EXTERN void asn1Print_LaneSharing (const char* name, const LaneSharing* pvalue);

EXTERN int asn1PrtToStrm_LaneSharing (OSCTXT *pctxt, 
   const char* name, const LaneSharing* pvalue);

EXTERN int asn1Init_LaneSharing (LaneSharing* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneWidth                                                 */
/*                                                            */
/**************************************************************/
/*
LaneWidth ::= INTEGER (0..32767)
                                  units of 1 cm

*/
typedef OSUINT16 LaneWidth;

EXTERN int asn1PE_LaneWidth (OSCTXT* pctxt, LaneWidth value);

EXTERN int asn1PD_LaneWidth (OSCTXT* pctxt, LaneWidth* pvalue);

EXTERN void asn1Print_LaneWidth (const char* name, const LaneWidth* pvalue);

EXTERN int asn1PrtToStrm_LaneWidth (OSCTXT *pctxt, 
   const char* name, const LaneWidth* pvalue);

/**************************************************************/
/*                                                            */
/*  Latitude                                                  */
/*                                                            */
/**************************************************************/
/*
Latitude ::= INTEGER (-900000000..900000001)
    LSB = 1/10 micro degree
    Providing a range of plus-minus 90 degrees

*/
typedef OSINT32 Latitude;

EXTERN int asn1PE_Latitude (OSCTXT* pctxt, Latitude value);

EXTERN int asn1PD_Latitude (OSCTXT* pctxt, Latitude* pvalue);

EXTERN void asn1Print_Latitude (const char* name, const Latitude* pvalue);

EXTERN int asn1PrtToStrm_Latitude (OSCTXT *pctxt, 
   const char* name, const Latitude* pvalue);

/**************************************************************/
/*                                                            */
/*  LayerID                                                   */
/*                                                            */
/**************************************************************/
/*
LayerID ::= INTEGER (0..100)
*/
typedef OSUINT8 LayerID;

EXTERN int asn1PE_LayerID (OSCTXT* pctxt, LayerID value);

EXTERN int asn1PD_LayerID (OSCTXT* pctxt, LayerID* pvalue);

EXTERN void asn1Print_LayerID (const char* name, const LayerID* pvalue);

EXTERN int asn1PrtToStrm_LayerID (OSCTXT *pctxt, 
   const char* name, const LayerID* pvalue);

/**************************************************************/
/*                                                            */
/*  LayerType                                                 */
/*                                                            */
/**************************************************************/
/*
LayerType ::= ENUMERATED { none(0), mixedContent(1), generalMapData(2), intersectionData(3), curveData(4), roadwaySectionData(5), parkingAreaData(6), sharedLaneData(7), ... }
*/
typedef enum {
   none_1 = 0,
   mixedContent = 1,
   generalMapData = 2,
   intersectionData = 3,
   curveData = 4,
   roadwaySectionData = 5,
   parkingAreaData = 6,
   sharedLaneData = 7
} LayerType_Root;

typedef OSUINT32 LayerType;

EXTERN int asn1PE_LayerType (OSCTXT* pctxt, LayerType value);

EXTERN int asn1PD_LayerType (OSCTXT* pctxt, LayerType* pvalue);

EXTERN void asn1Print_LayerType (const char* name, const LayerType* pvalue);

EXTERN int asn1PrtToStrm_LayerType (OSCTXT *pctxt, 
   const char* name, const LayerType* pvalue);

EXTERN const OSUTF8CHAR* LayerType_ToString (OSINT32 value);

EXTERN int LayerType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, LayerType* pvalue);

EXTERN int LayerType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, LayerType* pvalue);

/**************************************************************/
/*                                                            */
/*  LightbarInUse                                             */
/*                                                            */
/**************************************************************/
/*
LightbarInUse ::= ENUMERATED { unavailable(0), notInUse(1), inUse(2), yellowCautionLights(3), schooldBusLights(4), arrowSignsActive(5), slowMovingVehicle(6), freqStops(7) }
*/
typedef enum {
   unavailable_11 = 0,
   notInUse = 1,
   inUse = 2,
   yellowCautionLights = 3,
   schooldBusLights = 4,
   arrowSignsActive = 5,
   slowMovingVehicle = 6,
   freqStops = 7
} LightbarInUse_Root;

typedef OSUINT32 LightbarInUse;

EXTERN int asn1PE_LightbarInUse (OSCTXT* pctxt, LightbarInUse value);

EXTERN int asn1PD_LightbarInUse (OSCTXT* pctxt, LightbarInUse* pvalue);

EXTERN void asn1Print_LightbarInUse (const char* name, const LightbarInUse* pvalue);

EXTERN int asn1PrtToStrm_LightbarInUse (OSCTXT *pctxt, 
   const char* name, const LightbarInUse* pvalue);

EXTERN const OSUTF8CHAR* LightbarInUse_ToString (OSINT32 value);

EXTERN int LightbarInUse_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, LightbarInUse* pvalue);

EXTERN int LightbarInUse_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, LightbarInUse* pvalue);

/**************************************************************/
/*                                                            */
/*  Longitude                                                 */
/*                                                            */
/**************************************************************/
/*
Longitude ::= INTEGER (-1799999999..1800000001)
    LSB = 1/10 micro degree
    Providing a range of plus-minus 180 degrees

*/
typedef OSINT32 Longitude;

EXTERN int asn1PE_Longitude (OSCTXT* pctxt, Longitude value);

EXTERN int asn1PD_Longitude (OSCTXT* pctxt, Longitude* pvalue);

EXTERN void asn1Print_Longitude (const char* name, const Longitude* pvalue);

EXTERN int asn1PrtToStrm_Longitude (OSCTXT *pctxt, 
   const char* name, const Longitude* pvalue);

/**************************************************************/
/*                                                            */
/*  Location_quality                                          */
/*                                                            */
/**************************************************************/
/*
Location-quality ::= ENUMERATED { loc-qual-bt1m(0), loc-qual-bt5m(1), loc-qual-bt12m(2), loc-qual-bt50m(3), loc-qual-bt125m(4), loc-qual-bt500m(5), loc-qual-bt1250m(6), loc-qual-unknown(7) }
        3 bits, appends with loc-tech to make one octet (0..7)

*/
typedef enum {
   loc_qual_bt1m = 0,
   loc_qual_bt5m = 1,
   loc_qual_bt12m = 2,
   loc_qual_bt50m = 3,
   loc_qual_bt125m = 4,
   loc_qual_bt500m = 5,
   loc_qual_bt1250m = 6,
   loc_qual_unknown = 7
} Location_quality_Root;

typedef OSUINT32 Location_quality;

EXTERN int asn1PE_Location_quality (OSCTXT* pctxt, Location_quality value);

EXTERN int asn1PD_Location_quality (OSCTXT* pctxt, Location_quality* pvalue);

EXTERN void asn1Print_Location_quality 
   (const char* name, const Location_quality* pvalue);

EXTERN int asn1PrtToStrm_Location_quality (OSCTXT *pctxt, 
   const char* name, const Location_quality* pvalue);

EXTERN const OSUTF8CHAR* Location_quality_ToString (OSINT32 value);

EXTERN int Location_quality_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, Location_quality* pvalue);

EXTERN int Location_quality_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, Location_quality* pvalue);

/**************************************************************/
/*                                                            */
/*  Location_tech                                             */
/*                                                            */
/**************************************************************/
/*
Location-tech ::= ENUMERATED { loc-tech-unknown(0), loc-tech-GNSS(1), loc-tech-DGPS(2), loc-tech-RTK(3), loc-tech-PPP(4), loc-tech-drGPS(5), loc-tech-drDGPS(6), loc-tech-dr(7), loc-tech-nav(8), loc-tech-fault(9), ... }
*/
typedef enum {
   loc_tech_unknown = 0,
   loc_tech_GNSS = 1,
   loc_tech_DGPS = 2,
   loc_tech_RTK = 3,
   loc_tech_PPP = 4,
   loc_tech_drGPS = 5,
   loc_tech_drDGPS = 6,
   loc_tech_dr = 7,
   loc_tech_nav = 8,
   loc_tech_fault = 9
} Location_tech_Root;

typedef OSUINT32 Location_tech;

EXTERN int asn1PE_Location_tech (OSCTXT* pctxt, Location_tech value);

EXTERN int asn1PD_Location_tech (OSCTXT* pctxt, Location_tech* pvalue);

EXTERN void asn1Print_Location_tech (const char* name, const Location_tech* pvalue);

EXTERN int asn1PrtToStrm_Location_tech (OSCTXT *pctxt, 
   const char* name, const Location_tech* pvalue);

EXTERN const OSUTF8CHAR* Location_tech_ToString (OSINT32 value);

EXTERN int Location_tech_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, Location_tech* pvalue);

EXTERN int Location_tech_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, Location_tech* pvalue);

/**************************************************************/
/*                                                            */
/*  MergeDivergeNodeAngle                                     */
/*                                                            */
/**************************************************************/
/*
MergeDivergeNodeAngle ::= INTEGER (-180..180)
    In units of 1.5 degrees from north
    the value -180 shall be used to represent 
    data is not available or unknown

*/
typedef OSINT16 MergeDivergeNodeAngle;

EXTERN int asn1PE_MergeDivergeNodeAngle (OSCTXT* pctxt, MergeDivergeNodeAngle value);

EXTERN int asn1PD_MergeDivergeNodeAngle (OSCTXT* pctxt, MergeDivergeNodeAngle* pvalue);

EXTERN void asn1Print_MergeDivergeNodeAngle 
   (const char* name, const MergeDivergeNodeAngle* pvalue);

EXTERN int asn1PrtToStrm_MergeDivergeNodeAngle (OSCTXT *pctxt, 
   const char* name, const MergeDivergeNodeAngle* pvalue);

/**************************************************************/
/*                                                            */
/*  MessageBLOB                                               */
/*                                                            */
/**************************************************************/
/*
MessageBLOB ::= OCTET STRING (SIZE (10..2000))
     Final size range may be further 
     limited by the transport layer used

*/
typedef struct EXTERN MessageBLOB {
   OSUINT32 numocts;
   OSOCTET data[2000];
} MessageBLOB;

EXTERN int asn1PE_MessageBLOB (OSCTXT* pctxt, MessageBLOB* pvalue);

EXTERN int asn1PD_MessageBLOB (OSCTXT* pctxt, MessageBLOB* pvalue);

EXTERN void asn1Print_MessageBLOB (const char* name, const MessageBLOB* pvalue);

EXTERN int asn1PrtToStrm_MessageBLOB (OSCTXT *pctxt, 
   const char* name, const MessageBLOB* pvalue);

EXTERN int asn1Init_MessageBLOB (MessageBLOB* pvalue);

/**************************************************************/
/*                                                            */
/*  MinuteOfTheYear                                           */
/*                                                            */
/**************************************************************/
/*
MinuteOfTheYear ::= INTEGER (0..527040)
    the value 527040 shall be used for invalid

*/
typedef OSUINT32 MinuteOfTheYear;

EXTERN int asn1PE_MinuteOfTheYear (OSCTXT* pctxt, MinuteOfTheYear value);

EXTERN int asn1PD_MinuteOfTheYear (OSCTXT* pctxt, MinuteOfTheYear* pvalue);

EXTERN void asn1Print_MinuteOfTheYear 
   (const char* name, const MinuteOfTheYear* pvalue);

EXTERN int asn1PrtToStrm_MinuteOfTheYear (OSCTXT *pctxt, 
   const char* name, const MinuteOfTheYear* pvalue);

/**************************************************************/
/*                                                            */
/*  MinutesDuration                                           */
/*                                                            */
/**************************************************************/
/*
MinutesDuration ::= INTEGER (0..32000)
                                        units of minutes

*/
typedef OSUINT16 MinutesDuration;

EXTERN int asn1PE_MinutesDuration (OSCTXT* pctxt, MinutesDuration value);

EXTERN int asn1PD_MinutesDuration (OSCTXT* pctxt, MinutesDuration* pvalue);

EXTERN void asn1Print_MinutesDuration 
   (const char* name, const MinutesDuration* pvalue);

EXTERN int asn1PrtToStrm_MinutesDuration (OSCTXT *pctxt, 
   const char* name, const MinutesDuration* pvalue);

/**************************************************************/
/*                                                            */
/*  MotorizedPropelledType                                    */
/*                                                            */
/**************************************************************/
/*
MotorizedPropelledType ::= ENUMERATED { unavailable(0), otherTypes(1), wheelChair(2), bicycle(3), scooter(4), selfBalancingDevice(5), ... }
*/
typedef enum {
   unavailable_12 = 0,
   otherTypes_1 = 1,
   wheelChair = 2,
   bicycle = 3,
   scooter = 4,
   selfBalancingDevice = 5
} MotorizedPropelledType_Root;

typedef OSUINT32 MotorizedPropelledType;

EXTERN int asn1PE_MotorizedPropelledType (OSCTXT* pctxt, MotorizedPropelledType value);

EXTERN int asn1PD_MotorizedPropelledType (OSCTXT* pctxt, MotorizedPropelledType* pvalue);

EXTERN void asn1Print_MotorizedPropelledType 
   (const char* name, const MotorizedPropelledType* pvalue);

EXTERN int asn1PrtToStrm_MotorizedPropelledType (OSCTXT *pctxt, 
   const char* name, const MotorizedPropelledType* pvalue);

EXTERN const OSUTF8CHAR* MotorizedPropelledType_ToString (OSINT32 value);

EXTERN int MotorizedPropelledType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, MotorizedPropelledType* pvalue);

EXTERN int MotorizedPropelledType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, MotorizedPropelledType* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementPhaseState                                        */
/*                                                            */
/**************************************************************/
/*
MovementPhaseState ::= ENUMERATED { unavailable(0), dark(1), stop-Then-Proceed(2), stop-And-Remain(3), pre-Movement(4), permissive-Movement-Allowed(5), protected-Movement-Allowed(6), permissive-clearance(7), protected-clearance(8), caution-Conflicting-Traffic(9) }
     The above number assignments are not used with UPER encoding
     and are only to be used with DER or implicit encoding

*/
typedef enum {
   unavailable_13 = 0,
   dark = 1,
   stop_Then_Proceed = 2,
   stop_And_Remain = 3,
   pre_Movement = 4,
   permissive_Movement_Allowed = 5,
   protected_Movement_Allowed = 6,
   permissive_clearance = 7,
   protected_clearance = 8,
   caution_Conflicting_Traffic = 9
} MovementPhaseState_Root;

typedef OSUINT32 MovementPhaseState;

EXTERN int asn1PE_MovementPhaseState (OSCTXT* pctxt, MovementPhaseState value);

EXTERN int asn1PD_MovementPhaseState (OSCTXT* pctxt, MovementPhaseState* pvalue);

EXTERN void asn1Print_MovementPhaseState 
   (const char* name, const MovementPhaseState* pvalue);

EXTERN int asn1PrtToStrm_MovementPhaseState (OSCTXT *pctxt, 
   const char* name, const MovementPhaseState* pvalue);

EXTERN const OSUTF8CHAR* MovementPhaseState_ToString (OSINT32 value);

EXTERN int MovementPhaseState_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, MovementPhaseState* pvalue);

EXTERN int MovementPhaseState_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, MovementPhaseState* pvalue);

/**************************************************************/
/*                                                            */
/*  MsgCount                                                  */
/*                                                            */
/**************************************************************/
/*
MsgCount ::= INTEGER (0..127)
*/
typedef OSUINT8 MsgCount;

EXTERN int asn1PE_MsgCount (OSCTXT* pctxt, MsgCount value);

EXTERN int asn1PD_MsgCount (OSCTXT* pctxt, MsgCount* pvalue);

EXTERN void asn1Print_MsgCount (const char* name, const MsgCount* pvalue);

EXTERN int asn1PrtToStrm_MsgCount (OSCTXT *pctxt, 
   const char* name, const MsgCount* pvalue);

/**************************************************************/
/*                                                            */
/*  MsgCRC                                                    */
/*                                                            */
/**************************************************************/
/*
MsgCRC ::= OCTET STRING (SIZE (2))
                                   created with the CRC-CCITT polynomial

*/
typedef struct EXTERN MsgCRC {
   OSUINT32 numocts;
   OSOCTET data[2];
} MsgCRC;

EXTERN int asn1PE_MsgCRC (OSCTXT* pctxt, MsgCRC* pvalue);

EXTERN int asn1PD_MsgCRC (OSCTXT* pctxt, MsgCRC* pvalue);

EXTERN void asn1Print_MsgCRC (const char* name, const MsgCRC* pvalue);

EXTERN int asn1PrtToStrm_MsgCRC (OSCTXT *pctxt, 
   const char* name, const MsgCRC* pvalue);

EXTERN int asn1Init_MsgCRC (MsgCRC* pvalue);

/**************************************************************/
/*                                                            */
/*  MultiVehicleResponse                                      */
/*                                                            */
/**************************************************************/
/*
MultiVehicleResponse ::= ENUMERATED { unavailable(0), singleVehicle(1), multiVehicle(2), reserved(3) }
*/
typedef enum {
   unavailable_14 = 0,
   singleVehicle = 1,
   multiVehicle = 2,
   reserved_1 = 3
} MultiVehicleResponse_Root;

typedef OSUINT32 MultiVehicleResponse;

EXTERN int asn1PE_MultiVehicleResponse (OSCTXT* pctxt, MultiVehicleResponse value);

EXTERN int asn1PD_MultiVehicleResponse (OSCTXT* pctxt, MultiVehicleResponse* pvalue);

EXTERN void asn1Print_MultiVehicleResponse 
   (const char* name, const MultiVehicleResponse* pvalue);

EXTERN int asn1PrtToStrm_MultiVehicleResponse (OSCTXT *pctxt, 
   const char* name, const MultiVehicleResponse* pvalue);

EXTERN const OSUTF8CHAR* MultiVehicleResponse_ToString (OSINT32 value);

EXTERN int MultiVehicleResponse_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, MultiVehicleResponse* pvalue);

EXTERN int MultiVehicleResponse_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, MultiVehicleResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  MUTCDCode                                                 */
/*                                                            */
/**************************************************************/
/*
MUTCDCode ::= ENUMERATED { none(0), regulatory(1), warning(2), maintenance(3), motoristService(4), guide(5), rec(6), ... }
*/
typedef enum {
   none_2 = 0,
   regulatory = 1,
   warning = 2,
   maintenance = 3,
   motoristService = 4,
   guide = 5,
   rec = 6
} MUTCDCode_Root;

typedef OSUINT32 MUTCDCode;

EXTERN int asn1PE_MUTCDCode (OSCTXT* pctxt, MUTCDCode value);

EXTERN int asn1PD_MUTCDCode (OSCTXT* pctxt, MUTCDCode* pvalue);

EXTERN void asn1Print_MUTCDCode (const char* name, const MUTCDCode* pvalue);

EXTERN int asn1PrtToStrm_MUTCDCode (OSCTXT *pctxt, 
   const char* name, const MUTCDCode* pvalue);

EXTERN const OSUTF8CHAR* MUTCDCode_ToString (OSINT32 value);

EXTERN int MUTCDCode_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, MUTCDCode* pvalue);

EXTERN int MUTCDCode_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, MUTCDCode* pvalue);

/**************************************************************/
/*                                                            */
/*  NMEA_MsgType                                              */
/*                                                            */
/**************************************************************/
/*
NMEA-MsgType ::= INTEGER (0..32767)
*/
typedef OSUINT16 NMEA_MsgType;

EXTERN int asn1PE_NMEA_MsgType (OSCTXT* pctxt, NMEA_MsgType value);

EXTERN int asn1PD_NMEA_MsgType (OSCTXT* pctxt, NMEA_MsgType* pvalue);

EXTERN void asn1Print_NMEA_MsgType (const char* name, const NMEA_MsgType* pvalue);

EXTERN int asn1PrtToStrm_NMEA_MsgType (OSCTXT *pctxt, 
   const char* name, const NMEA_MsgType* pvalue);

/**************************************************************/
/*                                                            */
/*  NMEA_Payload                                              */
/*                                                            */
/**************************************************************/
/*
NMEA-Payload ::= OCTET STRING (SIZE (1..1023))
*/
typedef struct EXTERN NMEA_Payload {
   OSUINT32 numocts;
   OSOCTET data[1023];
} NMEA_Payload;

EXTERN int asn1PE_NMEA_Payload (OSCTXT* pctxt, NMEA_Payload* pvalue);

EXTERN int asn1PD_NMEA_Payload (OSCTXT* pctxt, NMEA_Payload* pvalue);

EXTERN void asn1Print_NMEA_Payload (const char* name, const NMEA_Payload* pvalue);

EXTERN int asn1PrtToStrm_NMEA_Payload (OSCTXT *pctxt, 
   const char* name, const NMEA_Payload* pvalue);

EXTERN int asn1Init_NMEA_Payload (NMEA_Payload* pvalue);

/**************************************************************/
/*                                                            */
/*  NMEA_Revision                                             */
/*                                                            */
/**************************************************************/
/*
NMEA-Revision ::= ENUMERATED { unknown(0), reserved(1), rev1(2), rev2(3), rev3(4), rev4(5), rev5(6), ... }
*/
typedef enum {
   unknown = 0,
   reserved_2 = 1,
   rev1 = 2,
   rev2 = 3,
   rev3 = 4,
   rev4 = 5,
   rev5 = 6
} NMEA_Revision_Root;

typedef OSUINT32 NMEA_Revision;

EXTERN int asn1PE_NMEA_Revision (OSCTXT* pctxt, NMEA_Revision value);

EXTERN int asn1PD_NMEA_Revision (OSCTXT* pctxt, NMEA_Revision* pvalue);

EXTERN void asn1Print_NMEA_Revision (const char* name, const NMEA_Revision* pvalue);

EXTERN int asn1PrtToStrm_NMEA_Revision (OSCTXT *pctxt, 
   const char* name, const NMEA_Revision* pvalue);

EXTERN const OSUTF8CHAR* NMEA_Revision_ToString (OSINT32 value);

EXTERN int NMEA_Revision_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, NMEA_Revision* pvalue);

EXTERN int NMEA_Revision_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, NMEA_Revision* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeLL                                           */
/*                                                            */
/**************************************************************/
/*
NodeAttributeLL ::= ENUMERATED { reserved(0), stopLine(1), roundedCapStyleA(2), roundedCapStyleB(3), mergePoint(4), divergePoint(5), downstreamStopLine(6), downstreamStartNode(7), closedToTraffic(8), safeIsland(9), curbPresentAtStepOff(10), hydrantPresent(11), ... }
*/
typedef enum {
   reserved_3 = 0,
   stopLine = 1,
   roundedCapStyleA = 2,
   roundedCapStyleB = 3,
   mergePoint = 4,
   divergePoint = 5,
   downstreamStopLine = 6,
   downstreamStartNode = 7,
   closedToTraffic = 8,
   safeIsland = 9,
   curbPresentAtStepOff = 10,
   hydrantPresent = 11
} NodeAttributeLL_Root;

typedef OSUINT32 NodeAttributeLL;

EXTERN int asn1PE_NodeAttributeLL (OSCTXT* pctxt, NodeAttributeLL value);

EXTERN int asn1PD_NodeAttributeLL (OSCTXT* pctxt, NodeAttributeLL* pvalue);

EXTERN void asn1Print_NodeAttributeLL 
   (const char* name, const NodeAttributeLL* pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeLL (OSCTXT *pctxt, 
   const char* name, const NodeAttributeLL* pvalue);

EXTERN const OSUTF8CHAR* NodeAttributeLL_ToString (OSINT32 value);

EXTERN int NodeAttributeLL_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, NodeAttributeLL* pvalue);

EXTERN int NodeAttributeLL_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, NodeAttributeLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeXY                                           */
/*                                                            */
/**************************************************************/
/*
NodeAttributeXY ::= ENUMERATED { reserved(0), stopLine(1), roundedCapStyleA(2), roundedCapStyleB(3), mergePoint(4), divergePoint(5), downstreamStopLine(6), downstreamStartNode(7), closedToTraffic(8), safeIsland(9), curbPresentAtStepOff(10), hydrantPresent(11), ... }
*/
typedef enum {
   reserved_4 = 0,
   stopLine_1 = 1,
   roundedCapStyleA_1 = 2,
   roundedCapStyleB_1 = 3,
   mergePoint_1 = 4,
   divergePoint_1 = 5,
   downstreamStopLine_1 = 6,
   downstreamStartNode_1 = 7,
   closedToTraffic_1 = 8,
   safeIsland_1 = 9,
   curbPresentAtStepOff_1 = 10,
   hydrantPresent_1 = 11
} NodeAttributeXY_Root;

typedef OSUINT32 NodeAttributeXY;

EXTERN int asn1PE_NodeAttributeXY (OSCTXT* pctxt, NodeAttributeXY value);

EXTERN int asn1PD_NodeAttributeXY (OSCTXT* pctxt, NodeAttributeXY* pvalue);

EXTERN void asn1Print_NodeAttributeXY 
   (const char* name, const NodeAttributeXY* pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeXY (OSCTXT *pctxt, 
   const char* name, const NodeAttributeXY* pvalue);

EXTERN const OSUTF8CHAR* NodeAttributeXY_ToString (OSINT32 value);

EXTERN int NodeAttributeXY_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, NodeAttributeXY* pvalue);

EXTERN int NodeAttributeXY_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, NodeAttributeXY* pvalue);

/**************************************************************/
/*                                                            */
/*  NumberOfParticipantsInCluster                             */
/*                                                            */
/**************************************************************/
/*
NumberOfParticipantsInCluster ::= ENUMERATED { unavailable(0), small(1), medium(2), large(3), ... }
*/
typedef enum {
   unavailable_15 = 0,
   small_ = 1,
   medium = 2,
   large_ = 3
} NumberOfParticipantsInCluster_Root;

typedef OSUINT32 NumberOfParticipantsInCluster;

EXTERN int asn1PE_NumberOfParticipantsInCluster (OSCTXT* pctxt, NumberOfParticipantsInCluster value);

EXTERN int asn1PD_NumberOfParticipantsInCluster (OSCTXT* pctxt, NumberOfParticipantsInCluster* pvalue);

EXTERN void asn1Print_NumberOfParticipantsInCluster 
   (const char* name, const NumberOfParticipantsInCluster* pvalue);

EXTERN int asn1PrtToStrm_NumberOfParticipantsInCluster (OSCTXT *pctxt, 
   const char* name, const NumberOfParticipantsInCluster* pvalue);

EXTERN const OSUTF8CHAR* NumberOfParticipantsInCluster_ToString (OSINT32 value);

EXTERN int NumberOfParticipantsInCluster_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, NumberOfParticipantsInCluster* pvalue);

EXTERN int NumberOfParticipantsInCluster_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      NumberOfParticipantsInCluster* pvalue);

/**************************************************************/
/*                                                            */
/*  ObjectCount                                               */
/*                                                            */
/**************************************************************/
/*
ObjectCount ::= INTEGER (0..1023)
                                   a count of objects

*/
typedef OSUINT16 ObjectCount;

EXTERN int asn1PE_ObjectCount (OSCTXT* pctxt, ObjectCount value);

EXTERN int asn1PD_ObjectCount (OSCTXT* pctxt, ObjectCount* pvalue);

EXTERN void asn1Print_ObjectCount (const char* name, const ObjectCount* pvalue);

EXTERN int asn1PrtToStrm_ObjectCount (OSCTXT *pctxt, 
   const char* name, const ObjectCount* pvalue);

/**************************************************************/
/*                                                            */
/*  ObstacleDirection                                         */
/*                                                            */
/**************************************************************/
/*
ObstacleDirection ::= Angle
*/
typedef Angle ObstacleDirection;

EXTERN int asn1PE_ObstacleDirection (OSCTXT* pctxt, ObstacleDirection value);

EXTERN int asn1PD_ObstacleDirection (OSCTXT* pctxt, ObstacleDirection* pvalue);

EXTERN void asn1Print_ObstacleDirection 
   (const char* name, const ObstacleDirection* pvalue);

EXTERN int asn1PrtToStrm_ObstacleDirection (OSCTXT *pctxt, 
   const char* name, const ObstacleDirection* pvalue);

/**************************************************************/
/*                                                            */
/*  ObstacleDistance                                          */
/*                                                            */
/**************************************************************/
/*
ObstacleDistance ::= INTEGER (0..32767)
                                         LSB units of meters

*/
typedef OSUINT16 ObstacleDistance;

EXTERN int asn1PE_ObstacleDistance (OSCTXT* pctxt, ObstacleDistance value);

EXTERN int asn1PD_ObstacleDistance (OSCTXT* pctxt, ObstacleDistance* pvalue);

EXTERN void asn1Print_ObstacleDistance 
   (const char* name, const ObstacleDistance* pvalue);

EXTERN int asn1PrtToStrm_ObstacleDistance (OSCTXT *pctxt, 
   const char* name, const ObstacleDistance* pvalue);

/**************************************************************/
/*                                                            */
/*  Offset_B09                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B09 ::= INTEGER (-256..255)
    a range of +- 2.55 meters

*/
typedef OSINT16 Offset_B09;

EXTERN int asn1PE_Offset_B09 (OSCTXT* pctxt, Offset_B09 value);

EXTERN int asn1PD_Offset_B09 (OSCTXT* pctxt, Offset_B09* pvalue);

EXTERN void asn1Print_Offset_B09 (const char* name, const Offset_B09* pvalue);

EXTERN int asn1PrtToStrm_Offset_B09 (OSCTXT *pctxt, 
   const char* name, const Offset_B09* pvalue);

/**************************************************************/
/*                                                            */
/*  Offset_B10                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B10 ::= INTEGER (-512..511)
    a range of +- 5.11 meters

*/
typedef OSINT16 Offset_B10;

EXTERN int asn1PE_Offset_B10 (OSCTXT* pctxt, Offset_B10 value);

EXTERN int asn1PD_Offset_B10 (OSCTXT* pctxt, Offset_B10* pvalue);

EXTERN void asn1Print_Offset_B10 (const char* name, const Offset_B10* pvalue);

EXTERN int asn1PrtToStrm_Offset_B10 (OSCTXT *pctxt, 
   const char* name, const Offset_B10* pvalue);

/**************************************************************/
/*                                                            */
/*  Offset_B11                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B11 ::= INTEGER (-1024..1023)
    a range of +- 10.23 meters

*/
typedef OSINT16 Offset_B11;

EXTERN int asn1PE_Offset_B11 (OSCTXT* pctxt, Offset_B11 value);

EXTERN int asn1PD_Offset_B11 (OSCTXT* pctxt, Offset_B11* pvalue);

EXTERN void asn1Print_Offset_B11 (const char* name, const Offset_B11* pvalue);

EXTERN int asn1PrtToStrm_Offset_B11 (OSCTXT *pctxt, 
   const char* name, const Offset_B11* pvalue);

/**************************************************************/
/*                                                            */
/*  Offset_B12                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B12 ::= INTEGER (-2048..2047)
    a range of +- 20.47 meters

*/
typedef OSINT16 Offset_B12;

EXTERN int asn1PE_Offset_B12 (OSCTXT* pctxt, Offset_B12 value);

EXTERN int asn1PD_Offset_B12 (OSCTXT* pctxt, Offset_B12* pvalue);

EXTERN void asn1Print_Offset_B12 (const char* name, const Offset_B12* pvalue);

EXTERN int asn1PrtToStrm_Offset_B12 (OSCTXT *pctxt, 
   const char* name, const Offset_B12* pvalue);

/**************************************************************/
/*                                                            */
/*  Offset_B13                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B13 ::= INTEGER (-4096..4095)
    a range of +- 40.95 meters

*/
typedef OSINT16 Offset_B13;

EXTERN int asn1PE_Offset_B13 (OSCTXT* pctxt, Offset_B13 value);

EXTERN int asn1PD_Offset_B13 (OSCTXT* pctxt, Offset_B13* pvalue);

EXTERN void asn1Print_Offset_B13 (const char* name, const Offset_B13* pvalue);

EXTERN int asn1PrtToStrm_Offset_B13 (OSCTXT *pctxt, 
   const char* name, const Offset_B13* pvalue);

/**************************************************************/
/*                                                            */
/*  Offset_B14                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B14 ::= INTEGER (-8192..8191)
    a range of +- 81.91 meters

*/
typedef OSINT16 Offset_B14;

EXTERN int asn1PE_Offset_B14 (OSCTXT* pctxt, Offset_B14 value);

EXTERN int asn1PD_Offset_B14 (OSCTXT* pctxt, Offset_B14* pvalue);

EXTERN void asn1Print_Offset_B14 (const char* name, const Offset_B14* pvalue);

EXTERN int asn1PrtToStrm_Offset_B14 (OSCTXT *pctxt, 
   const char* name, const Offset_B14* pvalue);

/**************************************************************/
/*                                                            */
/*  Offset_B16                                                */
/*                                                            */
/**************************************************************/
/*
Offset-B16 ::= INTEGER (-32768..32767)
    a range of +- 327.68 meters

*/
typedef OSINT16 Offset_B16;

EXTERN int asn1PE_Offset_B16 (OSCTXT* pctxt, Offset_B16 value);

EXTERN int asn1PD_Offset_B16 (OSCTXT* pctxt, Offset_B16* pvalue);

EXTERN void asn1Print_Offset_B16 (const char* name, const Offset_B16* pvalue);

EXTERN int asn1PrtToStrm_Offset_B16 (OSCTXT *pctxt, 
   const char* name, const Offset_B16* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B12                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B12 ::= INTEGER (-2048..2047)
    A range of +- 0.0002047 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT16 OffsetLL_B12;

EXTERN int asn1PE_OffsetLL_B12 (OSCTXT* pctxt, OffsetLL_B12 value);

EXTERN int asn1PD_OffsetLL_B12 (OSCTXT* pctxt, OffsetLL_B12* pvalue);

EXTERN void asn1Print_OffsetLL_B12 (const char* name, const OffsetLL_B12* pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B12 (OSCTXT *pctxt, 
   const char* name, const OffsetLL_B12* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B14                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B14 ::= INTEGER (-8192..8191)
    A range of +- 0.0008191 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT16 OffsetLL_B14;

EXTERN int asn1PE_OffsetLL_B14 (OSCTXT* pctxt, OffsetLL_B14 value);

EXTERN int asn1PD_OffsetLL_B14 (OSCTXT* pctxt, OffsetLL_B14* pvalue);

EXTERN void asn1Print_OffsetLL_B14 (const char* name, const OffsetLL_B14* pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B14 (OSCTXT *pctxt, 
   const char* name, const OffsetLL_B14* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B16                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B16 ::= INTEGER (-32768..32767)
    A range of +- 0.0032767 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT16 OffsetLL_B16;

EXTERN int asn1PE_OffsetLL_B16 (OSCTXT* pctxt, OffsetLL_B16 value);

EXTERN int asn1PD_OffsetLL_B16 (OSCTXT* pctxt, OffsetLL_B16* pvalue);

EXTERN void asn1Print_OffsetLL_B16 (const char* name, const OffsetLL_B16* pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B16 (OSCTXT *pctxt, 
   const char* name, const OffsetLL_B16* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B18                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B18 ::= INTEGER (-131072..131071)
    A range of +- 0.0131071 degrees
    The value +131071 shall be used for values >= than +0.0131071 degrees
    The value -131071 shall be used for values <= than -0.0131071 degrees
    The value -131072 shall be used unknown
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT32 OffsetLL_B18;

EXTERN int asn1PE_OffsetLL_B18 (OSCTXT* pctxt, OffsetLL_B18 value);

EXTERN int asn1PD_OffsetLL_B18 (OSCTXT* pctxt, OffsetLL_B18* pvalue);

EXTERN void asn1Print_OffsetLL_B18 (const char* name, const OffsetLL_B18* pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B18 (OSCTXT *pctxt, 
   const char* name, const OffsetLL_B18* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B22                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B22 ::= INTEGER (-2097152..2097151)
    A range of +- 0.2097151 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed) 

*/
typedef OSINT32 OffsetLL_B22;

EXTERN int asn1PE_OffsetLL_B22 (OSCTXT* pctxt, OffsetLL_B22 value);

EXTERN int asn1PD_OffsetLL_B22 (OSCTXT* pctxt, OffsetLL_B22* pvalue);

EXTERN void asn1Print_OffsetLL_B22 (const char* name, const OffsetLL_B22* pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B22 (OSCTXT *pctxt, 
   const char* name, const OffsetLL_B22* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B24                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B24 ::= INTEGER (-8388608..8388607)
    A range of +- 0.8388607 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT32 OffsetLL_B24;

EXTERN int asn1PE_OffsetLL_B24 (OSCTXT* pctxt, OffsetLL_B24 value);

EXTERN int asn1PD_OffsetLL_B24 (OSCTXT* pctxt, OffsetLL_B24* pvalue);

EXTERN void asn1Print_OffsetLL_B24 (const char* name, const OffsetLL_B24* pvalue);

EXTERN int asn1PrtToStrm_OffsetLL_B24 (OSCTXT *pctxt, 
   const char* name, const OffsetLL_B24* pvalue);

/**************************************************************/
/*                                                            */
/*  PayloadData                                               */
/*                                                            */
/**************************************************************/
/*
PayloadData ::= OCTET STRING (SIZE (1..2048))
*/
typedef struct EXTERN PayloadData {
   OSUINT32 numocts;
   OSOCTET data[2048];
} PayloadData;

EXTERN int asn1PE_PayloadData (OSCTXT* pctxt, PayloadData* pvalue);

EXTERN int asn1PD_PayloadData (OSCTXT* pctxt, PayloadData* pvalue);

EXTERN void asn1Print_PayloadData (const char* name, const PayloadData* pvalue);

EXTERN int asn1PrtToStrm_PayloadData (OSCTXT *pctxt, 
   const char* name, const PayloadData* pvalue);

EXTERN int asn1Init_PayloadData (PayloadData* pvalue);

/**************************************************************/
/*                                                            */
/*  PedestrianBicycleDetect                                   */
/*                                                            */
/**************************************************************/
/*
PedestrianBicycleDetect ::= BOOLEAN
                  true if ANY Pedestrians or Bicyclists are 
                  detected crossing the target lane or lanes

*/
typedef OSBOOL PedestrianBicycleDetect;

EXTERN int asn1PE_PedestrianBicycleDetect (OSCTXT* pctxt, PedestrianBicycleDetect value);

EXTERN int asn1PD_PedestrianBicycleDetect (OSCTXT* pctxt, PedestrianBicycleDetect* pvalue);

EXTERN void asn1Print_PedestrianBicycleDetect 
   (const char* name, const PedestrianBicycleDetect* pvalue);

EXTERN int asn1PrtToStrm_PedestrianBicycleDetect (OSCTXT *pctxt, 
   const char* name, const PedestrianBicycleDetect* pvalue);

/**************************************************************/
/*                                                            */
/*  HumanPropelledType                                        */
/*                                                            */
/**************************************************************/
/*
HumanPropelledType ::= ENUMERATED { unavailable(0), otherTypes(1), onFoot(2), skateboard(3), pushOrKickScooter(4), wheelchair(5), ... }
*/
typedef enum {
   unavailable_16 = 0,
   otherTypes_2 = 1,
   onFoot = 2,
   skateboard = 3,
   pushOrKickScooter = 4,
   wheelchair_1 = 5
} HumanPropelledType_Root;

typedef OSUINT32 HumanPropelledType;

EXTERN int asn1PE_HumanPropelledType (OSCTXT* pctxt, HumanPropelledType value);

EXTERN int asn1PD_HumanPropelledType (OSCTXT* pctxt, HumanPropelledType* pvalue);

EXTERN void asn1Print_HumanPropelledType 
   (const char* name, const HumanPropelledType* pvalue);

EXTERN int asn1PrtToStrm_HumanPropelledType (OSCTXT *pctxt, 
   const char* name, const HumanPropelledType* pvalue);

EXTERN const OSUTF8CHAR* HumanPropelledType_ToString (OSINT32 value);

EXTERN int HumanPropelledType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, HumanPropelledType* pvalue);

EXTERN int HumanPropelledType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, HumanPropelledType* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalAssistive                                         */
/*                                                            */
/**************************************************************/
/*
PersonalAssistive ::= BIT STRING  { unavailable(0), otherType(1), vision(2), hearing(3), movement(4), cognition(5) } (SIZE (6, ...))
*/
/* Named bit constants */

#define PersonalAssistive_unavailable_2                   0
#define PersonalAssistive_otherType                       1
#define PersonalAssistive_vision                          2
#define PersonalAssistive_hearing                         3
#define PersonalAssistive_movement                        4
#define PersonalAssistive_cognition                       5

typedef struct PersonalAssistive {
   OSUINT32 numbits;
   OSOCTET data[1];
   OSOCTET* extdata;
} PersonalAssistive;

EXTERN int asn1PE_PersonalAssistive (OSCTXT* pctxt, PersonalAssistive* pvalue);

EXTERN int asn1PD_PersonalAssistive (OSCTXT* pctxt, PersonalAssistive* pvalue);

EXTERN void asn1Print_PersonalAssistive 
   (const char* name, const PersonalAssistive* pvalue);

EXTERN int asn1PrtToStrm_PersonalAssistive (OSCTXT *pctxt, 
   const char* name, const PersonalAssistive* pvalue);

EXTERN int asn1Init_PersonalAssistive (PersonalAssistive* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalClusterRadius                                     */
/*                                                            */
/**************************************************************/
/*
PersonalClusterRadius ::= INTEGER (0..100)
                                            units of meters

*/
typedef OSUINT8 PersonalClusterRadius;

EXTERN int asn1PE_PersonalClusterRadius (OSCTXT* pctxt, PersonalClusterRadius value);

EXTERN int asn1PD_PersonalClusterRadius (OSCTXT* pctxt, PersonalClusterRadius* pvalue);

EXTERN void asn1Print_PersonalClusterRadius 
   (const char* name, const PersonalClusterRadius* pvalue);

EXTERN int asn1PrtToStrm_PersonalClusterRadius (OSCTXT *pctxt, 
   const char* name, const PersonalClusterRadius* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalCrossingInProgress                                */
/*                                                            */
/**************************************************************/
/*
PersonalCrossingInProgress ::= BOOLEAN
                                        Use:
    True  = Yes, is in maneuver
    False = No

*/
typedef OSBOOL PersonalCrossingInProgress;

EXTERN int asn1PE_PersonalCrossingInProgress (OSCTXT* pctxt, PersonalCrossingInProgress value);

EXTERN int asn1PD_PersonalCrossingInProgress (OSCTXT* pctxt, PersonalCrossingInProgress* pvalue);

EXTERN void asn1Print_PersonalCrossingInProgress 
   (const char* name, const PersonalCrossingInProgress* pvalue);

EXTERN int asn1PrtToStrm_PersonalCrossingInProgress (OSCTXT *pctxt, 
   const char* name, const PersonalCrossingInProgress* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalCrossingRequest                                   */
/*                                                            */
/**************************************************************/
/*
PersonalCrossingRequest ::= BOOLEAN
    Use:
    True  = On  (request crossing)
    False = Off (no request)

*/
typedef OSBOOL PersonalCrossingRequest;

EXTERN int asn1PE_PersonalCrossingRequest (OSCTXT* pctxt, PersonalCrossingRequest value);

EXTERN int asn1PD_PersonalCrossingRequest (OSCTXT* pctxt, PersonalCrossingRequest* pvalue);

EXTERN void asn1Print_PersonalCrossingRequest 
   (const char* name, const PersonalCrossingRequest* pvalue);

EXTERN int asn1PrtToStrm_PersonalCrossingRequest (OSCTXT *pctxt, 
   const char* name, const PersonalCrossingRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalDeviceUsageState                                  */
/*                                                            */
/**************************************************************/
/*
PersonalDeviceUsageState ::= BIT STRING  { unavailable(0), other(1), idle(2), listeningToAudio(3), typing(4), calling(5), playingGames(6), reading(7), viewing(8) } (SIZE (9, ...))
    All bits shall be set to zero when unknown state

*/
/* Named bit constants */

#define PersonalDeviceUsageState_unavailable_3                   0
#define PersonalDeviceUsageState_other                           1
#define PersonalDeviceUsageState_idle                            2
#define PersonalDeviceUsageState_listeningToAudio                3
#define PersonalDeviceUsageState_typing                          4
#define PersonalDeviceUsageState_calling                         5
#define PersonalDeviceUsageState_playingGames                    6
#define PersonalDeviceUsageState_reading                         7
#define PersonalDeviceUsageState_viewing                         8

typedef struct PersonalDeviceUsageState {
   OSUINT32 numbits;
   OSOCTET data[2];
   OSOCTET* extdata;
} PersonalDeviceUsageState;

EXTERN int asn1PE_PersonalDeviceUsageState (OSCTXT* pctxt, PersonalDeviceUsageState* pvalue);

EXTERN int asn1PD_PersonalDeviceUsageState (OSCTXT* pctxt, PersonalDeviceUsageState* pvalue);

EXTERN void asn1Print_PersonalDeviceUsageState 
   (const char* name, const PersonalDeviceUsageState* pvalue);

EXTERN int asn1PrtToStrm_PersonalDeviceUsageState (OSCTXT *pctxt, 
   const char* name, const PersonalDeviceUsageState* pvalue);

EXTERN int asn1Init_PersonalDeviceUsageState (PersonalDeviceUsageState* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalDeviceUserType                                    */
/*                                                            */
/**************************************************************/
/*
PersonalDeviceUserType ::= ENUMERATED { unavailable(0), aPEDESTRIAN(1), aPEDALCYCLIST(2), aPUBLICSAFETYWORKER(3), anANIMAL(4), ... }
*/
typedef enum {
   unavailable_17 = 0,
   aPEDESTRIAN = 1,
   aPEDALCYCLIST = 2,
   aPUBLICSAFETYWORKER = 3,
   anANIMAL = 4
} PersonalDeviceUserType_Root;

typedef OSUINT32 PersonalDeviceUserType;

EXTERN int asn1PE_PersonalDeviceUserType (OSCTXT* pctxt, PersonalDeviceUserType value);

EXTERN int asn1PD_PersonalDeviceUserType (OSCTXT* pctxt, PersonalDeviceUserType* pvalue);

EXTERN void asn1Print_PersonalDeviceUserType 
   (const char* name, const PersonalDeviceUserType* pvalue);

EXTERN int asn1PrtToStrm_PersonalDeviceUserType (OSCTXT *pctxt, 
   const char* name, const PersonalDeviceUserType* pvalue);

EXTERN const OSUTF8CHAR* PersonalDeviceUserType_ToString (OSINT32 value);

EXTERN int PersonalDeviceUserType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, PersonalDeviceUserType* pvalue);

EXTERN int PersonalDeviceUserType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, PersonalDeviceUserType* pvalue);

/**************************************************************/
/*                                                            */
/*  PivotingAllowed                                           */
/*                                                            */
/**************************************************************/
/*
PivotingAllowed ::= BOOLEAN
*/
typedef OSBOOL PivotingAllowed;

EXTERN int asn1PE_PivotingAllowed (OSCTXT* pctxt, PivotingAllowed value);

EXTERN int asn1PD_PivotingAllowed (OSCTXT* pctxt, PivotingAllowed* pvalue);

EXTERN void asn1Print_PivotingAllowed 
   (const char* name, const PivotingAllowed* pvalue);

EXTERN int asn1PrtToStrm_PivotingAllowed (OSCTXT *pctxt, 
   const char* name, const PivotingAllowed* pvalue);

/**************************************************************/
/*                                                            */
/*  PositionConfidence                                        */
/*                                                            */
/**************************************************************/
/*
PositionConfidence ::= ENUMERATED { unavailable(0), a500m(1), a200m(2), a100m(3), a50m(4), a20m(5), a10m(6), a5m(7), a2m(8), a1m(9), a50cm(10), a20cm(11), a10cm(12), a5cm(13), a2cm(14), a1cm(15) }
    Encoded as a 4 bit value

*/
typedef enum {
   unavailable_18 = 0,
   a500m = 1,
   a200m = 2,
   a100m = 3,
   a50m = 4,
   a20m = 5,
   a10m = 6,
   a5m = 7,
   a2m = 8,
   a1m = 9,
   a50cm = 10,
   a20cm = 11,
   a10cm = 12,
   a5cm = 13,
   a2cm = 14,
   a1cm = 15
} PositionConfidence_Root;

typedef OSUINT32 PositionConfidence;

EXTERN int asn1PE_PositionConfidence (OSCTXT* pctxt, PositionConfidence value);

EXTERN int asn1PD_PositionConfidence (OSCTXT* pctxt, PositionConfidence* pvalue);

EXTERN void asn1Print_PositionConfidence 
   (const char* name, const PositionConfidence* pvalue);

EXTERN int asn1PrtToStrm_PositionConfidence (OSCTXT *pctxt, 
   const char* name, const PositionConfidence* pvalue);

EXTERN const OSUTF8CHAR* PositionConfidence_ToString (OSINT32 value);

EXTERN int PositionConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, PositionConfidence* pvalue);

EXTERN int PositionConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, PositionConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  PrioritizationResponseStatus                              */
/*                                                            */
/**************************************************************/
/*
PrioritizationResponseStatus ::= ENUMERATED { unknown(0), requested(1), processing(2), watchOtherTraffic(3), granted(4), rejected(5), maxPresence(6), reserviceLocked(7), ... }
*/
typedef enum {
   unknown_1 = 0,
   requested = 1,
   processing = 2,
   watchOtherTraffic = 3,
   granted = 4,
   rejected = 5,
   maxPresence = 6,
   reserviceLocked = 7
} PrioritizationResponseStatus_Root;

typedef OSUINT32 PrioritizationResponseStatus;

EXTERN int asn1PE_PrioritizationResponseStatus (OSCTXT* pctxt, PrioritizationResponseStatus value);

EXTERN int asn1PD_PrioritizationResponseStatus (OSCTXT* pctxt, PrioritizationResponseStatus* pvalue);

EXTERN void asn1Print_PrioritizationResponseStatus 
   (const char* name, const PrioritizationResponseStatus* pvalue);

EXTERN int asn1PrtToStrm_PrioritizationResponseStatus (OSCTXT *pctxt, 
   const char* name, const PrioritizationResponseStatus* pvalue);

EXTERN const OSUTF8CHAR* PrioritizationResponseStatus_ToString (OSINT32 value);

EXTERN int PrioritizationResponseStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, PrioritizationResponseStatus* pvalue);

EXTERN int PrioritizationResponseStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      PrioritizationResponseStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  Priority                                                  */
/*                                                            */
/**************************************************************/
/*
Priority ::= OCTET STRING (SIZE (1))
     Follow definition notes on setting these bits

*/
typedef struct EXTERN Priority {
   OSUINT32 numocts;
   OSOCTET data[1];
} Priority;

EXTERN int asn1PE_Priority (OSCTXT* pctxt, Priority* pvalue);

EXTERN int asn1PD_Priority (OSCTXT* pctxt, Priority* pvalue);

EXTERN void asn1Print_Priority (const char* name, const Priority* pvalue);

EXTERN int asn1PrtToStrm_Priority (OSCTXT *pctxt, 
   const char* name, const Priority* pvalue);

EXTERN int asn1Init_Priority (Priority* pvalue);

/**************************************************************/
/*                                                            */
/*  PriorityRequestType                                       */
/*                                                            */
/**************************************************************/
/*
PriorityRequestType ::= ENUMERATED { priorityRequestTypeReserved(0), priorityRequest(1), priorityRequestUpdate(2), priorityCancellation(3), ... }
*/
typedef enum {
   priorityRequestTypeReserved = 0,
   priorityRequest = 1,
   priorityRequestUpdate = 2,
   priorityCancellation = 3
} PriorityRequestType_Root;

typedef OSUINT32 PriorityRequestType;

EXTERN int asn1PE_PriorityRequestType (OSCTXT* pctxt, PriorityRequestType value);

EXTERN int asn1PD_PriorityRequestType (OSCTXT* pctxt, PriorityRequestType* pvalue);

EXTERN void asn1Print_PriorityRequestType 
   (const char* name, const PriorityRequestType* pvalue);

EXTERN int asn1PrtToStrm_PriorityRequestType (OSCTXT *pctxt, 
   const char* name, const PriorityRequestType* pvalue);

EXTERN const OSUTF8CHAR* PriorityRequestType_ToString (OSINT32 value);

EXTERN int PriorityRequestType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, PriorityRequestType* pvalue);

EXTERN int PriorityRequestType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, PriorityRequestType* pvalue);

/**************************************************************/
/*                                                            */
/*  PrivilegedEventFlags                                      */
/*                                                            */
/**************************************************************/
/*
PrivilegedEventFlags ::= BIT STRING  { peUnavailable(0), peEmergencyResponse(1), peEmergencyLightsActive(2), peEmergencySoundActive(3), peNonEmergencyLightsActive(4), peNonEmergencySoundActive(5) } (SIZE (16))
*/
/* Named bit constants */

#define PrivilegedEventFlags_peUnavailable                   0
#define PrivilegedEventFlags_peEmergencyResponse             1
#define PrivilegedEventFlags_peEmergencyLightsActive         2
#define PrivilegedEventFlags_peEmergencySoundActive          3
#define PrivilegedEventFlags_peNonEmergencyLightsActive      4
#define PrivilegedEventFlags_peNonEmergencySoundActive       5

typedef struct PrivilegedEventFlags {
   OSUINT32 numbits;
   OSOCTET data[2];
} PrivilegedEventFlags;

EXTERN int asn1PE_PrivilegedEventFlags (OSCTXT* pctxt, PrivilegedEventFlags* pvalue);

EXTERN int asn1PD_PrivilegedEventFlags (OSCTXT* pctxt, PrivilegedEventFlags* pvalue);

EXTERN void asn1Print_PrivilegedEventFlags 
   (const char* name, const PrivilegedEventFlags* pvalue);

EXTERN int asn1PrtToStrm_PrivilegedEventFlags (OSCTXT *pctxt, 
   const char* name, const PrivilegedEventFlags* pvalue);

EXTERN int asn1Init_PrivilegedEventFlags (PrivilegedEventFlags* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeSegmentNumber                                        */
/*                                                            */
/**************************************************************/
/*
ProbeSegmentNumber ::= INTEGER (0..32767)
    value determined by local device 
    as per standard

*/
typedef OSUINT16 ProbeSegmentNumber;

EXTERN int asn1PE_ProbeSegmentNumber (OSCTXT* pctxt, ProbeSegmentNumber value);

EXTERN int asn1PD_ProbeSegmentNumber (OSCTXT* pctxt, ProbeSegmentNumber* pvalue);

EXTERN void asn1Print_ProbeSegmentNumber 
   (const char* name, const ProbeSegmentNumber* pvalue);

EXTERN int asn1PrtToStrm_ProbeSegmentNumber (OSCTXT *pctxt, 
   const char* name, const ProbeSegmentNumber* pvalue);

/**************************************************************/
/*                                                            */
/*  PublicSafetyAndRoadWorkerActivity                         */
/*                                                            */
/**************************************************************/
/*
PublicSafetyAndRoadWorkerActivity ::= BIT STRING  { unavailable(0), workingOnRoad(1), settingUpClosures(2), respondingToEvents(3), directingTraffic(4), otherActivities(5) } (SIZE (6, ...))
*/
/* Named bit constants */

#define PublicSafetyAndRoadWorkerActivity_unavailable_4                   0
#define PublicSafetyAndRoadWorkerActivity_workingOnRoad                   1
#define PublicSafetyAndRoadWorkerActivity_settingUpClosures               2
#define PublicSafetyAndRoadWorkerActivity_respondingToEvents              3
#define PublicSafetyAndRoadWorkerActivity_directingTraffic                4
#define PublicSafetyAndRoadWorkerActivity_otherActivities                 5

typedef struct PublicSafetyAndRoadWorkerActivity {
   OSUINT32 numbits;
   OSOCTET data[1];
   OSOCTET* extdata;
} PublicSafetyAndRoadWorkerActivity;

EXTERN int asn1PE_PublicSafetyAndRoadWorkerActivity (OSCTXT* pctxt, PublicSafetyAndRoadWorkerActivity* pvalue);

EXTERN int asn1PD_PublicSafetyAndRoadWorkerActivity (OSCTXT* pctxt, PublicSafetyAndRoadWorkerActivity* pvalue);

EXTERN void asn1Print_PublicSafetyAndRoadWorkerActivity 
   (const char* name, const PublicSafetyAndRoadWorkerActivity* pvalue);

EXTERN int asn1PrtToStrm_PublicSafetyAndRoadWorkerActivity (OSCTXT *pctxt, 
   const char* name, const PublicSafetyAndRoadWorkerActivity* pvalue);

EXTERN int asn1Init_PublicSafetyAndRoadWorkerActivity (
   PublicSafetyAndRoadWorkerActivity* pvalue);

/**************************************************************/
/*                                                            */
/*  PublicSafetyDirectingTrafficSubType                       */
/*                                                            */
/**************************************************************/
/*
PublicSafetyDirectingTrafficSubType ::= BIT STRING  { unavailable(0), policeAndTrafficOfficers(1), trafficControlPersons(2), railroadCrossingGuards(3), civilDefenseNationalGuardMilitaryPolice(4), emergencyOrganizationPersonnel(5), highwayServiceVehiclePersonnel(6) } (SIZE (7, ...))
*/
/* Named bit constants */

#define PublicSafetyDirectingTrafficSubType_unavailable_5                   0
#define PublicSafetyDirectingTrafficSubType_policeAndTrafficOfficers        1
#define PublicSafetyDirectingTrafficSubType_trafficControlPersons           2
#define PublicSafetyDirectingTrafficSubType_railroadCrossingGuards          3
#define PublicSafetyDirectingTrafficSubType_civilDefenseNationalGuardMilitaryPolice 4
#define PublicSafetyDirectingTrafficSubType_emergencyOrganizationPersonnel  5
#define PublicSafetyDirectingTrafficSubType_highwayServiceVehiclePersonnel  6

typedef struct PublicSafetyDirectingTrafficSubType {
   OSUINT32 numbits;
   OSOCTET data[1];
   OSOCTET* extdata;
} PublicSafetyDirectingTrafficSubType;

EXTERN int asn1PE_PublicSafetyDirectingTrafficSubType (OSCTXT* pctxt, PublicSafetyDirectingTrafficSubType* pvalue);

EXTERN int asn1PD_PublicSafetyDirectingTrafficSubType (OSCTXT* pctxt, PublicSafetyDirectingTrafficSubType* pvalue);

EXTERN void asn1Print_PublicSafetyDirectingTrafficSubType 
   (const char* name, const PublicSafetyDirectingTrafficSubType* pvalue);

EXTERN int asn1PrtToStrm_PublicSafetyDirectingTrafficSubType (OSCTXT *pctxt, 
   const char* name, const PublicSafetyDirectingTrafficSubType* pvalue);

EXTERN int asn1Init_PublicSafetyDirectingTrafficSubType (
   PublicSafetyDirectingTrafficSubType* pvalue);

/**************************************************************/
/*                                                            */
/*  PublicSafetyEventResponderWorkerType                      */
/*                                                            */
/**************************************************************/
/*
PublicSafetyEventResponderWorkerType ::= ENUMERATED { unavailable(0), towOperater(1), fireAndEMSWorker(2), aDOTWorker(3), lawEnforcement(4), hazmatResponder(5), animalControlWorker(6), otherPersonnel(7), ... }
*/
typedef enum {
   unavailable_19 = 0,
   towOperater = 1,
   fireAndEMSWorker = 2,
   aDOTWorker = 3,
   lawEnforcement = 4,
   hazmatResponder = 5,
   animalControlWorker = 6,
   otherPersonnel = 7
} PublicSafetyEventResponderWorkerType_Root;

typedef OSUINT32 PublicSafetyEventResponderWorkerType;

EXTERN int asn1PE_PublicSafetyEventResponderWorkerType (OSCTXT* pctxt, PublicSafetyEventResponderWorkerType value);

EXTERN int asn1PD_PublicSafetyEventResponderWorkerType (OSCTXT* pctxt, PublicSafetyEventResponderWorkerType* pvalue);

EXTERN void asn1Print_PublicSafetyEventResponderWorkerType 
   (const char* name, const PublicSafetyEventResponderWorkerType* pvalue);

EXTERN int asn1PrtToStrm_PublicSafetyEventResponderWorkerType (OSCTXT *pctxt, 
   const char* name, const PublicSafetyEventResponderWorkerType* pvalue);

EXTERN const OSUTF8CHAR* PublicSafetyEventResponderWorkerType_ToString (OSINT32 value);

EXTERN int PublicSafetyEventResponderWorkerType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, PublicSafetyEventResponderWorkerType* pvalue);

EXTERN int PublicSafetyEventResponderWorkerType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      PublicSafetyEventResponderWorkerType* pvalue);

/**************************************************************/
/*                                                            */
/*  RadiusOfCurvature                                         */
/*                                                            */
/**************************************************************/
/*
RadiusOfCurvature ::= INTEGER (-32767..32767)
    LSB units of 10cm
    A straight path to use value of 32767

*/
typedef OSINT16 RadiusOfCurvature;

EXTERN int asn1PE_RadiusOfCurvature (OSCTXT* pctxt, RadiusOfCurvature value);

EXTERN int asn1PD_RadiusOfCurvature (OSCTXT* pctxt, RadiusOfCurvature* pvalue);

EXTERN void asn1Print_RadiusOfCurvature 
   (const char* name, const RadiusOfCurvature* pvalue);

EXTERN int asn1PrtToStrm_RadiusOfCurvature (OSCTXT *pctxt, 
   const char* name, const RadiusOfCurvature* pvalue);

/**************************************************************/
/*                                                            */
/*  Radius_B12                                                */
/*                                                            */
/**************************************************************/
/*
Radius-B12 ::= INTEGER (0..4095)
    with the LSB unit value determined elsewhere
    the value 4095 shall be used for unknown

*/
typedef OSUINT16 Radius_B12;

EXTERN int asn1PE_Radius_B12 (OSCTXT* pctxt, Radius_B12 value);

EXTERN int asn1PD_Radius_B12 (OSCTXT* pctxt, Radius_B12* pvalue);

EXTERN void asn1Print_Radius_B12 (const char* name, const Radius_B12* pvalue);

EXTERN int asn1PrtToStrm_Radius_B12 (OSCTXT *pctxt, 
   const char* name, const Radius_B12* pvalue);

/**************************************************************/
/*                                                            */
/*  RainSensor                                                */
/*                                                            */
/**************************************************************/
/*
RainSensor ::= ENUMERATED { none(0), lightMist(1), heavyMist(2), lightRainOrDrizzle(3), rain(4), moderateRain(5), heavyRain(6), heavyDownpour(7) }
*/
typedef enum {
   none_3 = 0,
   lightMist = 1,
   heavyMist = 2,
   lightRainOrDrizzle = 3,
   rain = 4,
   moderateRain = 5,
   heavyRain = 6,
   heavyDownpour = 7
} RainSensor_Root;

typedef OSUINT32 RainSensor;

EXTERN int asn1PE_RainSensor (OSCTXT* pctxt, RainSensor value);

EXTERN int asn1PD_RainSensor (OSCTXT* pctxt, RainSensor* pvalue);

EXTERN void asn1Print_RainSensor (const char* name, const RainSensor* pvalue);

EXTERN int asn1PrtToStrm_RainSensor (OSCTXT *pctxt, 
   const char* name, const RainSensor* pvalue);

EXTERN const OSUTF8CHAR* RainSensor_ToString (OSINT32 value);

EXTERN int RainSensor_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, RainSensor* pvalue);

EXTERN int RainSensor_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, RainSensor* pvalue);

/**************************************************************/
/*                                                            */
/*  RegionId                                                  */
/*                                                            */
/**************************************************************/
/*
RegionId ::= INTEGER (0..255)
*/
typedef OSUINT8 RegionId;

EXTERN int asn1PE_RegionId (OSCTXT* pctxt, RegionId value);

EXTERN int asn1PD_RegionId (OSCTXT* pctxt, RegionId* pvalue);

EXTERN void asn1Print_RegionId (const char* name, const RegionId* pvalue);

EXTERN int asn1PrtToStrm_RegionId (OSCTXT *pctxt, 
   const char* name, const RegionId* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestedItem                                             */
/*                                                            */
/**************************************************************/
/*
RequestedItem ::= ENUMERATED { reserved(0), itemA(1), itemB(2), itemC(3), itemD(4), itemE(5), itemF(6), itemG(7), itemI(8), itemJ(9), itemK(10), itemL(11), itemM(12), itemN(13), itemO(14), itemP(15), itemQ(16), ... }
*/
typedef enum {
   reserved_5 = 0,
   itemA = 1,
   itemB = 2,
   itemC = 3,
   itemD = 4,
   itemE = 5,
   itemF = 6,
   itemG = 7,
   itemI = 8,
   itemJ = 9,
   itemK = 10,
   itemL = 11,
   itemM = 12,
   itemN = 13,
   itemO = 14,
   itemP = 15,
   itemQ = 16
} RequestedItem_Root;

typedef OSUINT32 RequestedItem;

EXTERN int asn1PE_RequestedItem (OSCTXT* pctxt, RequestedItem value);

EXTERN int asn1PD_RequestedItem (OSCTXT* pctxt, RequestedItem* pvalue);

EXTERN void asn1Print_RequestedItem (const char* name, const RequestedItem* pvalue);

EXTERN int asn1PrtToStrm_RequestedItem (OSCTXT *pctxt, 
   const char* name, const RequestedItem* pvalue);

EXTERN const OSUTF8CHAR* RequestedItem_ToString (OSINT32 value);

EXTERN int RequestedItem_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, RequestedItem* pvalue);

EXTERN int RequestedItem_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, RequestedItem* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestID                                                 */
/*                                                            */
/**************************************************************/
/*
RequestID ::= INTEGER (0..255)
*/
typedef OSUINT8 RequestID;

EXTERN int asn1PE_RequestID (OSCTXT* pctxt, RequestID value);

EXTERN int asn1PD_RequestID (OSCTXT* pctxt, RequestID* pvalue);

EXTERN void asn1Print_RequestID (const char* name, const RequestID* pvalue);

EXTERN int asn1PrtToStrm_RequestID (OSCTXT *pctxt, 
   const char* name, const RequestID* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestImportanceLevel                                    */
/*                                                            */
/**************************************************************/
/*
RequestImportanceLevel ::= ENUMERATED { requestImportanceLevelUnKnown(0), requestImportanceLevel1(1), requestImportanceLevel2(2), requestImportanceLevel3(3), requestImportanceLevel4(4), requestImportanceLevel5(5), requestImportanceLevel6(6), requestImportanceLevel7(7), requestImportanceLevel8(8), requestImportanceLevel9(9), requestImportanceLevel10(10), requestImportanceLevel11(11), requestImportanceLevel12(12), requestImportanceLevel13(13), requestImportanceLevel14(14), requestImportanceReserved(15) }
*/
typedef enum {
   requestImportanceLevelUnKnown = 0,
   requestImportanceLevel1 = 1,
   requestImportanceLevel2 = 2,
   requestImportanceLevel3 = 3,
   requestImportanceLevel4 = 4,
   requestImportanceLevel5 = 5,
   requestImportanceLevel6 = 6,
   requestImportanceLevel7 = 7,
   requestImportanceLevel8 = 8,
   requestImportanceLevel9 = 9,
   requestImportanceLevel10 = 10,
   requestImportanceLevel11 = 11,
   requestImportanceLevel12 = 12,
   requestImportanceLevel13 = 13,
   requestImportanceLevel14 = 14,
   requestImportanceReserved = 15
} RequestImportanceLevel_Root;

typedef OSUINT32 RequestImportanceLevel;

EXTERN int asn1PE_RequestImportanceLevel (OSCTXT* pctxt, RequestImportanceLevel value);

EXTERN int asn1PD_RequestImportanceLevel (OSCTXT* pctxt, RequestImportanceLevel* pvalue);

EXTERN void asn1Print_RequestImportanceLevel 
   (const char* name, const RequestImportanceLevel* pvalue);

EXTERN int asn1PrtToStrm_RequestImportanceLevel (OSCTXT *pctxt, 
   const char* name, const RequestImportanceLevel* pvalue);

EXTERN const OSUTF8CHAR* RequestImportanceLevel_ToString (OSINT32 value);

EXTERN int RequestImportanceLevel_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, RequestImportanceLevel* pvalue);

EXTERN int RequestImportanceLevel_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, RequestImportanceLevel* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestSubRole                                            */
/*                                                            */
/**************************************************************/
/*
RequestSubRole ::= ENUMERATED { requestSubRoleUnKnown(0), requestSubRole1(1), requestSubRole2(2), requestSubRole3(3), requestSubRole4(4), requestSubRole5(5), requestSubRole6(6), requestSubRole7(7), requestSubRole8(8), requestSubRole9(9), requestSubRole10(10), requestSubRole11(11), requestSubRole12(12), requestSubRole13(13), requestSubRole14(14), requestSubRoleReserved(15) }
*/
typedef enum {
   requestSubRoleUnKnown = 0,
   requestSubRole1 = 1,
   requestSubRole2 = 2,
   requestSubRole3 = 3,
   requestSubRole4 = 4,
   requestSubRole5 = 5,
   requestSubRole6 = 6,
   requestSubRole7 = 7,
   requestSubRole8 = 8,
   requestSubRole9 = 9,
   requestSubRole10 = 10,
   requestSubRole11 = 11,
   requestSubRole12 = 12,
   requestSubRole13 = 13,
   requestSubRole14 = 14,
   requestSubRoleReserved = 15
} RequestSubRole_Root;

typedef OSUINT32 RequestSubRole;

EXTERN int asn1PE_RequestSubRole (OSCTXT* pctxt, RequestSubRole value);

EXTERN int asn1PD_RequestSubRole (OSCTXT* pctxt, RequestSubRole* pvalue);

EXTERN void asn1Print_RequestSubRole (const char* name, const RequestSubRole* pvalue);

EXTERN int asn1PrtToStrm_RequestSubRole (OSCTXT *pctxt, 
   const char* name, const RequestSubRole* pvalue);

EXTERN const OSUTF8CHAR* RequestSubRole_ToString (OSINT32 value);

EXTERN int RequestSubRole_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, RequestSubRole* pvalue);

EXTERN int RequestSubRole_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, RequestSubRole* pvalue);

/**************************************************************/
/*                                                            */
/*  ResponseType                                              */
/*                                                            */
/**************************************************************/
/*
ResponseType ::= ENUMERATED { notInUseOrNotEquipped(0), emergency(1), nonEmergency(2), pursuit(3), stationary(4), slowMoving(5), stopAndGoMovement(6), ... }
*/
typedef enum {
   notInUseOrNotEquipped = 0,
   emergency_1 = 1,
   nonEmergency = 2,
   pursuit = 3,
   stationary = 4,
   slowMoving_1 = 5,
   stopAndGoMovement = 6
} ResponseType_Root;

typedef OSUINT32 ResponseType;

EXTERN int asn1PE_ResponseType (OSCTXT* pctxt, ResponseType value);

EXTERN int asn1PD_ResponseType (OSCTXT* pctxt, ResponseType* pvalue);

EXTERN void asn1Print_ResponseType (const char* name, const ResponseType* pvalue);

EXTERN int asn1PrtToStrm_ResponseType (OSCTXT *pctxt, 
   const char* name, const ResponseType* pvalue);

EXTERN const OSUTF8CHAR* ResponseType_ToString (OSINT32 value);

EXTERN int ResponseType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ResponseType* pvalue);

EXTERN int ResponseType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ResponseType* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionAppliesTo                                      */
/*                                                            */
/**************************************************************/
/*
RestrictionAppliesTo ::= ENUMERATED { none(0), equippedTransit(1), equippedTaxis(2), equippedOther(3), emissionCompliant(4), equippedBicycle(5), weightCompliant(6), heightCompliant(7), pedestrians(8), slowMovingPersons(9), wheelchairUsers(10), visualDisabilities(11), audioDisabilities(12), otherUnknownDisabilities(13), ... }
*/
typedef enum {
   none_4 = 0,
   equippedTransit = 1,
   equippedTaxis = 2,
   equippedOther = 3,
   emissionCompliant = 4,
   equippedBicycle = 5,
   weightCompliant = 6,
   heightCompliant = 7,
   pedestrians = 8,
   slowMovingPersons = 9,
   wheelchairUsers = 10,
   visualDisabilities = 11,
   audioDisabilities = 12,
   otherUnknownDisabilities = 13
} RestrictionAppliesTo_Root;

typedef OSUINT32 RestrictionAppliesTo;

EXTERN int asn1PE_RestrictionAppliesTo (OSCTXT* pctxt, RestrictionAppliesTo value);

EXTERN int asn1PD_RestrictionAppliesTo (OSCTXT* pctxt, RestrictionAppliesTo* pvalue);

EXTERN void asn1Print_RestrictionAppliesTo 
   (const char* name, const RestrictionAppliesTo* pvalue);

EXTERN int asn1PrtToStrm_RestrictionAppliesTo (OSCTXT *pctxt, 
   const char* name, const RestrictionAppliesTo* pvalue);

EXTERN const OSUTF8CHAR* RestrictionAppliesTo_ToString (OSINT32 value);

EXTERN int RestrictionAppliesTo_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, RestrictionAppliesTo* pvalue);

EXTERN int RestrictionAppliesTo_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, RestrictionAppliesTo* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionClassID                                        */
/*                                                            */
/**************************************************************/
/*
RestrictionClassID ::= INTEGER (0..255)
    An index value to identify data about classes of users
    the value used varies with each intersection's
    needs and is defined in the map to the assigned 
    classes of supported users.

*/
typedef OSUINT8 RestrictionClassID;

EXTERN int asn1PE_RestrictionClassID (OSCTXT* pctxt, RestrictionClassID value);

EXTERN int asn1PD_RestrictionClassID (OSCTXT* pctxt, RestrictionClassID* pvalue);

EXTERN void asn1Print_RestrictionClassID 
   (const char* name, const RestrictionClassID* pvalue);

EXTERN int asn1PrtToStrm_RestrictionClassID (OSCTXT *pctxt, 
   const char* name, const RestrictionClassID* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadRegulatorID                                           */
/*                                                            */
/**************************************************************/
/*
RoadRegulatorID ::= INTEGER (0..65535)
    The value zero shall be used for testing only

*/
typedef OSUINT16 RoadRegulatorID;

EXTERN int asn1PE_RoadRegulatorID (OSCTXT* pctxt, RoadRegulatorID value);

EXTERN int asn1PD_RoadRegulatorID (OSCTXT* pctxt, RoadRegulatorID* pvalue);

EXTERN void asn1Print_RoadRegulatorID 
   (const char* name, const RoadRegulatorID* pvalue);

EXTERN int asn1PrtToStrm_RoadRegulatorID (OSCTXT *pctxt, 
   const char* name, const RoadRegulatorID* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegmentID                                             */
/*                                                            */
/**************************************************************/
/*
RoadSegmentID ::= INTEGER (0..65535)
    The values zero to 255 shall be used for testing only
    Note that the value assigned to an RoadSegment will be
    unique within a given regional ID only during its use

*/
typedef OSUINT16 RoadSegmentID;

EXTERN int asn1PE_RoadSegmentID (OSCTXT* pctxt, RoadSegmentID value);

EXTERN int asn1PD_RoadSegmentID (OSCTXT* pctxt, RoadSegmentID* pvalue);

EXTERN void asn1Print_RoadSegmentID (const char* name, const RoadSegmentID* pvalue);

EXTERN int asn1PrtToStrm_RoadSegmentID (OSCTXT *pctxt, 
   const char* name, const RoadSegmentID* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadwayCrownAngle                                         */
/*                                                            */
/**************************************************************/
/*
RoadwayCrownAngle ::= INTEGER (-128..127)
     In LSB units of 0.3 degrees of angle
     over a range of -38.1 to + 38.1 degrees
     The value -128 shall be used for unknown
     The value zero shall be used for angles 
     which are between -0.15 and +0.15

*/
typedef OSINT8 RoadwayCrownAngle;

EXTERN int asn1PE_RoadwayCrownAngle (OSCTXT* pctxt, RoadwayCrownAngle value);

EXTERN int asn1PD_RoadwayCrownAngle (OSCTXT* pctxt, RoadwayCrownAngle* pvalue);

EXTERN void asn1Print_RoadwayCrownAngle 
   (const char* name, const RoadwayCrownAngle* pvalue);

EXTERN int asn1PrtToStrm_RoadwayCrownAngle (OSCTXT *pctxt, 
   const char* name, const RoadwayCrownAngle* pvalue);

/**************************************************************/
/*                                                            */
/*  RTCM_Revision                                             */
/*                                                            */
/**************************************************************/
/*
RTCM-Revision ::= ENUMERATED { unknown(0), rtcmRev2(1), rtcmRev3(2), reserved(3), ... }
*/
typedef enum {
   unknown_2 = 0,
   rtcmRev2 = 1,
   rtcmRev3 = 2,
   reserved_6 = 3
} RTCM_Revision_Root;

typedef OSUINT32 RTCM_Revision;

EXTERN int asn1PE_RTCM_Revision (OSCTXT* pctxt, RTCM_Revision value);

EXTERN int asn1PD_RTCM_Revision (OSCTXT* pctxt, RTCM_Revision* pvalue);

EXTERN void asn1Print_RTCM_Revision (const char* name, const RTCM_Revision* pvalue);

EXTERN int asn1PrtToStrm_RTCM_Revision (OSCTXT *pctxt, 
   const char* name, const RTCM_Revision* pvalue);

EXTERN const OSUTF8CHAR* RTCM_Revision_ToString (OSINT32 value);

EXTERN int RTCM_Revision_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, RTCM_Revision* pvalue);

EXTERN int RTCM_Revision_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, RTCM_Revision* pvalue);

/**************************************************************/
/*                                                            */
/*  RTCMmessage                                               */
/*                                                            */
/**************************************************************/
/*
RTCMmessage ::= OCTET STRING (SIZE (1..1023))
*/
typedef struct EXTERN RTCMmessage {
   OSUINT32 numocts;
   OSOCTET data[1023];
} RTCMmessage;

EXTERN int asn1PE_RTCMmessage (OSCTXT* pctxt, RTCMmessage* pvalue);

EXTERN int asn1PD_RTCMmessage (OSCTXT* pctxt, RTCMmessage* pvalue);

EXTERN void asn1Print_RTCMmessage (const char* name, const RTCMmessage* pvalue);

EXTERN int asn1PrtToStrm_RTCMmessage (OSCTXT *pctxt, 
   const char* name, const RTCMmessage* pvalue);

EXTERN int asn1Init_RTCMmessage (RTCMmessage* pvalue);

/**************************************************************/
/*                                                            */
/*  Scale_B12                                                 */
/*                                                            */
/**************************************************************/
/*
Scale-B12 ::= INTEGER (-2048..2047)
                                      in steps of 0.05 percent

*/
typedef OSINT16 Scale_B12;

EXTERN int asn1PE_Scale_B12 (OSCTXT* pctxt, Scale_B12 value);

EXTERN int asn1PD_Scale_B12 (OSCTXT* pctxt, Scale_B12* pvalue);

EXTERN void asn1Print_Scale_B12 (const char* name, const Scale_B12* pvalue);

EXTERN int asn1PrtToStrm_Scale_B12 (OSCTXT *pctxt, 
   const char* name, const Scale_B12* pvalue);

/**************************************************************/
/*                                                            */
/*  SecondOfTime                                              */
/*                                                            */
/**************************************************************/
/*
SecondOfTime ::= INTEGER (0..61)
                                   units of seconds
     The value 60 shall be used for leap seconds
     or to indicate a full minute.
     The value 61 indicates that the value is unavailable

*/
typedef OSUINT8 SecondOfTime;

EXTERN int asn1PE_SecondOfTime (OSCTXT* pctxt, SecondOfTime value);

EXTERN int asn1PD_SecondOfTime (OSCTXT* pctxt, SecondOfTime* pvalue);

EXTERN void asn1Print_SecondOfTime (const char* name, const SecondOfTime* pvalue);

EXTERN int asn1PrtToStrm_SecondOfTime (OSCTXT *pctxt, 
   const char* name, const SecondOfTime* pvalue);

/**************************************************************/
/*                                                            */
/*  SegmentAttributeLL                                        */
/*                                                            */
/**************************************************************/
/*
SegmentAttributeLL ::= ENUMERATED { reserved(0), doNotBlock(1), whiteLine(2), mergingLaneLeft(3), mergingLaneRight(4), curbOnLeft(5), curbOnRight(6), loadingzoneOnLeft(7), loadingzoneOnRight(8), turnOutPointOnLeft(9), turnOutPointOnRight(10), adjacentParkingOnLeft(11), adjacentParkingOnRight(12), adjacentBikeLaneOnLeft(13), adjacentBikeLaneOnRight(14), sharedBikeLane(15), bikeBoxInFront(16), transitStopOnLeft(17), transitStopOnRight(18), transitStopInLane(19), sharedWithTrackedVehicle(20), safeIsland(21), lowCurbsPresent(22), rumbleStripPresent(23), audibleSignalingPresent(24), adaptiveTimingPresent(25), rfSignalRequestPresent(26), partialCurbIntrusion(27), taperToLeft(28), taperToRight(29), taperToCenterLine(30), parallelParking(31), headInParking(32), freeParking(33), timeRestrictionsOnParking(34), costToPark(35), midBlockCurbPresent(36), unEvenPavementPresent(37), ... }
*/
typedef enum {
   reserved_7 = 0,
   doNotBlock = 1,
   whiteLine = 2,
   mergingLaneLeft = 3,
   mergingLaneRight = 4,
   curbOnLeft = 5,
   curbOnRight = 6,
   loadingzoneOnLeft = 7,
   loadingzoneOnRight = 8,
   turnOutPointOnLeft = 9,
   turnOutPointOnRight = 10,
   adjacentParkingOnLeft = 11,
   adjacentParkingOnRight = 12,
   adjacentBikeLaneOnLeft = 13,
   adjacentBikeLaneOnRight = 14,
   sharedBikeLane = 15,
   bikeBoxInFront = 16,
   transitStopOnLeft = 17,
   transitStopOnRight = 18,
   transitStopInLane = 19,
   sharedWithTrackedVehicle = 20,
   safeIsland_2 = 21,
   lowCurbsPresent = 22,
   rumbleStripPresent = 23,
   audibleSignalingPresent = 24,
   adaptiveTimingPresent = 25,
   rfSignalRequestPresent = 26,
   partialCurbIntrusion = 27,
   taperToLeft = 28,
   taperToRight = 29,
   taperToCenterLine = 30,
   parallelParking = 31,
   headInParking = 32,
   freeParking = 33,
   timeRestrictionsOnParking = 34,
   costToPark = 35,
   midBlockCurbPresent = 36,
   unEvenPavementPresent = 37
} SegmentAttributeLL_Root;

typedef OSUINT32 SegmentAttributeLL;

EXTERN int asn1PE_SegmentAttributeLL (OSCTXT* pctxt, SegmentAttributeLL value);

EXTERN int asn1PD_SegmentAttributeLL (OSCTXT* pctxt, SegmentAttributeLL* pvalue);

EXTERN void asn1Print_SegmentAttributeLL 
   (const char* name, const SegmentAttributeLL* pvalue);

EXTERN int asn1PrtToStrm_SegmentAttributeLL (OSCTXT *pctxt, 
   const char* name, const SegmentAttributeLL* pvalue);

EXTERN const OSUTF8CHAR* SegmentAttributeLL_ToString (OSINT32 value);

EXTERN int SegmentAttributeLL_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, SegmentAttributeLL* pvalue);

EXTERN int SegmentAttributeLL_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, SegmentAttributeLL* pvalue);

/**************************************************************/
/*                                                            */
/*  SegmentAttributeXY                                        */
/*                                                            */
/**************************************************************/
/*
SegmentAttributeXY ::= ENUMERATED { reserved(0), doNotBlock(1), whiteLine(2), mergingLaneLeft(3), mergingLaneRight(4), curbOnLeft(5), curbOnRight(6), loadingzoneOnLeft(7), loadingzoneOnRight(8), turnOutPointOnLeft(9), turnOutPointOnRight(10), adjacentParkingOnLeft(11), adjacentParkingOnRight(12), adjacentBikeLaneOnLeft(13), adjacentBikeLaneOnRight(14), sharedBikeLane(15), bikeBoxInFront(16), transitStopOnLeft(17), transitStopOnRight(18), transitStopInLane(19), sharedWithTrackedVehicle(20), safeIsland(21), lowCurbsPresent(22), rumbleStripPresent(23), audibleSignalingPresent(24), adaptiveTimingPresent(25), rfSignalRequestPresent(26), partialCurbIntrusion(27), taperToLeft(28), taperToRight(29), taperToCenterLine(30), parallelParking(31), headInParking(32), freeParking(33), timeRestrictionsOnParking(34), costToPark(35), midBlockCurbPresent(36), unEvenPavementPresent(37), ... }
*/
typedef enum {
   reserved_8 = 0,
   doNotBlock_1 = 1,
   whiteLine_1 = 2,
   mergingLaneLeft_1 = 3,
   mergingLaneRight_1 = 4,
   curbOnLeft_1 = 5,
   curbOnRight_1 = 6,
   loadingzoneOnLeft_1 = 7,
   loadingzoneOnRight_1 = 8,
   turnOutPointOnLeft_1 = 9,
   turnOutPointOnRight_1 = 10,
   adjacentParkingOnLeft_1 = 11,
   adjacentParkingOnRight_1 = 12,
   adjacentBikeLaneOnLeft_1 = 13,
   adjacentBikeLaneOnRight_1 = 14,
   sharedBikeLane_1 = 15,
   bikeBoxInFront_1 = 16,
   transitStopOnLeft_1 = 17,
   transitStopOnRight_1 = 18,
   transitStopInLane_1 = 19,
   sharedWithTrackedVehicle_1 = 20,
   safeIsland_3 = 21,
   lowCurbsPresent_1 = 22,
   rumbleStripPresent_1 = 23,
   audibleSignalingPresent_1 = 24,
   adaptiveTimingPresent_1 = 25,
   rfSignalRequestPresent_1 = 26,
   partialCurbIntrusion_1 = 27,
   taperToLeft_1 = 28,
   taperToRight_1 = 29,
   taperToCenterLine_1 = 30,
   parallelParking_1 = 31,
   headInParking_1 = 32,
   freeParking_1 = 33,
   timeRestrictionsOnParking_1 = 34,
   costToPark_1 = 35,
   midBlockCurbPresent_1 = 36,
   unEvenPavementPresent_1 = 37
} SegmentAttributeXY_Root;

typedef OSUINT32 SegmentAttributeXY;

EXTERN int asn1PE_SegmentAttributeXY (OSCTXT* pctxt, SegmentAttributeXY value);

EXTERN int asn1PD_SegmentAttributeXY (OSCTXT* pctxt, SegmentAttributeXY* pvalue);

EXTERN void asn1Print_SegmentAttributeXY 
   (const char* name, const SegmentAttributeXY* pvalue);

EXTERN int asn1PrtToStrm_SegmentAttributeXY (OSCTXT *pctxt, 
   const char* name, const SegmentAttributeXY* pvalue);

EXTERN const OSUTF8CHAR* SegmentAttributeXY_ToString (OSINT32 value);

EXTERN int SegmentAttributeXY_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, SegmentAttributeXY* pvalue);

EXTERN int SegmentAttributeXY_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, SegmentAttributeXY* pvalue);

/**************************************************************/
/*                                                            */
/*  SemiMajorAxisAccuracy                                     */
/*                                                            */
/**************************************************************/
/*
SemiMajorAxisAccuracy ::= INTEGER (0..255)
    semi-major axis accuracy at one standard dev 
    range 0-12.7 meter, LSB = .05m
    254 = any value equal or greater than 12.70 meter
    255 = unavailable semi-major axis value

*/
typedef OSUINT8 SemiMajorAxisAccuracy;

EXTERN int asn1PE_SemiMajorAxisAccuracy (OSCTXT* pctxt, SemiMajorAxisAccuracy value);

EXTERN int asn1PD_SemiMajorAxisAccuracy (OSCTXT* pctxt, SemiMajorAxisAccuracy* pvalue);

EXTERN void asn1Print_SemiMajorAxisAccuracy 
   (const char* name, const SemiMajorAxisAccuracy* pvalue);

EXTERN int asn1PrtToStrm_SemiMajorAxisAccuracy (OSCTXT *pctxt, 
   const char* name, const SemiMajorAxisAccuracy* pvalue);

/**************************************************************/
/*                                                            */
/*  SemiMajorAxisOrientation                                  */
/*                                                            */
/**************************************************************/
/*
SemiMajorAxisOrientation ::= INTEGER (0..65535)
    orientation of semi-major axis 
    relative to true north (0~359.9945078786 degrees)
    LSB units of 360/65535 deg  = 0.0054932479
    a value of 0 shall be 0 degrees
    a value of 1 shall be 0.0054932479 degrees 
    a value of 65534 shall be 359.9945078786 deg
    a value of 65535 shall be used for orientation unavailable

*/
typedef OSUINT16 SemiMajorAxisOrientation;

EXTERN int asn1PE_SemiMajorAxisOrientation (OSCTXT* pctxt, SemiMajorAxisOrientation value);

EXTERN int asn1PD_SemiMajorAxisOrientation (OSCTXT* pctxt, SemiMajorAxisOrientation* pvalue);

EXTERN void asn1Print_SemiMajorAxisOrientation 
   (const char* name, const SemiMajorAxisOrientation* pvalue);

EXTERN int asn1PrtToStrm_SemiMajorAxisOrientation (OSCTXT *pctxt, 
   const char* name, const SemiMajorAxisOrientation* pvalue);

/**************************************************************/
/*                                                            */
/*  SemiMinorAxisAccuracy                                     */
/*                                                            */
/**************************************************************/
/*
SemiMinorAxisAccuracy ::= INTEGER (0..255)
    semi-minor axis accuracy at one standard dev 
    range 0-12.7 meter, LSB = .05m
    254 = any value equal or greater than 12.70 meter
    255 = unavailable semi-minor axis value

*/
typedef OSUINT8 SemiMinorAxisAccuracy;

EXTERN int asn1PE_SemiMinorAxisAccuracy (OSCTXT* pctxt, SemiMinorAxisAccuracy value);

EXTERN int asn1PD_SemiMinorAxisAccuracy (OSCTXT* pctxt, SemiMinorAxisAccuracy* pvalue);

EXTERN void asn1Print_SemiMinorAxisAccuracy 
   (const char* name, const SemiMinorAxisAccuracy* pvalue);

EXTERN int asn1PrtToStrm_SemiMinorAxisAccuracy (OSCTXT *pctxt, 
   const char* name, const SemiMinorAxisAccuracy* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalGroupID                                             */
/*                                                            */
/**************************************************************/
/*
SignalGroupID ::= INTEGER (0..255)
     The value 0 shall be used when the ID is
     not available or not known
     the value 255 is reserved to indicate a 
     permanent green movement state
     therefore a simple 8 phase signal controller 
     device might use 1..9 as its groupIDs

*/
typedef OSUINT8 SignalGroupID;

EXTERN int asn1PE_SignalGroupID (OSCTXT* pctxt, SignalGroupID value);

EXTERN int asn1PD_SignalGroupID (OSCTXT* pctxt, SignalGroupID* pvalue);

EXTERN void asn1Print_SignalGroupID (const char* name, const SignalGroupID* pvalue);

EXTERN int asn1PrtToStrm_SignalGroupID (OSCTXT *pctxt, 
   const char* name, const SignalGroupID* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalReqScheme                                           */
/*                                                            */
/**************************************************************/
/*
SignalReqScheme ::= OCTET STRING (SIZE (1))
     Encoded as follows: 
    upper nibble:  Preempt #:  
     Bit 7 (MSB) 1 =  Preempt and 0 =  Priority 
     Remaining 3 bits: 
     Range of 0..7. The values of 1..6 represent 
     the respective controller preempt or Priority 
     to be activated. The value of 7 represents a 
     request for a cabinet flash prempt, 
     while the value of 0 is reserved.  
    lower nibble:  Strategy #:  
     Range is 0..15 and is used to specify a desired 
     strategy (if available).  
     Currently no strategies are defined and this 
     should be zero.

*/
typedef struct EXTERN SignalReqScheme {
   OSUINT32 numocts;
   OSOCTET data[1];
} SignalReqScheme;

EXTERN int asn1PE_SignalReqScheme (OSCTXT* pctxt, SignalReqScheme* pvalue);

EXTERN int asn1PD_SignalReqScheme (OSCTXT* pctxt, SignalReqScheme* pvalue);

EXTERN void asn1Print_SignalReqScheme 
   (const char* name, const SignalReqScheme* pvalue);

EXTERN int asn1PrtToStrm_SignalReqScheme (OSCTXT *pctxt, 
   const char* name, const SignalReqScheme* pvalue);

EXTERN int asn1Init_SignalReqScheme (SignalReqScheme* pvalue);

/**************************************************************/
/*                                                            */
/*  SignPrority                                               */
/*                                                            */
/**************************************************************/
/*
SignPrority ::= INTEGER (0..7)
    0 as least, 7 as most

*/
typedef OSUINT8 SignPrority;

EXTERN int asn1PE_SignPrority (OSCTXT* pctxt, SignPrority value);

EXTERN int asn1PD_SignPrority (OSCTXT* pctxt, SignPrority* pvalue);

EXTERN void asn1Print_SignPrority (const char* name, const SignPrority* pvalue);

EXTERN int asn1PrtToStrm_SignPrority (OSCTXT *pctxt, 
   const char* name, const SignPrority* pvalue);

/**************************************************************/
/*                                                            */
/*  SirenInUse                                                */
/*                                                            */
/**************************************************************/
/*
SirenInUse ::= ENUMERATED { unavailable(0), notInUse(1), inUse(2), reserved(3) }
*/
typedef enum {
   unavailable_20 = 0,
   notInUse_1 = 1,
   inUse_1 = 2,
   reserved_9 = 3
} SirenInUse_Root;

typedef OSUINT32 SirenInUse;

EXTERN int asn1PE_SirenInUse (OSCTXT* pctxt, SirenInUse value);

EXTERN int asn1PD_SirenInUse (OSCTXT* pctxt, SirenInUse* pvalue);

EXTERN void asn1Print_SirenInUse (const char* name, const SirenInUse* pvalue);

EXTERN int asn1PrtToStrm_SirenInUse (OSCTXT *pctxt, 
   const char* name, const SirenInUse* pvalue);

EXTERN const OSUTF8CHAR* SirenInUse_ToString (OSINT32 value);

EXTERN int SirenInUse_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, SirenInUse* pvalue);

EXTERN int SirenInUse_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, SirenInUse* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedAdvice                                               */
/*                                                            */
/**************************************************************/
/*
SpeedAdvice ::= INTEGER (0..500)
     LSB units are 0.1 m/s^2
     the value 499 shall be used for values at or greater than 49.9 m/s
     the value 500 shall be used to indicate that speed is unavailable

*/
typedef OSUINT16 SpeedAdvice;

EXTERN int asn1PE_SpeedAdvice (OSCTXT* pctxt, SpeedAdvice value);

EXTERN int asn1PD_SpeedAdvice (OSCTXT* pctxt, SpeedAdvice* pvalue);

EXTERN void asn1Print_SpeedAdvice (const char* name, const SpeedAdvice* pvalue);

EXTERN int asn1PrtToStrm_SpeedAdvice (OSCTXT *pctxt, 
   const char* name, const SpeedAdvice* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedConfidence                                           */
/*                                                            */
/**************************************************************/
/*
SpeedConfidence ::= ENUMERATED { unavailable(0), prec100ms(1), prec10ms(2), prec5ms(3), prec1ms(4), prec0-1ms(5), prec0-05ms(6), prec0-01ms(7) }
*/
typedef enum {
   unavailable_21 = 0,
   prec100ms = 1,
   prec10ms = 2,
   prec5ms = 3,
   prec1ms = 4,
   prec0_1ms = 5,
   prec0_05ms = 6,
   prec0_01ms = 7
} SpeedConfidence_Root;

typedef OSUINT32 SpeedConfidence;

EXTERN int asn1PE_SpeedConfidence (OSCTXT* pctxt, SpeedConfidence value);

EXTERN int asn1PD_SpeedConfidence (OSCTXT* pctxt, SpeedConfidence* pvalue);

EXTERN void asn1Print_SpeedConfidence 
   (const char* name, const SpeedConfidence* pvalue);

EXTERN int asn1PrtToStrm_SpeedConfidence (OSCTXT *pctxt, 
   const char* name, const SpeedConfidence* pvalue);

EXTERN const OSUTF8CHAR* SpeedConfidence_ToString (OSINT32 value);

EXTERN int SpeedConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, SpeedConfidence* pvalue);

EXTERN int SpeedConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, SpeedConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimitType                                            */
/*                                                            */
/**************************************************************/
/*
SpeedLimitType ::= ENUMERATED { unknown(0), maxSpeedInSchoolZone(1), maxSpeedInSchoolZoneWhenChildrenArePresent(2), maxSpeedInConstructionZone(3), vehicleMinSpeed(4), vehicleMaxSpeed(5), vehicleNightMaxSpeed(6), truckMinSpeed(7), truckMaxSpeed(8), truckNightMaxSpeed(9), vehiclesWithTrailersMinSpeed(10), vehiclesWithTrailersMaxSpeed(11), vehiclesWithTrailersNightMaxSpeed(12), ... }
*/
typedef enum {
   unknown_3 = 0,
   maxSpeedInSchoolZone = 1,
   maxSpeedInSchoolZoneWhenChildrenArePresent = 2,
   maxSpeedInConstructionZone = 3,
   vehicleMinSpeed = 4,
   vehicleMaxSpeed = 5,
   vehicleNightMaxSpeed = 6,
   truckMinSpeed = 7,
   truckMaxSpeed = 8,
   truckNightMaxSpeed = 9,
   vehiclesWithTrailersMinSpeed = 10,
   vehiclesWithTrailersMaxSpeed = 11,
   vehiclesWithTrailersNightMaxSpeed = 12
} SpeedLimitType_Root;

typedef OSUINT32 SpeedLimitType;

EXTERN int asn1PE_SpeedLimitType (OSCTXT* pctxt, SpeedLimitType value);

EXTERN int asn1PD_SpeedLimitType (OSCTXT* pctxt, SpeedLimitType* pvalue);

EXTERN void asn1Print_SpeedLimitType (const char* name, const SpeedLimitType* pvalue);

EXTERN int asn1PrtToStrm_SpeedLimitType (OSCTXT *pctxt, 
   const char* name, const SpeedLimitType* pvalue);

EXTERN const OSUTF8CHAR* SpeedLimitType_ToString (OSINT32 value);

EXTERN int SpeedLimitType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, SpeedLimitType* pvalue);

EXTERN int SpeedLimitType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, SpeedLimitType* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedProfileMeasurement                                   */
/*                                                            */
/**************************************************************/
/*
SpeedProfileMeasurement ::= GrossSpeed
*/
typedef GrossSpeed SpeedProfileMeasurement;

EXTERN int asn1PE_SpeedProfileMeasurement (OSCTXT* pctxt, SpeedProfileMeasurement value);

EXTERN int asn1PD_SpeedProfileMeasurement (OSCTXT* pctxt, SpeedProfileMeasurement* pvalue);

EXTERN void asn1Print_SpeedProfileMeasurement 
   (const char* name, const SpeedProfileMeasurement* pvalue);

EXTERN int asn1PrtToStrm_SpeedProfileMeasurement (OSCTXT *pctxt, 
   const char* name, const SpeedProfileMeasurement* pvalue);

/**************************************************************/
/*                                                            */
/*  Speed                                                     */
/*                                                            */
/**************************************************************/
/*
Speed ::= INTEGER (0..8191)
                             Units of 0.02 m/s
           The value 8191 indicates that 
           speed is unavailable

*/
typedef OSUINT16 Speed;

EXTERN int asn1PE_Speed (OSCTXT* pctxt, Speed value);

EXTERN int asn1PD_Speed (OSCTXT* pctxt, Speed* pvalue);

EXTERN void asn1Print_Speed (const char* name, const Speed* pvalue);

EXTERN int asn1PrtToStrm_Speed (OSCTXT *pctxt, const char* name, const Speed* pvalue);

/**************************************************************/
/*                                                            */
/*  SSPindex                                                  */
/*                                                            */
/**************************************************************/
/*
SSPindex ::= INTEGER (0..31)
*/
typedef OSUINT8 SSPindex;

EXTERN int asn1PE_SSPindex (OSCTXT* pctxt, SSPindex value);

EXTERN int asn1PD_SSPindex (OSCTXT* pctxt, SSPindex* pvalue);

EXTERN void asn1Print_SSPindex (const char* name, const SSPindex* pvalue);

EXTERN int asn1PrtToStrm_SSPindex (OSCTXT *pctxt, 
   const char* name, const SSPindex* pvalue);

/**************************************************************/
/*                                                            */
/*  StabilityControlStatus                                    */
/*                                                            */
/**************************************************************/
/*
StabilityControlStatus ::= ENUMERATED { unavailable(0), off(1), on(2), engaged(3) }
*/
typedef enum {
   unavailable_22 = 0,
   off_4 = 1,
   on_4 = 2,
   engaged_1 = 3
} StabilityControlStatus_Root;

typedef OSUINT32 StabilityControlStatus;

EXTERN int asn1PE_StabilityControlStatus (OSCTXT* pctxt, StabilityControlStatus value);

EXTERN int asn1PD_StabilityControlStatus (OSCTXT* pctxt, StabilityControlStatus* pvalue);

EXTERN void asn1Print_StabilityControlStatus 
   (const char* name, const StabilityControlStatus* pvalue);

EXTERN int asn1PrtToStrm_StabilityControlStatus (OSCTXT *pctxt, 
   const char* name, const StabilityControlStatus* pvalue);

EXTERN const OSUTF8CHAR* StabilityControlStatus_ToString (OSINT32 value);

EXTERN int StabilityControlStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, StabilityControlStatus* pvalue);

EXTERN int StabilityControlStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, StabilityControlStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  StationID                                                 */
/*                                                            */
/**************************************************************/
/*
StationID ::= INTEGER (0..4294967295)
*/
typedef OSUINT32 StationID;

EXTERN int asn1PE_StationID (OSCTXT* pctxt, StationID value);

EXTERN int asn1PD_StationID (OSCTXT* pctxt, StationID* pvalue);

EXTERN void asn1Print_StationID (const char* name, const StationID* pvalue);

EXTERN int asn1PrtToStrm_StationID (OSCTXT *pctxt, 
   const char* name, const StationID* pvalue);

/**************************************************************/
/*                                                            */
/*  SteeringWheelAngleConfidence                              */
/*                                                            */
/**************************************************************/
/*
SteeringWheelAngleConfidence ::= ENUMERATED { unavailable(0), prec2deg(1), prec1deg(2), prec0-02deg(3) }
*/
typedef enum {
   unavailable_23 = 0,
   prec2deg = 1,
   prec1deg = 2,
   prec0_02deg = 3
} SteeringWheelAngleConfidence_Root;

typedef OSUINT32 SteeringWheelAngleConfidence;

EXTERN int asn1PE_SteeringWheelAngleConfidence (OSCTXT* pctxt, SteeringWheelAngleConfidence value);

EXTERN int asn1PD_SteeringWheelAngleConfidence (OSCTXT* pctxt, SteeringWheelAngleConfidence* pvalue);

EXTERN void asn1Print_SteeringWheelAngleConfidence 
   (const char* name, const SteeringWheelAngleConfidence* pvalue);

EXTERN int asn1PrtToStrm_SteeringWheelAngleConfidence (OSCTXT *pctxt, 
   const char* name, const SteeringWheelAngleConfidence* pvalue);

EXTERN const OSUTF8CHAR* SteeringWheelAngleConfidence_ToString (OSINT32 value);

EXTERN int SteeringWheelAngleConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, SteeringWheelAngleConfidence* pvalue);

EXTERN int SteeringWheelAngleConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      SteeringWheelAngleConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  SteeringWheelAngleRateOfChange                            */
/*                                                            */
/**************************************************************/
/*
SteeringWheelAngleRateOfChange ::= INTEGER (-127..127)
    LSB is 3 degrees per second

*/
typedef OSINT8 SteeringWheelAngleRateOfChange;

EXTERN int asn1PE_SteeringWheelAngleRateOfChange (OSCTXT* pctxt, SteeringWheelAngleRateOfChange value);

EXTERN int asn1PD_SteeringWheelAngleRateOfChange (OSCTXT* pctxt, SteeringWheelAngleRateOfChange* pvalue);

EXTERN void asn1Print_SteeringWheelAngleRateOfChange 
   (const char* name, const SteeringWheelAngleRateOfChange* pvalue);

EXTERN int asn1PrtToStrm_SteeringWheelAngleRateOfChange (OSCTXT *pctxt, 
   const char* name, const SteeringWheelAngleRateOfChange* pvalue);

/**************************************************************/
/*                                                            */
/*  SteeringWheelAngle                                        */
/*                                                            */
/**************************************************************/
/*
SteeringWheelAngle ::= INTEGER (-126..127)
     LSB units of 1.5 degrees, a range of -189 to +189 degrees
     +001 = +1.5 deg
     -126 = -189 deg and beyond  
     +126 = +189 deg and beyond
     +127 to be used for unavailable

*/
typedef OSINT8 SteeringWheelAngle;

EXTERN int asn1PE_SteeringWheelAngle (OSCTXT* pctxt, SteeringWheelAngle value);

EXTERN int asn1PD_SteeringWheelAngle (OSCTXT* pctxt, SteeringWheelAngle* pvalue);

EXTERN void asn1Print_SteeringWheelAngle 
   (const char* name, const SteeringWheelAngle* pvalue);

EXTERN int asn1PrtToStrm_SteeringWheelAngle (OSCTXT *pctxt, 
   const char* name, const SteeringWheelAngle* pvalue);

/**************************************************************/
/*                                                            */
/*  SunSensor                                                 */
/*                                                            */
/**************************************************************/
/*
SunSensor ::= INTEGER (0..1000)
    units of watts / m2

*/
typedef OSUINT16 SunSensor;

EXTERN int asn1PE_SunSensor (OSCTXT* pctxt, SunSensor value);

EXTERN int asn1PD_SunSensor (OSCTXT* pctxt, SunSensor* pvalue);

EXTERN void asn1Print_SunSensor (const char* name, const SunSensor* pvalue);

EXTERN int asn1PrtToStrm_SunSensor (OSCTXT *pctxt, 
   const char* name, const SunSensor* pvalue);

/**************************************************************/
/*                                                            */
/*  TemporaryID                                               */
/*                                                            */
/**************************************************************/
/*
TemporaryID ::= OCTET STRING (SIZE (4))
*/
typedef struct EXTERN TemporaryID {
   OSUINT32 numocts;
   OSOCTET data[4];
} TemporaryID;

EXTERN int asn1PE_TemporaryID (OSCTXT* pctxt, TemporaryID* pvalue);

EXTERN int asn1PD_TemporaryID (OSCTXT* pctxt, TemporaryID* pvalue);

EXTERN void asn1Print_TemporaryID (const char* name, const TemporaryID* pvalue);

EXTERN int asn1PrtToStrm_TemporaryID (OSCTXT *pctxt, 
   const char* name, const TemporaryID* pvalue);

EXTERN int asn1Init_TemporaryID (TemporaryID* pvalue);

/**************************************************************/
/*                                                            */
/*  TermDistance                                              */
/*                                                            */
/**************************************************************/
/*
TermDistance ::= INTEGER (1..30000)
                                       units in meters

*/
typedef OSUINT16 TermDistance;

EXTERN int asn1PE_TermDistance (OSCTXT* pctxt, TermDistance value);

EXTERN int asn1PD_TermDistance (OSCTXT* pctxt, TermDistance* pvalue);

EXTERN void asn1Print_TermDistance (const char* name, const TermDistance* pvalue);

EXTERN int asn1PrtToStrm_TermDistance (OSCTXT *pctxt, 
   const char* name, const TermDistance* pvalue);

/**************************************************************/
/*                                                            */
/*  TermTime                                                  */
/*                                                            */
/**************************************************************/
/*
TermTime ::= INTEGER (1..1800)
                                units of sec

*/
typedef OSUINT16 TermTime;

EXTERN int asn1PE_TermTime (OSCTXT* pctxt, TermTime value);

EXTERN int asn1PD_TermTime (OSCTXT* pctxt, TermTime* pvalue);

EXTERN void asn1Print_TermTime (const char* name, const TermTime* pvalue);

EXTERN int asn1PrtToStrm_TermTime (OSCTXT *pctxt, 
   const char* name, const TermTime* pvalue);

/**************************************************************/
/*                                                            */
/*  ThrottleConfidence                                        */
/*                                                            */
/**************************************************************/
/*
ThrottleConfidence ::= ENUMERATED { unavailable(0), prec10percent(1), prec1percent(2), prec0-5percent(3) }
*/
typedef enum {
   unavailable_24 = 0,
   prec10percent = 1,
   prec1percent = 2,
   prec0_5percent = 3
} ThrottleConfidence_Root;

typedef OSUINT32 ThrottleConfidence;

EXTERN int asn1PE_ThrottleConfidence (OSCTXT* pctxt, ThrottleConfidence value);

EXTERN int asn1PD_ThrottleConfidence (OSCTXT* pctxt, ThrottleConfidence* pvalue);

EXTERN void asn1Print_ThrottleConfidence 
   (const char* name, const ThrottleConfidence* pvalue);

EXTERN int asn1PrtToStrm_ThrottleConfidence (OSCTXT *pctxt, 
   const char* name, const ThrottleConfidence* pvalue);

EXTERN const OSUTF8CHAR* ThrottleConfidence_ToString (OSINT32 value);

EXTERN int ThrottleConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, ThrottleConfidence* pvalue);

EXTERN int ThrottleConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, ThrottleConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  ThrottlePosition                                          */
/*                                                            */
/**************************************************************/
/*
ThrottlePosition ::= INTEGER (0..200)
                                       LSB units are 0.5 percent

*/
typedef OSUINT8 ThrottlePosition;

EXTERN int asn1PE_ThrottlePosition (OSCTXT* pctxt, ThrottlePosition value);

EXTERN int asn1PD_ThrottlePosition (OSCTXT* pctxt, ThrottlePosition* pvalue);

EXTERN void asn1Print_ThrottlePosition 
   (const char* name, const ThrottlePosition* pvalue);

EXTERN int asn1PrtToStrm_ThrottlePosition (OSCTXT *pctxt, 
   const char* name, const ThrottlePosition* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeConfidence                                            */
/*                                                            */
/**************************************************************/
/*
TimeConfidence ::= ENUMERATED { unavailable(0), time-100-000(1), time-050-000(2), time-020-000(3), time-010-000(4), time-002-000(5), time-001-000(6), time-000-500(7), time-000-200(8), time-000-100(9), time-000-050(10), time-000-020(11), time-000-010(12), time-000-005(13), time-000-002(14), time-000-001(15), time-000-000-5(16), time-000-000-2(17), time-000-000-1(18), time-000-000-05(19), time-000-000-02(20), time-000-000-01(21), time-000-000-005(22), time-000-000-002(23), time-000-000-001(24), time-000-000-000-5(25), time-000-000-000-2(26), time-000-000-000-1(27), time-000-000-000-05(28), time-000-000-000-02(29), time-000-000-000-01(30), time-000-000-000-005(31), time-000-000-000-002(32), time-000-000-000-001(33), time-000-000-000-000-5(34), time-000-000-000-000-2(35), time-000-000-000-000-1(36), time-000-000-000-000-05(37), time-000-000-000-000-02(38), time-000-000-000-000-01(39) }
*/
typedef enum {
   unavailable_25 = 0,
   time_100_000 = 1,
   time_050_000 = 2,
   time_020_000 = 3,
   time_010_000 = 4,
   time_002_000 = 5,
   time_001_000 = 6,
   time_000_500 = 7,
   time_000_200 = 8,
   time_000_100 = 9,
   time_000_050 = 10,
   time_000_020 = 11,
   time_000_010 = 12,
   time_000_005 = 13,
   time_000_002 = 14,
   time_000_001 = 15,
   time_000_000_5 = 16,
   time_000_000_2 = 17,
   time_000_000_1 = 18,
   time_000_000_05 = 19,
   time_000_000_02 = 20,
   time_000_000_01 = 21,
   time_000_000_005 = 22,
   time_000_000_002 = 23,
   time_000_000_001 = 24,
   time_000_000_000_5 = 25,
   time_000_000_000_2 = 26,
   time_000_000_000_1 = 27,
   time_000_000_000_05 = 28,
   time_000_000_000_02 = 29,
   time_000_000_000_01 = 30,
   time_000_000_000_005 = 31,
   time_000_000_000_002 = 32,
   time_000_000_000_001 = 33,
   time_000_000_000_000_5 = 34,
   time_000_000_000_000_2 = 35,
   time_000_000_000_000_1 = 36,
   time_000_000_000_000_05 = 37,
   time_000_000_000_000_02 = 38,
   time_000_000_000_000_01 = 39
} TimeConfidence_Root;

typedef OSUINT32 TimeConfidence;

EXTERN int asn1PE_TimeConfidence (OSCTXT* pctxt, TimeConfidence value);

EXTERN int asn1PD_TimeConfidence (OSCTXT* pctxt, TimeConfidence* pvalue);

EXTERN void asn1Print_TimeConfidence (const char* name, const TimeConfidence* pvalue);

EXTERN int asn1PrtToStrm_TimeConfidence (OSCTXT *pctxt, 
   const char* name, const TimeConfidence* pvalue);

EXTERN const OSUTF8CHAR* TimeConfidence_ToString (OSINT32 value);

EXTERN int TimeConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, TimeConfidence* pvalue);

EXTERN int TimeConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, TimeConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeIntervalConfidence                                    */
/*                                                            */
/**************************************************************/
/*
TimeIntervalConfidence ::= INTEGER (0..15)
    Value   Probability
      0         21%%
      1         36%%
      2         47%%
      3         56%%
      4         62%%
      5         68%%
      6         73%%
      7         77%%
      8         81%%
      9         85%%
      10        88%%
      11        91%%
      12        94%%
      13        96%%
      14        98%%
      15        100%%

*/
typedef OSUINT8 TimeIntervalConfidence;

EXTERN int asn1PE_TimeIntervalConfidence (OSCTXT* pctxt, TimeIntervalConfidence value);

EXTERN int asn1PD_TimeIntervalConfidence (OSCTXT* pctxt, TimeIntervalConfidence* pvalue);

EXTERN void asn1Print_TimeIntervalConfidence 
   (const char* name, const TimeIntervalConfidence* pvalue);

EXTERN int asn1PrtToStrm_TimeIntervalConfidence (OSCTXT *pctxt, 
   const char* name, const TimeIntervalConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeMark                                                  */
/*                                                            */
/**************************************************************/
/*
TimeMark ::= INTEGER (0..36001)
    Tenths of a second in the current or next hour
    In units of 1/10th second from UTC time
    A range of 0~36000 covers one hour
    The values 35991..35999 are used when a leap second occurs
    The value 36000 is used to indicate time >3600 seconds
    36001 is to be used when value undefined or unknown
    Note that this is NOT expressed in GPS time
    or in local time

*/
typedef OSUINT16 TimeMark;

EXTERN int asn1PE_TimeMark (OSCTXT* pctxt, TimeMark value);

EXTERN int asn1PD_TimeMark (OSCTXT* pctxt, TimeMark* pvalue);

EXTERN void asn1Print_TimeMark (const char* name, const TimeMark* pvalue);

EXTERN int asn1PrtToStrm_TimeMark (OSCTXT *pctxt, 
   const char* name, const TimeMark* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeOffset                                                */
/*                                                            */
/**************************************************************/
/*
TimeOffset ::= INTEGER (1..65535)
    LSB units of of 10 mSec, 
    with a range of 0.01 seconds to 10 minutes and 55.34 seconds
    a value of 65534 to be used for 655.34 seconds or greater
    a value of 65535 to be unavailable

*/
typedef OSUINT16 TimeOffset;

EXTERN int asn1PE_TimeOffset (OSCTXT* pctxt, TimeOffset value);

EXTERN int asn1PD_TimeOffset (OSCTXT* pctxt, TimeOffset* pvalue);

EXTERN void asn1Print_TimeOffset (const char* name, const TimeOffset* pvalue);

EXTERN int asn1PrtToStrm_TimeOffset (OSCTXT *pctxt, 
   const char* name, const TimeOffset* pvalue);

/**************************************************************/
/*                                                            */
/*  TractionControlStatus                                     */
/*                                                            */
/**************************************************************/
/*
TractionControlStatus ::= ENUMERATED { unavailable(0), off(1), on(2), engaged(3) }
*/
typedef enum {
   unavailable_26 = 0,
   off_5 = 1,
   on_5 = 2,
   engaged_2 = 3
} TractionControlStatus_Root;

typedef OSUINT32 TractionControlStatus;

EXTERN int asn1PE_TractionControlStatus (OSCTXT* pctxt, TractionControlStatus value);

EXTERN int asn1PD_TractionControlStatus (OSCTXT* pctxt, TractionControlStatus* pvalue);

EXTERN void asn1Print_TractionControlStatus 
   (const char* name, const TractionControlStatus* pvalue);

EXTERN int asn1PrtToStrm_TractionControlStatus (OSCTXT *pctxt, 
   const char* name, const TractionControlStatus* pvalue);

EXTERN const OSUTF8CHAR* TractionControlStatus_ToString (OSINT32 value);

EXTERN int TractionControlStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, TractionControlStatus* pvalue);

EXTERN int TractionControlStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, TractionControlStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerMass                                               */
/*                                                            */
/**************************************************************/
/*
TrailerMass ::= INTEGER (0..255)
    object mass with LSB steps of 500 kg (~1100 lbs)
    the value zero shall be uaed for an unknown mass value
    the value 255 shall be used any mass larger than 127,500kg
    a useful range of 0~127.5 metric tons. 

*/
typedef OSUINT8 TrailerMass;

EXTERN int asn1PE_TrailerMass (OSCTXT* pctxt, TrailerMass value);

EXTERN int asn1PD_TrailerMass (OSCTXT* pctxt, TrailerMass* pvalue);

EXTERN void asn1Print_TrailerMass (const char* name, const TrailerMass* pvalue);

EXTERN int asn1PrtToStrm_TrailerMass (OSCTXT *pctxt, 
   const char* name, const TrailerMass* pvalue);

/**************************************************************/
/*                                                            */
/*  TransitStatus                                             */
/*                                                            */
/**************************************************************/
/*
TransitStatus ::= BIT STRING  { none(0), anADAuse(1), aBikeLoad(2), doorOpen(3), occM(4), occL(5) } (SIZE (6))
*/
/* Named bit constants */

#define TransitStatus_none                            0
#define TransitStatus_anADAuse                        1
#define TransitStatus_aBikeLoad                       2
#define TransitStatus_doorOpen                        3
#define TransitStatus_occM                            4
#define TransitStatus_occL                            5

typedef struct TransitStatus {
   OSUINT32 numbits;
   OSOCTET data[1];
} TransitStatus;

EXTERN int asn1PE_TransitStatus (OSCTXT* pctxt, TransitStatus* pvalue);

EXTERN int asn1PD_TransitStatus (OSCTXT* pctxt, TransitStatus* pvalue);

EXTERN void asn1Print_TransitStatus (const char* name, const TransitStatus* pvalue);

EXTERN int asn1PrtToStrm_TransitStatus (OSCTXT *pctxt, 
   const char* name, const TransitStatus* pvalue);

EXTERN int asn1Init_TransitStatus (TransitStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  TransitVehicleOccupancy                                   */
/*                                                            */
/**************************************************************/
/*
TransitVehicleOccupancy ::= ENUMERATED { occupancyUnknown(0), occupancyEmpty(1), occupancyVeryLow(2), occupancyLow(3), occupancyMed(4), occupancyHigh(5), occupancyNearlyFull(6), occupancyFull(7) }
*/
typedef enum {
   occupancyUnknown = 0,
   occupancyEmpty = 1,
   occupancyVeryLow = 2,
   occupancyLow = 3,
   occupancyMed = 4,
   occupancyHigh = 5,
   occupancyNearlyFull = 6,
   occupancyFull = 7
} TransitVehicleOccupancy_Root;

typedef OSUINT32 TransitVehicleOccupancy;

EXTERN int asn1PE_TransitVehicleOccupancy (OSCTXT* pctxt, TransitVehicleOccupancy value);

EXTERN int asn1PD_TransitVehicleOccupancy (OSCTXT* pctxt, TransitVehicleOccupancy* pvalue);

EXTERN void asn1Print_TransitVehicleOccupancy 
   (const char* name, const TransitVehicleOccupancy* pvalue);

EXTERN int asn1PrtToStrm_TransitVehicleOccupancy (OSCTXT *pctxt, 
   const char* name, const TransitVehicleOccupancy* pvalue);

EXTERN const OSUTF8CHAR* TransitVehicleOccupancy_ToString (OSINT32 value);

EXTERN int TransitVehicleOccupancy_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, TransitVehicleOccupancy* pvalue);

EXTERN int TransitVehicleOccupancy_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, TransitVehicleOccupancy* pvalue);

/**************************************************************/
/*                                                            */
/*  TransitVehicleStatus                                      */
/*                                                            */
/**************************************************************/
/*
TransitVehicleStatus ::= BIT STRING  { loading(0), anADAuse(1), aBikeLoad(2), doorOpen(3), charging(4), atStopLine(5) } (SIZE (8))
*/
/* Named bit constants */

#define TransitVehicleStatus_loading                         0
#define TransitVehicleStatus_anADAuse_1                      1
#define TransitVehicleStatus_aBikeLoad_1                     2
#define TransitVehicleStatus_doorOpen_1                      3
#define TransitVehicleStatus_charging                        4
#define TransitVehicleStatus_atStopLine                      5

typedef struct TransitVehicleStatus {
   OSUINT32 numbits;
   OSOCTET data[1];
} TransitVehicleStatus;

EXTERN int asn1PE_TransitVehicleStatus (OSCTXT* pctxt, TransitVehicleStatus* pvalue);

EXTERN int asn1PD_TransitVehicleStatus (OSCTXT* pctxt, TransitVehicleStatus* pvalue);

EXTERN void asn1Print_TransitVehicleStatus 
   (const char* name, const TransitVehicleStatus* pvalue);

EXTERN int asn1PrtToStrm_TransitVehicleStatus (OSCTXT *pctxt, 
   const char* name, const TransitVehicleStatus* pvalue);

EXTERN int asn1Init_TransitVehicleStatus (TransitVehicleStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  TransmissionState                                         */
/*                                                            */
/**************************************************************/
/*
TransmissionState ::= ENUMERATED { neutral(0), park(1), forwardGears(2), reverseGears(3), reserved1(4), reserved2(5), reserved3(6), unavailable(7) }
*/
typedef enum {
   neutral = 0,
   park = 1,
   forwardGears = 2,
   reverseGears = 3,
   reserved1 = 4,
   reserved2 = 5,
   reserved3 = 6,
   unavailable_27 = 7
} TransmissionState_Root;

typedef OSUINT32 TransmissionState;

EXTERN int asn1PE_TransmissionState (OSCTXT* pctxt, TransmissionState value);

EXTERN int asn1PD_TransmissionState (OSCTXT* pctxt, TransmissionState* pvalue);

EXTERN void asn1Print_TransmissionState 
   (const char* name, const TransmissionState* pvalue);

EXTERN int asn1PrtToStrm_TransmissionState (OSCTXT *pctxt, 
   const char* name, const TransmissionState* pvalue);

EXTERN const OSUTF8CHAR* TransmissionState_ToString (OSINT32 value);

EXTERN int TransmissionState_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, TransmissionState* pvalue);

EXTERN int TransmissionState_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, TransmissionState* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInfoType                                          */
/*                                                            */
/**************************************************************/
/*
TravelerInfoType ::= ENUMERATED { unknown(0), advisory(1), roadSignage(2), commercialSignage(3), ... }
*/
typedef enum {
   unknown_4 = 0,
   advisory = 1,
   roadSignage = 2,
   commercialSignage = 3
} TravelerInfoType_Root;

typedef OSUINT32 TravelerInfoType;

EXTERN int asn1PE_TravelerInfoType (OSCTXT* pctxt, TravelerInfoType value);

EXTERN int asn1PD_TravelerInfoType (OSCTXT* pctxt, TravelerInfoType* pvalue);

EXTERN void asn1Print_TravelerInfoType 
   (const char* name, const TravelerInfoType* pvalue);

EXTERN int asn1PrtToStrm_TravelerInfoType (OSCTXT *pctxt, 
   const char* name, const TravelerInfoType* pvalue);

EXTERN const OSUTF8CHAR* TravelerInfoType_ToString (OSINT32 value);

EXTERN int TravelerInfoType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, TravelerInfoType* pvalue);

EXTERN int TravelerInfoType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, TravelerInfoType* pvalue);

/**************************************************************/
/*                                                            */
/*  UniqueMSGID                                               */
/*                                                            */
/**************************************************************/
/*
UniqueMSGID ::= OCTET STRING (SIZE (9))
*/
typedef struct EXTERN UniqueMSGID {
   OSUINT32 numocts;
   OSOCTET data[9];
} UniqueMSGID;

EXTERN int asn1PE_UniqueMSGID (OSCTXT* pctxt, UniqueMSGID* pvalue);

EXTERN int asn1PD_UniqueMSGID (OSCTXT* pctxt, UniqueMSGID* pvalue);

EXTERN void asn1Print_UniqueMSGID (const char* name, const UniqueMSGID* pvalue);

EXTERN int asn1PrtToStrm_UniqueMSGID (OSCTXT *pctxt, 
   const char* name, const UniqueMSGID* pvalue);

EXTERN int asn1Init_UniqueMSGID (UniqueMSGID* pvalue);

/**************************************************************/
/*                                                            */
/*  URL_Base                                                  */
/*                                                            */
/**************************************************************/
/*
URL-Base ::= IA5String (SIZE (1..45))
*/
typedef const char* URL_Base;

EXTERN int asn1PE_URL_Base (OSCTXT* pctxt, URL_Base value);

EXTERN int asn1PD_URL_Base (OSCTXT* pctxt, URL_Base* pvalue);

EXTERN void asn1Print_URL_Base (const char* name, const URL_Base pvalue);

EXTERN int asn1PrtToStrm_URL_Base (OSCTXT *pctxt, 
   const char* name, const URL_Base pvalue);

EXTERN void asn1Free_URL_Base (OSCTXT *pctxt, URL_Base pvalue);

/**************************************************************/
/*                                                            */
/*  URL_Link                                                  */
/*                                                            */
/**************************************************************/
/*
URL-Link ::= IA5String (SIZE (1..255))
*/
typedef const char* URL_Link;

EXTERN int asn1PE_URL_Link (OSCTXT* pctxt, URL_Link value);

EXTERN int asn1PD_URL_Link (OSCTXT* pctxt, URL_Link* pvalue);

EXTERN void asn1Print_URL_Link (const char* name, const URL_Link pvalue);

EXTERN int asn1PrtToStrm_URL_Link (OSCTXT *pctxt, 
   const char* name, const URL_Link pvalue);

EXTERN void asn1Free_URL_Link (OSCTXT *pctxt, URL_Link pvalue);

/**************************************************************/
/*                                                            */
/*  URL_Short                                                 */
/*                                                            */
/**************************************************************/
/*
URL-Short ::= IA5String (SIZE (1..15))
*/
typedef const char* URL_Short;

EXTERN int asn1PE_URL_Short (OSCTXT* pctxt, URL_Short value);

EXTERN int asn1PD_URL_Short (OSCTXT* pctxt, URL_Short* pvalue);

EXTERN void asn1Print_URL_Short (const char* name, const URL_Short pvalue);

EXTERN int asn1PrtToStrm_URL_Short (OSCTXT *pctxt, 
   const char* name, const URL_Short pvalue);

EXTERN void asn1Free_URL_Short (OSCTXT *pctxt, URL_Short pvalue);

/**************************************************************/
/*                                                            */
/*  UserSizeAndBehaviour                                      */
/*                                                            */
/**************************************************************/
/*
UserSizeAndBehaviour ::= BIT STRING  { unavailable(0), smallStature(1), largeStature(2), erraticMoving(3), slowMoving(4) } (SIZE (5, ...))
*/
/* Named bit constants */

#define UserSizeAndBehaviour_unavailable_6                   0
#define UserSizeAndBehaviour_smallStature                    1
#define UserSizeAndBehaviour_largeStature                    2
#define UserSizeAndBehaviour_erraticMoving                   3
#define UserSizeAndBehaviour_slowMoving                      4

typedef struct UserSizeAndBehaviour {
   OSUINT32 numbits;
   OSOCTET data[1];
   OSOCTET* extdata;
} UserSizeAndBehaviour;

EXTERN int asn1PE_UserSizeAndBehaviour (OSCTXT* pctxt, UserSizeAndBehaviour* pvalue);

EXTERN int asn1PD_UserSizeAndBehaviour (OSCTXT* pctxt, UserSizeAndBehaviour* pvalue);

EXTERN void asn1Print_UserSizeAndBehaviour 
   (const char* name, const UserSizeAndBehaviour* pvalue);

EXTERN int asn1PrtToStrm_UserSizeAndBehaviour (OSCTXT *pctxt, 
   const char* name, const UserSizeAndBehaviour* pvalue);

EXTERN int asn1Init_UserSizeAndBehaviour (UserSizeAndBehaviour* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleEventFlags                                         */
/*                                                            */
/**************************************************************/
/*
VehicleEventFlags ::= BIT STRING  { eventHazardLights(0), eventStopLineViolation(1), eventABSactivated(2), eventTractionControlLoss(3), eventStabilityControlactivated(4), eventHazardousMaterials(5), eventReserved1(6), eventHardBraking(7), eventLightsChanged(8), eventWipersChanged(9), eventFlatTire(10), eventDisabledVehicle(11), eventAirBagDeployment(12) } (SIZE (13, ...))
*/
/* Named bit constants */

#define VehicleEventFlags_eventHazardLights               0
#define VehicleEventFlags_eventStopLineViolation          1
#define VehicleEventFlags_eventABSactivated               2
#define VehicleEventFlags_eventTractionControlLoss        3
#define VehicleEventFlags_eventStabilityControlactivated  4
#define VehicleEventFlags_eventHazardousMaterials         5
#define VehicleEventFlags_eventReserved1                  6
#define VehicleEventFlags_eventHardBraking                7
#define VehicleEventFlags_eventLightsChanged              8
#define VehicleEventFlags_eventWipersChanged              9
#define VehicleEventFlags_eventFlatTire                   10
#define VehicleEventFlags_eventDisabledVehicle            11
#define VehicleEventFlags_eventAirBagDeployment           12

typedef struct VehicleEventFlags {
   OSUINT32 numbits;
   OSOCTET data[2];
   OSOCTET* extdata;
} VehicleEventFlags;

EXTERN int asn1PE_VehicleEventFlags (OSCTXT* pctxt, VehicleEventFlags* pvalue);

EXTERN int asn1PD_VehicleEventFlags (OSCTXT* pctxt, VehicleEventFlags* pvalue);

EXTERN void asn1Print_VehicleEventFlags 
   (const char* name, const VehicleEventFlags* pvalue);

EXTERN int asn1PrtToStrm_VehicleEventFlags (OSCTXT *pctxt, 
   const char* name, const VehicleEventFlags* pvalue);

EXTERN int asn1Init_VehicleEventFlags (VehicleEventFlags* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleHeight                                             */
/*                                                            */
/**************************************************************/
/*
VehicleHeight ::= INTEGER (0..127)
     the height of the vehicle
     LSB units of 5 cm, range to 6.35 meters

*/
typedef OSUINT8 VehicleHeight;

EXTERN int asn1PE_VehicleHeight (OSCTXT* pctxt, VehicleHeight value);

EXTERN int asn1PD_VehicleHeight (OSCTXT* pctxt, VehicleHeight* pvalue);

EXTERN void asn1Print_VehicleHeight (const char* name, const VehicleHeight* pvalue);

EXTERN int asn1PrtToStrm_VehicleHeight (OSCTXT *pctxt, 
   const char* name, const VehicleHeight* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleLength                                             */
/*                                                            */
/**************************************************************/
/*
VehicleLength ::= INTEGER (0..4095)
                                      LSB units of 1 cm with a range of >40 meters

*/
typedef OSUINT16 VehicleLength;

EXTERN int asn1PE_VehicleLength (OSCTXT* pctxt, VehicleLength value);

EXTERN int asn1PD_VehicleLength (OSCTXT* pctxt, VehicleLength* pvalue);

EXTERN void asn1Print_VehicleLength (const char* name, const VehicleLength* pvalue);

EXTERN int asn1PrtToStrm_VehicleLength (OSCTXT *pctxt, 
   const char* name, const VehicleLength* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleMass                                               */
/*                                                            */
/**************************************************************/
/*
VehicleMass ::= INTEGER (0..255)
     Values 000 to 080 in steps of 50kg
     Values 081 to 200 in steps of 500kg
     Values 201 to 253 in steps of 2000kg
     The Value 254 shall be used for weights above 170000 kg
     The Value 255 shall be used when the value is unknown or unavailable
     Encoded such that the values:
      81 represents   4500 kg
     181 represents  54500 kg
     253 represents 170000 kg

*/
typedef OSUINT8 VehicleMass;

EXTERN int asn1PE_VehicleMass (OSCTXT* pctxt, VehicleMass value);

EXTERN int asn1PD_VehicleMass (OSCTXT* pctxt, VehicleMass* pvalue);

EXTERN void asn1Print_VehicleMass (const char* name, const VehicleMass* pvalue);

EXTERN int asn1PrtToStrm_VehicleMass (OSCTXT *pctxt, 
   const char* name, const VehicleMass* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatusDeviceTypeTag                                */
/*                                                            */
/**************************************************************/
/*
VehicleStatusDeviceTypeTag ::= ENUMERATED { unknown(0), lights(1), wipers(2), brakes(3), stab(4), trac(5), abs(6), sunS(7), rainS(8), airTemp(9), steering(10), vertAccelThres(11), vertAccel(12), hozAccelLong(13), hozAccelLat(14), hozAccelCon(15), accel4way(16), confidenceSet(17), obDist(18), obDirect(19), yaw(20), yawRateCon(21), dateTime(22), fullPos(23), position2D(24), position3D(25), vehicle(26), speedHeadC(27), speedC(28), ... }
*/
typedef enum {
   unknown_5 = 0,
   lights = 1,
   wipers = 2,
   brakes = 3,
   stab = 4,
   trac = 5,
   abs_ = 6,
   sunS = 7,
   rainS = 8,
   airTemp = 9,
   steering = 10,
   vertAccelThres = 11,
   vertAccel = 12,
   hozAccelLong = 13,
   hozAccelLat = 14,
   hozAccelCon = 15,
   accel4way = 16,
   confidenceSet = 17,
   obDist = 18,
   obDirect = 19,
   yaw = 20,
   yawRateCon = 21,
   dateTime = 22,
   fullPos = 23,
   position2D = 24,
   position3D = 25,
   vehicle = 26,
   speedHeadC = 27,
   speedC = 28
} VehicleStatusDeviceTypeTag_Root;

typedef OSUINT32 VehicleStatusDeviceTypeTag;

EXTERN int asn1PE_VehicleStatusDeviceTypeTag (OSCTXT* pctxt, VehicleStatusDeviceTypeTag value);

EXTERN int asn1PD_VehicleStatusDeviceTypeTag (OSCTXT* pctxt, VehicleStatusDeviceTypeTag* pvalue);

EXTERN void asn1Print_VehicleStatusDeviceTypeTag 
   (const char* name, const VehicleStatusDeviceTypeTag* pvalue);

EXTERN int asn1PrtToStrm_VehicleStatusDeviceTypeTag (OSCTXT *pctxt, 
   const char* name, const VehicleStatusDeviceTypeTag* pvalue);

EXTERN const OSUTF8CHAR* VehicleStatusDeviceTypeTag_ToString (OSINT32 value);

EXTERN int VehicleStatusDeviceTypeTag_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, VehicleStatusDeviceTypeTag* pvalue);

EXTERN int VehicleStatusDeviceTypeTag_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      VehicleStatusDeviceTypeTag* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleType                                               */
/*                                                            */
/**************************************************************/
/*
VehicleType ::= ENUMERATED { none(0), unknown(1), special(2), moto(3), car(4), carOther(5), bus(6), axleCnt2(7), axleCnt3(8), axleCnt4(9), axleCnt4Trailer(10), axleCnt5Trailer(11), axleCnt6Trailer(12), axleCnt5MultiTrailer(13), axleCnt6MultiTrailer(14), axleCnt7MultiTrailer(15), ... }
*/
typedef enum {
   none_5 = 0,
   unknown_6 = 1,
   special = 2,
   moto = 3,
   car = 4,
   carOther = 5,
   bus = 6,
   axleCnt2 = 7,
   axleCnt3 = 8,
   axleCnt4 = 9,
   axleCnt4Trailer = 10,
   axleCnt5Trailer = 11,
   axleCnt6Trailer = 12,
   axleCnt5MultiTrailer = 13,
   axleCnt6MultiTrailer = 14,
   axleCnt7MultiTrailer = 15
} VehicleType_Root;

typedef OSUINT32 VehicleType;

EXTERN int asn1PE_VehicleType (OSCTXT* pctxt, VehicleType value);

EXTERN int asn1PD_VehicleType (OSCTXT* pctxt, VehicleType* pvalue);

EXTERN void asn1Print_VehicleType (const char* name, const VehicleType* pvalue);

EXTERN int asn1PrtToStrm_VehicleType (OSCTXT *pctxt, 
   const char* name, const VehicleType* pvalue);

EXTERN const OSUTF8CHAR* VehicleType_ToString (OSINT32 value);

EXTERN int VehicleType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, VehicleType* pvalue);

EXTERN int VehicleType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, VehicleType* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleWidth                                              */
/*                                                            */
/**************************************************************/
/*
VehicleWidth ::= INTEGER (0..1023)
                                    LSB units are 1 cm with a range of >10 meters

*/
typedef OSUINT16 VehicleWidth;

EXTERN int asn1PE_VehicleWidth (OSCTXT* pctxt, VehicleWidth value);

EXTERN int asn1PD_VehicleWidth (OSCTXT* pctxt, VehicleWidth* pvalue);

EXTERN void asn1Print_VehicleWidth (const char* name, const VehicleWidth* pvalue);

EXTERN int asn1PrtToStrm_VehicleWidth (OSCTXT *pctxt, 
   const char* name, const VehicleWidth* pvalue);

/**************************************************************/
/*                                                            */
/*  Velocity                                                  */
/*                                                            */
/**************************************************************/
/*
Velocity ::= INTEGER (0..8191)
                                Units of 0.02 m/s
     The value 8191 indicates that 
     velocity is unavailable

*/
typedef OSUINT16 Velocity;

EXTERN int asn1PE_Velocity (OSCTXT* pctxt, Velocity value);

EXTERN int asn1PD_Velocity (OSCTXT* pctxt, Velocity* pvalue);

EXTERN void asn1Print_Velocity (const char* name, const Velocity* pvalue);

EXTERN int asn1PrtToStrm_Velocity (OSCTXT *pctxt, 
   const char* name, const Velocity* pvalue);

/**************************************************************/
/*                                                            */
/*  VerticalAccelerationThreshold                             */
/*                                                            */
/**************************************************************/
/*
VerticalAccelerationThreshold ::= BIT STRING  { notEquipped(0), leftFront(1), leftRear(2), rightFront(3), rightRear(4) } (SIZE (5))
*/
/* Named bit constants */

#define VerticalAccelerationThreshold_notEquipped                     0
#define VerticalAccelerationThreshold_leftFront_1                     1
#define VerticalAccelerationThreshold_leftRear_1                      2
#define VerticalAccelerationThreshold_rightFront_1                    3
#define VerticalAccelerationThreshold_rightRear_1                     4

typedef struct VerticalAccelerationThreshold {
   OSUINT32 numbits;
   OSOCTET data[1];
} VerticalAccelerationThreshold;

EXTERN int asn1PE_VerticalAccelerationThreshold (OSCTXT* pctxt, VerticalAccelerationThreshold* pvalue);

EXTERN int asn1PD_VerticalAccelerationThreshold (OSCTXT* pctxt, VerticalAccelerationThreshold* pvalue);

EXTERN void asn1Print_VerticalAccelerationThreshold 
   (const char* name, const VerticalAccelerationThreshold* pvalue);

EXTERN int asn1PrtToStrm_VerticalAccelerationThreshold (OSCTXT *pctxt, 
   const char* name, const VerticalAccelerationThreshold* pvalue);

EXTERN int asn1Init_VerticalAccelerationThreshold (
   VerticalAccelerationThreshold* pvalue);

/**************************************************************/
/*                                                            */
/*  VerticalAcceleration                                      */
/*                                                            */
/**************************************************************/
/*
VerticalAcceleration ::= INTEGER (-127..127)
    LSB units of 0.02 G steps over -2.52 to +2.54 G
    The value +127 shall be used for ranges >= 2.54 G
    The value -126 shall be used for ranges <= 2.52 G
    The value -127 shall be used for unavailable

*/
typedef OSINT8 VerticalAcceleration;

EXTERN int asn1PE_VerticalAcceleration (OSCTXT* pctxt, VerticalAcceleration value);

EXTERN int asn1PD_VerticalAcceleration (OSCTXT* pctxt, VerticalAcceleration* pvalue);

EXTERN void asn1Print_VerticalAcceleration 
   (const char* name, const VerticalAcceleration* pvalue);

EXTERN int asn1PrtToStrm_VerticalAcceleration (OSCTXT *pctxt, 
   const char* name, const VerticalAcceleration* pvalue);

/**************************************************************/
/*                                                            */
/*  VertOffset_B07                                            */
/*                                                            */
/**************************************************************/
/*
VertOffset-B07 ::= INTEGER (-64..63)
    LSB units of of 10 cm
    with a range of +- 6.3 meters vertical 
    value  63 to be used for  63 or greater
    value -63 to be used for -63 or greater
    value -64 to be unavailable

*/
typedef OSINT8 VertOffset_B07;

EXTERN int asn1PE_VertOffset_B07 (OSCTXT* pctxt, VertOffset_B07 value);

EXTERN int asn1PD_VertOffset_B07 (OSCTXT* pctxt, VertOffset_B07* pvalue);

EXTERN void asn1Print_VertOffset_B07 (const char* name, const VertOffset_B07* pvalue);

EXTERN int asn1PrtToStrm_VertOffset_B07 (OSCTXT *pctxt, 
   const char* name, const VertOffset_B07* pvalue);

/**************************************************************/
/*                                                            */
/*  VertOffset_B08                                            */
/*                                                            */
/**************************************************************/
/*
VertOffset-B08 ::= INTEGER (-128..127)
    LSB units of of 10 cm
    with a range of +- 12.7 meters vertical
    value  127 to be used for  127 or greater
    value -127 to be used for -127 or greater
    value -128 to be unavailable

*/
typedef OSINT8 VertOffset_B08;

EXTERN int asn1PE_VertOffset_B08 (OSCTXT* pctxt, VertOffset_B08 value);

EXTERN int asn1PD_VertOffset_B08 (OSCTXT* pctxt, VertOffset_B08* pvalue);

EXTERN void asn1Print_VertOffset_B08 (const char* name, const VertOffset_B08* pvalue);

EXTERN int asn1PrtToStrm_VertOffset_B08 (OSCTXT *pctxt, 
   const char* name, const VertOffset_B08* pvalue);

/**************************************************************/
/*                                                            */
/*  VertOffset_B09                                            */
/*                                                            */
/**************************************************************/
/*
VertOffset-B09 ::= INTEGER (-256..255)
    LSB units of of 10 cm
    with a range of +- 25.5 meters vertical
    value  255 to be used for  255 or greater
    value -255 to be used for -255 or greater
    value -256 to be unavailable

*/
typedef OSINT16 VertOffset_B09;

EXTERN int asn1PE_VertOffset_B09 (OSCTXT* pctxt, VertOffset_B09 value);

EXTERN int asn1PD_VertOffset_B09 (OSCTXT* pctxt, VertOffset_B09* pvalue);

EXTERN void asn1Print_VertOffset_B09 (const char* name, const VertOffset_B09* pvalue);

EXTERN int asn1PrtToStrm_VertOffset_B09 (OSCTXT *pctxt, 
   const char* name, const VertOffset_B09* pvalue);

/**************************************************************/
/*                                                            */
/*  VertOffset_B10                                            */
/*                                                            */
/**************************************************************/
/*
VertOffset-B10 ::= INTEGER (-512..511)
    LSB units of of 10 cm
    with a range of +- 51.1 meters vertical
    value  511 to be used for  511 or greater
    value -511 to be used for -511 or greater
    value -512 to be unavailable

*/
typedef OSINT16 VertOffset_B10;

EXTERN int asn1PE_VertOffset_B10 (OSCTXT* pctxt, VertOffset_B10 value);

EXTERN int asn1PD_VertOffset_B10 (OSCTXT* pctxt, VertOffset_B10* pvalue);

EXTERN void asn1Print_VertOffset_B10 (const char* name, const VertOffset_B10* pvalue);

EXTERN int asn1PrtToStrm_VertOffset_B10 (OSCTXT *pctxt, 
   const char* name, const VertOffset_B10* pvalue);

/**************************************************************/
/*                                                            */
/*  VertOffset_B11                                            */
/*                                                            */
/**************************************************************/
/*
VertOffset-B11 ::= INTEGER (-1024..1023)
    LSB units of of 10 cm
    with a range of +- 102.3 meters vertical
    value  1023 to be used for  1023 or greater
    value -1023 to be used for -1023 or greater
    value -1024 to be unavailable

*/
typedef OSINT16 VertOffset_B11;

EXTERN int asn1PE_VertOffset_B11 (OSCTXT* pctxt, VertOffset_B11 value);

EXTERN int asn1PD_VertOffset_B11 (OSCTXT* pctxt, VertOffset_B11* pvalue);

EXTERN void asn1Print_VertOffset_B11 (const char* name, const VertOffset_B11* pvalue);

EXTERN int asn1PrtToStrm_VertOffset_B11 (OSCTXT *pctxt, 
   const char* name, const VertOffset_B11* pvalue);

/**************************************************************/
/*                                                            */
/*  VertOffset_B12                                            */
/*                                                            */
/**************************************************************/
/*
VertOffset-B12 ::= INTEGER (-2048..2047)
    LSB units of of 10 cm
    with a range of +- 204.7 meters vertical
    value  2047 to be used for  2047 or greater
    value -2047 to be used for -2047 or greater
    value -2048 to be unavailable

*/
typedef OSINT16 VertOffset_B12;

EXTERN int asn1PE_VertOffset_B12 (OSCTXT* pctxt, VertOffset_B12 value);

EXTERN int asn1PD_VertOffset_B12 (OSCTXT* pctxt, VertOffset_B12* pvalue);

EXTERN void asn1Print_VertOffset_B12 (const char* name, const VertOffset_B12* pvalue);

EXTERN int asn1PrtToStrm_VertOffset_B12 (OSCTXT *pctxt, 
   const char* name, const VertOffset_B12* pvalue);

/**************************************************************/
/*                                                            */
/*  VINstring                                                 */
/*                                                            */
/**************************************************************/
/*
VINstring ::= OCTET STRING (SIZE (1..17))
    A legal VIN or a shorter value 
    to provide an ident of the vehicle
    If a VIN is sent, then IA5 encoding 
    shall be used

*/
typedef struct EXTERN VINstring {
   OSUINT32 numocts;
   OSOCTET data[17];
} VINstring;

EXTERN int asn1PE_VINstring (OSCTXT* pctxt, VINstring* pvalue);

EXTERN int asn1PD_VINstring (OSCTXT* pctxt, VINstring* pvalue);

EXTERN void asn1Print_VINstring (const char* name, const VINstring* pvalue);

EXTERN int asn1PrtToStrm_VINstring (OSCTXT *pctxt, 
   const char* name, const VINstring* pvalue);

EXTERN int asn1Init_VINstring (VINstring* pvalue);

/**************************************************************/
/*                                                            */
/*  WaitOnStopline                                            */
/*                                                            */
/**************************************************************/
/*
WaitOnStopline ::= BOOLEAN
                            
          True or False
          If "true", the vehicles on this specific connecting 
          maneuver have to stop on the stop-line
          and not to enter the collision area

*/
typedef OSBOOL WaitOnStopline;

EXTERN int asn1PE_WaitOnStopline (OSCTXT* pctxt, WaitOnStopline value);

EXTERN int asn1PD_WaitOnStopline (OSCTXT* pctxt, WaitOnStopline* pvalue);

EXTERN void asn1Print_WaitOnStopline (const char* name, const WaitOnStopline* pvalue);

EXTERN int asn1PrtToStrm_WaitOnStopline (OSCTXT *pctxt, 
   const char* name, const WaitOnStopline* pvalue);

/**************************************************************/
/*                                                            */
/*  WiperRate                                                 */
/*                                                            */
/**************************************************************/
/*
WiperRate ::= INTEGER (0..127)
                                units of sweeps per minute

*/
typedef OSUINT8 WiperRate;

EXTERN int asn1PE_WiperRate (OSCTXT* pctxt, WiperRate value);

EXTERN int asn1PD_WiperRate (OSCTXT* pctxt, WiperRate* pvalue);

EXTERN void asn1Print_WiperRate (const char* name, const WiperRate* pvalue);

EXTERN int asn1PrtToStrm_WiperRate (OSCTXT *pctxt, 
   const char* name, const WiperRate* pvalue);

/**************************************************************/
/*                                                            */
/*  WiperStatus                                               */
/*                                                            */
/**************************************************************/
/*
WiperStatus ::= ENUMERATED { unavailable(0), off(1), intermittent(2), low(3), high(4), washerInUse(5), automaticPresent(6), ... }
*/
typedef enum {
   unavailable_28 = 0,
   off_6 = 1,
   intermittent = 2,
   low = 3,
   high = 4,
   washerInUse = 5,
   automaticPresent = 6
} WiperStatus_Root;

typedef OSUINT32 WiperStatus;

EXTERN int asn1PE_WiperStatus (OSCTXT* pctxt, WiperStatus value);

EXTERN int asn1PD_WiperStatus (OSCTXT* pctxt, WiperStatus* pvalue);

EXTERN void asn1Print_WiperStatus (const char* name, const WiperStatus* pvalue);

EXTERN int asn1PrtToStrm_WiperStatus (OSCTXT *pctxt, 
   const char* name, const WiperStatus* pvalue);

EXTERN const OSUTF8CHAR* WiperStatus_ToString (OSINT32 value);

EXTERN int WiperStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, WiperStatus* pvalue);

EXTERN int WiperStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, WiperStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  YawRateConfidence                                         */
/*                                                            */
/**************************************************************/
/*
YawRateConfidence ::= ENUMERATED { unavailable(0), degSec-100-00(1), degSec-010-00(2), degSec-005-00(3), degSec-001-00(4), degSec-000-10(5), degSec-000-05(6), degSec-000-01(7) }
    Encoded as a 3 bit value

*/
typedef enum {
   unavailable_29 = 0,
   degSec_100_00 = 1,
   degSec_010_00 = 2,
   degSec_005_00 = 3,
   degSec_001_00 = 4,
   degSec_000_10 = 5,
   degSec_000_05 = 6,
   degSec_000_01 = 7
} YawRateConfidence_Root;

typedef OSUINT32 YawRateConfidence;

EXTERN int asn1PE_YawRateConfidence (OSCTXT* pctxt, YawRateConfidence value);

EXTERN int asn1PD_YawRateConfidence (OSCTXT* pctxt, YawRateConfidence* pvalue);

EXTERN void asn1Print_YawRateConfidence 
   (const char* name, const YawRateConfidence* pvalue);

EXTERN int asn1PrtToStrm_YawRateConfidence (OSCTXT *pctxt, 
   const char* name, const YawRateConfidence* pvalue);

EXTERN const OSUTF8CHAR* YawRateConfidence_ToString (OSINT32 value);

EXTERN int YawRateConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, YawRateConfidence* pvalue);

EXTERN int YawRateConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, YawRateConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  YawRate                                                   */
/*                                                            */
/**************************************************************/
/*
YawRate ::= INTEGER (-32767..32767)
    LSB units of 0.01 degrees per second (signed)

*/
typedef OSINT16 YawRate;

EXTERN int asn1PE_YawRate (OSCTXT* pctxt, YawRate value);

EXTERN int asn1PD_YawRate (OSCTXT* pctxt, YawRate* pvalue);

EXTERN void asn1Print_YawRate (const char* name, const YawRate* pvalue);

EXTERN int asn1PrtToStrm_YawRate (OSCTXT *pctxt, 
   const char* name, const YawRate* pvalue);

/**************************************************************/
/*                                                            */
/*  ZoneLength                                                */
/*                                                            */
/**************************************************************/
/*
ZoneLength ::= INTEGER (0..10000)
     Unit = 1 meter, 0 = unknown, 
     The value 10000 to be used for Distances >=10000 m
     (e.g. from known point to another point along a 
     known path, often against traffic flow direction 
     when used for measuring queues)

*/
typedef OSUINT16 ZoneLength;

EXTERN int asn1PE_ZoneLength (OSCTXT* pctxt, ZoneLength value);

EXTERN int asn1PD_ZoneLength (OSCTXT* pctxt, ZoneLength* pvalue);

EXTERN void asn1Print_ZoneLength (const char* name, const ZoneLength* pvalue);

EXTERN int asn1PrtToStrm_ZoneLength (OSCTXT *pctxt, 
   const char* name, const ZoneLength* pvalue);

/**************************************************************/
/*                                                            */
/*  Zoom                                                      */
/*                                                            */
/**************************************************************/
/*
Zoom ::= INTEGER (0..15)
    A zoom scale applied in units of 2^N
    A value of 0 is a 1:1 zoom (no zoom)
    A value of 1 is a 2:1 zoom
    A value of 2 is a 4:1 zoom, etc.
    The zoom value is applied to one or more offsets
    increase the span or range while reducing its precision
    The absence of a zoom, any offset element in a data 
    frame implies a 1:1 zoom

*/
typedef OSUINT8 Zoom;

EXTERN int asn1PE_Zoom (OSCTXT* pctxt, Zoom value);

EXTERN int asn1PD_Zoom (OSCTXT* pctxt, Zoom* pvalue);

EXTERN void asn1Print_Zoom (const char* name, const Zoom* pvalue);

EXTERN int asn1PrtToStrm_Zoom (OSCTXT *pctxt, const char* name, const Zoom* pvalue);

/**************************************************************/
/*                                                            */
/*  MessageFrame                                              */
/*                                                            */
/**************************************************************/
/*
 -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 
 Start of entries from table Messages...
 This table typically contains message entries.
 -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 
MessageFrame ::= SEQUENCE {
   messageId [0] MESSAGE-ID-AND-TYPE.&id ({MessageTypes}),
   value [1] MESSAGE-ID-AND-TYPE.&Type ({MessageTypes}{@.messageId}),
   ...
}
*/
typedef struct EXTERN MessageFrame {
   DSRCmsgID messageId;
   ASN1OpenType value;
   OSRTDList extElem1;
} MessageFrame;

EXTERN int asn1PE_MessageFrame (OSCTXT* pctxt, MessageFrame* pvalue);

EXTERN int asn1PD_MessageFrame (OSCTXT* pctxt, MessageFrame* pvalue);

EXTERN void asn1Print_MessageFrame (const char* name, const MessageFrame* pvalue);

EXTERN int asn1PrtToStrm_MessageFrame (OSCTXT *pctxt, 
   const char* name, const MessageFrame* pvalue);

EXTERN int asn1Init_MessageFrame (MessageFrame* pvalue);

EXTERN void asn1Free_MessageFrame (OSCTXT *pctxt, MessageFrame* pvalue);

/**************************************************************/
/*                                                            */
/*  PositionalAccuracy                                        */
/*                                                            */
/**************************************************************/
/*
PositionalAccuracy ::= SEQUENCE {
   -- NMEA-183 values expressed in strict ASN form
   semiMajor [0] SemiMajorAxisAccuracy,
   semiMinor [1] SemiMinorAxisAccuracy,
   orientation [2] SemiMajorAxisOrientation
}
*/
typedef struct EXTERN PositionalAccuracy {
   SemiMajorAxisAccuracy semiMajor;
   SemiMinorAxisAccuracy semiMinor;
   SemiMajorAxisOrientation orientation;
} PositionalAccuracy;

EXTERN int asn1PE_PositionalAccuracy (OSCTXT* pctxt, PositionalAccuracy* pvalue);

EXTERN int asn1PD_PositionalAccuracy (OSCTXT* pctxt, PositionalAccuracy* pvalue);

EXTERN void asn1Print_PositionalAccuracy 
   (const char* name, const PositionalAccuracy* pvalue);

EXTERN int asn1PrtToStrm_PositionalAccuracy (OSCTXT *pctxt, 
   const char* name, const PositionalAccuracy* pvalue);

/**************************************************************/
/*                                                            */
/*  AccelerationSet4Way                                       */
/*                                                            */
/**************************************************************/
/*
 -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 
 Start of entries from table Data_Frames...
 This table typically contains data frame entries.
 -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 
AccelerationSet4Way ::= SEQUENCE {
   long [0] Acceleration, -- Along the Vehicle Longitudinal axis
   lat [1] Acceleration, -- Along the Vehicle Lateral axis
   vert [2] VerticalAcceleration, -- Along the Vehicle Vertical axis
   yaw [3] YawRate
}
*/
typedef struct EXTERN AccelerationSet4Way {
   Acceleration long_;
   Acceleration lat;
   VerticalAcceleration vert;
   YawRate yaw;
} AccelerationSet4Way;

EXTERN int asn1PE_AccelerationSet4Way (OSCTXT* pctxt, AccelerationSet4Way* pvalue);

EXTERN int asn1PD_AccelerationSet4Way (OSCTXT* pctxt, AccelerationSet4Way* pvalue);

EXTERN void asn1Print_AccelerationSet4Way 
   (const char* name, const AccelerationSet4Way* pvalue);

EXTERN int asn1PrtToStrm_AccelerationSet4Way (OSCTXT *pctxt, 
   const char* name, const AccelerationSet4Way* pvalue);

/**************************************************************/
/*                                                            */
/*  BrakeSystemStatus                                         */
/*                                                            */
/**************************************************************/
/*
BrakeSystemStatus ::= SEQUENCE {
   wheelBrakes [0] BrakeAppliedStatus,
   traction [1] TractionControlStatus,
   abs [2] AntiLockBrakeStatus,
   scs [3] StabilityControlStatus,
   brakeBoost [4] BrakeBoostApplied,
   auxBrakes [5] AuxiliaryBrakeStatus
}
*/
typedef struct EXTERN BrakeSystemStatus {
   BrakeAppliedStatus wheelBrakes;
   TractionControlStatus traction;
   AntiLockBrakeStatus abs_;
   StabilityControlStatus scs;
   BrakeBoostApplied brakeBoost;
   AuxiliaryBrakeStatus auxBrakes;
} BrakeSystemStatus;

EXTERN int asn1PE_BrakeSystemStatus (OSCTXT* pctxt, BrakeSystemStatus* pvalue);

EXTERN int asn1PD_BrakeSystemStatus (OSCTXT* pctxt, BrakeSystemStatus* pvalue);

EXTERN void asn1Print_BrakeSystemStatus 
   (const char* name, const BrakeSystemStatus* pvalue);

EXTERN int asn1PrtToStrm_BrakeSystemStatus (OSCTXT *pctxt, 
   const char* name, const BrakeSystemStatus* pvalue);

EXTERN int asn1Init_BrakeSystemStatus (BrakeSystemStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleSize                                               */
/*                                                            */
/**************************************************************/
/*
VehicleSize ::= SEQUENCE {
   width [0] VehicleWidth,
   length [1] VehicleLength
}
*/
typedef struct EXTERN VehicleSize {
   VehicleWidth width;
   VehicleLength length;
} VehicleSize;

EXTERN int asn1PE_VehicleSize (OSCTXT* pctxt, VehicleSize* pvalue);

EXTERN int asn1PD_VehicleSize (OSCTXT* pctxt, VehicleSize* pvalue);

EXTERN void asn1Print_VehicleSize (const char* name, const VehicleSize* pvalue);

EXTERN int asn1PrtToStrm_VehicleSize (OSCTXT *pctxt, 
   const char* name, const VehicleSize* pvalue);

/**************************************************************/
/*                                                            */
/*  BSMcoreData                                               */
/*                                                            */
/**************************************************************/
/*
BSMcoreData ::= SEQUENCE {
   msgCnt [0] MsgCount,
   id [1] TemporaryID,
   secMark [2] DSecond,
   lat [3] Latitude,
   long [4] Longitude,
   elev [5] Elevation,
   accuracy [6] PositionalAccuracy,
   transmission [7] TransmissionState,
   speed [8] Speed,
   heading [9] Heading,
   angle [10] SteeringWheelAngle,
   accelSet [11] AccelerationSet4Way,
   brakes [12] BrakeSystemStatus,
   size [13] VehicleSize
}
*/
typedef struct EXTERN BSMcoreData {
   MsgCount msgCnt;
   TemporaryID id;
   DSecond secMark;
   Latitude lat;
   Longitude long_;
   Elevation elev;
   PositionalAccuracy accuracy;
   TransmissionState transmission;
   Speed speed;
   Heading heading;
   SteeringWheelAngle angle;
   AccelerationSet4Way accelSet;
   BrakeSystemStatus brakes;
   VehicleSize size;
} BSMcoreData;

EXTERN int asn1PE_BSMcoreData (OSCTXT* pctxt, BSMcoreData* pvalue);

EXTERN int asn1PD_BSMcoreData (OSCTXT* pctxt, BSMcoreData* pvalue);

EXTERN void asn1Print_BSMcoreData (const char* name, const BSMcoreData* pvalue);

EXTERN int asn1PrtToStrm_BSMcoreData (OSCTXT *pctxt, 
   const char* name, const BSMcoreData* pvalue);

EXTERN int asn1Init_BSMcoreData (BSMcoreData* pvalue);

/**************************************************************/
/*                                                            */
/*  PartIIcontent                                             */
/*                                                            */
/**************************************************************/
/*
PartIIcontent ::= SEQUENCE {
   partII-Id [0] PARTII-EXT-ID-AND-TYPE.&id ({Set}),
   partII-Value [1] PARTII-EXT-ID-AND-TYPE.&Type ({Set}{@partII-Id})
}
*/
typedef struct EXTERN PartIIcontent {
   PartII_Id partII_Id;
   ASN1OpenType partII_Value;
} PartIIcontent;

EXTERN int asn1PE_PartIIcontent (OSCTXT* pctxt, PartIIcontent* pvalue);

EXTERN int asn1PD_PartIIcontent (OSCTXT* pctxt, PartIIcontent* pvalue);

EXTERN void asn1Print_PartIIcontent (const char* name, const PartIIcontent* pvalue);

EXTERN int asn1PrtToStrm_PartIIcontent (OSCTXT *pctxt, 
   const char* name, const PartIIcontent* pvalue);

EXTERN int asn1Init_PartIIcontent (PartIIcontent* pvalue);

EXTERN void asn1Free_PartIIcontent (OSCTXT *pctxt, PartIIcontent* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicSafetyMessage_partII                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'BasicSafetyMessage'
*/
/* List of PartIIcontent */
typedef OSRTDList BasicSafetyMessage_partII;

EXTERN int asn1PE_BasicSafetyMessage_partII (OSCTXT* pctxt, BasicSafetyMessage_partII* pvalue);

EXTERN int asn1PD_BasicSafetyMessage_partII (OSCTXT* pctxt, BasicSafetyMessage_partII* pvalue);

EXTERN void asn1Print_BasicSafetyMessage_partII 
   (const char* name, const BasicSafetyMessage_partII* pvalue);

EXTERN int asn1PrtToStrm_BasicSafetyMessage_partII (OSCTXT *pctxt, 
   const char* name, const BasicSafetyMessage_partII* pvalue);

EXTERN int asn1Init_BasicSafetyMessage_partII (BasicSafetyMessage_partII* pvalue);

EXTERN void asn1Free_BasicSafetyMessage_partII (OSCTXT *pctxt, 
   BasicSafetyMessage_partII* pvalue);

/**************************************************************/
/*                                                            */
/*  RegionalExtension                                         */
/*                                                            */
/**************************************************************/
/*
RegionalExtension ::= SEQUENCE {
   regionId [0] REG-EXT-ID-AND-TYPE.&id ({Set}),
   regExtValue [1] REG-EXT-ID-AND-TYPE.&Type ({Set}{@regionId})
}
*/
typedef struct EXTERN RegionalExtension {
   RegionId regionId;
   ASN1OpenType regExtValue;
} RegionalExtension;

EXTERN int asn1PE_RegionalExtension (OSCTXT* pctxt, RegionalExtension* pvalue);

EXTERN int asn1PD_RegionalExtension (OSCTXT* pctxt, RegionalExtension* pvalue);

EXTERN void asn1Print_RegionalExtension 
   (const char* name, const RegionalExtension* pvalue);

EXTERN int asn1PrtToStrm_RegionalExtension (OSCTXT *pctxt, 
   const char* name, const RegionalExtension* pvalue);

EXTERN int asn1Init_RegionalExtension (RegionalExtension* pvalue);

EXTERN void asn1Free_RegionalExtension (OSCTXT *pctxt, RegionalExtension* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicSafetyMessage_regional                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'BasicSafetyMessage'
*/
/* List of RegionalExtension */
typedef OSRTDList BasicSafetyMessage_regional;

EXTERN int asn1PE_BasicSafetyMessage_regional (OSCTXT* pctxt, BasicSafetyMessage_regional* pvalue);

EXTERN int asn1PD_BasicSafetyMessage_regional (OSCTXT* pctxt, BasicSafetyMessage_regional* pvalue);

EXTERN void asn1Print_BasicSafetyMessage_regional 
   (const char* name, const BasicSafetyMessage_regional* pvalue);

EXTERN int asn1PrtToStrm_BasicSafetyMessage_regional (OSCTXT *pctxt, 
   const char* name, const BasicSafetyMessage_regional* pvalue);

EXTERN int asn1Init_BasicSafetyMessage_regional (BasicSafetyMessage_regional* pvalue);

EXTERN void asn1Free_BasicSafetyMessage_regional (OSCTXT *pctxt, 
   BasicSafetyMessage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  BasicSafetyMessage                                        */
/*                                                            */
/**************************************************************/
/*
BasicSafetyMessage ::= SEQUENCE {
   -- Part I, Sent at all times with each message
   coreData [0] BSMcoreData,
   -- Part II Content
   partII [1] SEQUENCE (SIZE (1..8)) OF PartIIcontent OPTIONAL,
   regional [2] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN BasicSafetyMessage {
   struct {
      unsigned partIIPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   BSMcoreData coreData;
   BasicSafetyMessage_partII partII;
   BasicSafetyMessage_regional regional;
   OSRTDList extElem1;
} BasicSafetyMessage;

EXTERN int asn1PE_BasicSafetyMessage (OSCTXT* pctxt, BasicSafetyMessage* pvalue);

EXTERN int asn1PD_BasicSafetyMessage (OSCTXT* pctxt, BasicSafetyMessage* pvalue);

EXTERN void asn1Print_BasicSafetyMessage 
   (const char* name, const BasicSafetyMessage* pvalue);

EXTERN int asn1PrtToStrm_BasicSafetyMessage (OSCTXT *pctxt, 
   const char* name, const BasicSafetyMessage* pvalue);

EXTERN int asn1Init_BasicSafetyMessage (BasicSafetyMessage* pvalue);

EXTERN void asn1Free_BasicSafetyMessage (OSCTXT *pctxt, BasicSafetyMessage* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestedItemList                                         */
/*                                                            */
/**************************************************************/
/*
RequestedItemList ::= SEQUENCE (SIZE (1..32)) OF RequestedItem
*/
typedef struct EXTERN RequestedItemList {
   OSSIZE n;
   RequestedItem elem[32];
} RequestedItemList;

EXTERN int asn1PE_RequestedItemList (OSCTXT* pctxt, RequestedItemList* pvalue);

EXTERN int asn1PD_RequestedItemList (OSCTXT* pctxt, RequestedItemList* pvalue);

EXTERN void asn1Print_RequestedItemList 
   (const char* name, const RequestedItemList* pvalue);

EXTERN int asn1PrtToStrm_RequestedItemList (OSCTXT *pctxt, 
   const char* name, const RequestedItemList* pvalue);

EXTERN int asn1Init_RequestedItemList (RequestedItemList* pvalue);

/**************************************************************/
/*                                                            */
/*  CommonSafetyRequest_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'CommonSafetyRequest'
*/
/* List of RegionalExtension */
typedef OSRTDList CommonSafetyRequest_regional;

EXTERN int asn1PE_CommonSafetyRequest_regional (OSCTXT* pctxt, CommonSafetyRequest_regional* pvalue);

EXTERN int asn1PD_CommonSafetyRequest_regional (OSCTXT* pctxt, CommonSafetyRequest_regional* pvalue);

EXTERN void asn1Print_CommonSafetyRequest_regional 
   (const char* name, const CommonSafetyRequest_regional* pvalue);

EXTERN int asn1PrtToStrm_CommonSafetyRequest_regional (OSCTXT *pctxt, 
   const char* name, const CommonSafetyRequest_regional* pvalue);

EXTERN int asn1Init_CommonSafetyRequest_regional (
   CommonSafetyRequest_regional* pvalue);

EXTERN void asn1Free_CommonSafetyRequest_regional (OSCTXT *pctxt, 
   CommonSafetyRequest_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  CommonSafetyRequest                                       */
/*                                                            */
/**************************************************************/
/*
CommonSafetyRequest ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   msgCnt [1] MsgCount OPTIONAL,
   id [2] TemporaryID OPTIONAL, -- targeted remote device              
   requests [3] RequestedItemList,
   -- Note: Above no longer uses the same request as probe management
   regional [4] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN CommonSafetyRequest {
   struct {
      unsigned timeStampPresent : 1;
      unsigned msgCntPresent : 1;
      unsigned idPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MinuteOfTheYear timeStamp;
   MsgCount msgCnt;
   TemporaryID id;
   RequestedItemList requests;
   CommonSafetyRequest_regional regional;
   OSRTDList extElem1;
} CommonSafetyRequest;

EXTERN int asn1PE_CommonSafetyRequest (OSCTXT* pctxt, CommonSafetyRequest* pvalue);

EXTERN int asn1PD_CommonSafetyRequest (OSCTXT* pctxt, CommonSafetyRequest* pvalue);

EXTERN void asn1Print_CommonSafetyRequest 
   (const char* name, const CommonSafetyRequest* pvalue);

EXTERN int asn1PrtToStrm_CommonSafetyRequest (OSCTXT *pctxt, 
   const char* name, const CommonSafetyRequest* pvalue);

EXTERN int asn1Init_CommonSafetyRequest (CommonSafetyRequest* pvalue);

EXTERN void asn1Free_CommonSafetyRequest (OSCTXT *pctxt, CommonSafetyRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSideAlert_description                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RoadSideAlert'
*/
typedef struct EXTERN RoadSideAlert_description {
   OSSIZE n;
   ITIScodes elem[8];
} RoadSideAlert_description;

EXTERN int asn1PE_RoadSideAlert_description (OSCTXT* pctxt, RoadSideAlert_description* pvalue);

EXTERN int asn1PD_RoadSideAlert_description (OSCTXT* pctxt, RoadSideAlert_description* pvalue);

EXTERN void asn1Print_RoadSideAlert_description 
   (const char* name, const RoadSideAlert_description* pvalue);

EXTERN int asn1PrtToStrm_RoadSideAlert_description (OSCTXT *pctxt, 
   const char* name, const RoadSideAlert_description* pvalue);

EXTERN int asn1Init_RoadSideAlert_description (RoadSideAlert_description* pvalue);

/**************************************************************/
/*                                                            */
/*  DDateTime                                                 */
/*                                                            */
/**************************************************************/
/*
DDateTime ::= SEQUENCE {
   year [0] DYear OPTIONAL,
   month [1] DMonth OPTIONAL,
   day [2] DDay OPTIONAL,
   hour [3] DHour OPTIONAL,
   minute [4] DMinute OPTIONAL,
   second [5] DSecond OPTIONAL,
   offset [6] DOffset OPTIONAL -- time zone
}
*/
typedef struct EXTERN DDateTime {
   struct {
      unsigned yearPresent : 1;
      unsigned monthPresent : 1;
      unsigned dayPresent : 1;
      unsigned hourPresent : 1;
      unsigned minutePresent : 1;
      unsigned secondPresent : 1;
      unsigned offsetPresent : 1;
   } m;
   DYear year;
   DMonth month;
   DDay day;
   DHour hour;
   DMinute minute;
   DSecond second;
   DOffset offset;
} DDateTime;

EXTERN int asn1PE_DDateTime (OSCTXT* pctxt, DDateTime* pvalue);

EXTERN int asn1PD_DDateTime (OSCTXT* pctxt, DDateTime* pvalue);

EXTERN void asn1Print_DDateTime (const char* name, const DDateTime* pvalue);

EXTERN int asn1PrtToStrm_DDateTime (OSCTXT *pctxt, 
   const char* name, const DDateTime* pvalue);

EXTERN int asn1Init_DDateTime (DDateTime* pvalue);

/**************************************************************/
/*                                                            */
/*  TransmissionAndSpeed                                      */
/*                                                            */
/**************************************************************/
/*
TransmissionAndSpeed ::= SEQUENCE {
   transmisson [0] TransmissionState,
   speed [1] Velocity
}
*/
typedef struct EXTERN TransmissionAndSpeed {
   TransmissionState transmisson;
   Velocity speed;
} TransmissionAndSpeed;

EXTERN int asn1PE_TransmissionAndSpeed (OSCTXT* pctxt, TransmissionAndSpeed* pvalue);

EXTERN int asn1PD_TransmissionAndSpeed (OSCTXT* pctxt, TransmissionAndSpeed* pvalue);

EXTERN void asn1Print_TransmissionAndSpeed 
   (const char* name, const TransmissionAndSpeed* pvalue);

EXTERN int asn1PrtToStrm_TransmissionAndSpeed (OSCTXT *pctxt, 
   const char* name, const TransmissionAndSpeed* pvalue);

/**************************************************************/
/*                                                            */
/*  PositionConfidenceSet                                     */
/*                                                            */
/**************************************************************/
/*
PositionConfidenceSet ::= SEQUENCE {
   pos [0] PositionConfidence, -- for both horizontal directions
   elevation [1] ElevationConfidence
}
*/
typedef struct EXTERN PositionConfidenceSet {
   PositionConfidence pos;
   ElevationConfidence elevation;
} PositionConfidenceSet;

EXTERN int asn1PE_PositionConfidenceSet (OSCTXT* pctxt, PositionConfidenceSet* pvalue);

EXTERN int asn1PD_PositionConfidenceSet (OSCTXT* pctxt, PositionConfidenceSet* pvalue);

EXTERN void asn1Print_PositionConfidenceSet 
   (const char* name, const PositionConfidenceSet* pvalue);

EXTERN int asn1PrtToStrm_PositionConfidenceSet (OSCTXT *pctxt, 
   const char* name, const PositionConfidenceSet* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedandHeadingandThrottleConfidence                      */
/*                                                            */
/**************************************************************/
/*
SpeedandHeadingandThrottleConfidence ::= SEQUENCE {
   heading [0] HeadingConfidence,
   speed [1] SpeedConfidence,
   throttle [2] ThrottleConfidence
}
*/
typedef struct EXTERN SpeedandHeadingandThrottleConfidence {
   HeadingConfidence heading;
   SpeedConfidence speed;
   ThrottleConfidence throttle;
} SpeedandHeadingandThrottleConfidence;

EXTERN int asn1PE_SpeedandHeadingandThrottleConfidence (OSCTXT* pctxt, SpeedandHeadingandThrottleConfidence* pvalue);

EXTERN int asn1PD_SpeedandHeadingandThrottleConfidence (OSCTXT* pctxt, SpeedandHeadingandThrottleConfidence* pvalue);

EXTERN void asn1Print_SpeedandHeadingandThrottleConfidence 
   (const char* name, const SpeedandHeadingandThrottleConfidence* pvalue);

EXTERN int asn1PrtToStrm_SpeedandHeadingandThrottleConfidence (OSCTXT *pctxt, 
   const char* name, const SpeedandHeadingandThrottleConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  FullPositionVector                                        */
/*                                                            */
/**************************************************************/
/*
FullPositionVector ::= SEQUENCE {
   utcTime [0] DDateTime OPTIONAL, -- time with mSec precision
   long [1] Longitude, -- 1/10th microdegree
   lat [2] Latitude, -- 1/10th microdegree
   elevation [3] Elevation OPTIONAL, -- units of 0.1 m
   heading [4] Heading OPTIONAL,
   speed [5] TransmissionAndSpeed OPTIONAL,
   posAccuracy [6] PositionalAccuracy OPTIONAL,
   timeConfidence [7] TimeConfidence OPTIONAL,
   posConfidence [8] PositionConfidenceSet OPTIONAL,
   speedConfidence [9] SpeedandHeadingandThrottleConfidence OPTIONAL,
   ...
}
*/
typedef struct EXTERN FullPositionVector {
   struct {
      unsigned utcTimePresent : 1;
      unsigned elevationPresent : 1;
      unsigned headingPresent : 1;
      unsigned speedPresent : 1;
      unsigned posAccuracyPresent : 1;
      unsigned timeConfidencePresent : 1;
      unsigned posConfidencePresent : 1;
      unsigned speedConfidencePresent : 1;
   } m;
   DDateTime utcTime;
   Longitude long_;
   Latitude lat;
   Elevation elevation;
   Heading heading;
   TransmissionAndSpeed speed;
   PositionalAccuracy posAccuracy;
   TimeConfidence timeConfidence;
   PositionConfidenceSet posConfidence;
   SpeedandHeadingandThrottleConfidence speedConfidence;
   OSRTDList extElem1;
} FullPositionVector;

EXTERN int asn1PE_FullPositionVector (OSCTXT* pctxt, FullPositionVector* pvalue);

EXTERN int asn1PD_FullPositionVector (OSCTXT* pctxt, FullPositionVector* pvalue);

EXTERN void asn1Print_FullPositionVector 
   (const char* name, const FullPositionVector* pvalue);

EXTERN int asn1PrtToStrm_FullPositionVector (OSCTXT *pctxt, 
   const char* name, const FullPositionVector* pvalue);

EXTERN int asn1Init_FullPositionVector (FullPositionVector* pvalue);

EXTERN void asn1Free_FullPositionVector (OSCTXT *pctxt, FullPositionVector* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSideAlert_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RoadSideAlert'
*/
/* List of RegionalExtension */
typedef OSRTDList RoadSideAlert_regional;

EXTERN int asn1PE_RoadSideAlert_regional (OSCTXT* pctxt, RoadSideAlert_regional* pvalue);

EXTERN int asn1PD_RoadSideAlert_regional (OSCTXT* pctxt, RoadSideAlert_regional* pvalue);

EXTERN void asn1Print_RoadSideAlert_regional 
   (const char* name, const RoadSideAlert_regional* pvalue);

EXTERN int asn1PrtToStrm_RoadSideAlert_regional (OSCTXT *pctxt, 
   const char* name, const RoadSideAlert_regional* pvalue);

EXTERN int asn1Init_RoadSideAlert_regional (RoadSideAlert_regional* pvalue);

EXTERN void asn1Free_RoadSideAlert_regional (OSCTXT *pctxt, 
   RoadSideAlert_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSideAlert                                             */
/*                                                            */
/**************************************************************/
/*
RoadSideAlert ::= SEQUENCE {
   msgCnt [0] MsgCount,
   timeStamp [1] MinuteOfTheYear OPTIONAL,
   typeEvent [2] ITIScodes,
                 -- a category and an item from that category 
                 -- all ITS stds use the same types here
                 -- to explain the type of  the 
                 -- alert / danger / hazard involved
   description [3] SEQUENCE (SIZE (1..8)) OF ITIScodes OPTIONAL,
                 -- up to eight ITIS code set entries to further
                 -- describe the event, give advice, or any 
                 -- other ITIS codes
   priority [4] Priority OPTIONAL,
                 -- the urgency of this message, a relative
                 -- degree of merit compared with other 
                 -- similar messages for this type (not other
                 -- messages being sent by the device), nor a 
                 -- priority of display urgency
   heading [5] HeadingSlice OPTIONAL,
                 -- Applicable headings/direction
   extent [6] Extent OPTIONAL,
                 -- the spatial distance over which this
                 -- message applies and should be presented 
                 -- to the driver
   position [7] FullPositionVector OPTIONAL,
                 -- a compact summary of the position,
                 -- heading, speed, etc. of the 
                 -- event in question. Including stationary
                 -- and wide area events. 
   furtherInfoID [8] FurtherInfoID OPTIONAL,
                 -- an index link to any other incident 
                 -- information data that may be available 
                 -- in the normal ATIS incident description 
                 -- or other messages
                 -- 1~2 octets in length
   regional [9] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN RoadSideAlert {
   struct {
      unsigned timeStampPresent : 1;
      unsigned descriptionPresent : 1;
      unsigned priorityPresent : 1;
      unsigned headingPresent : 1;
      unsigned extentPresent : 1;
      unsigned positionPresent : 1;
      unsigned furtherInfoIDPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MsgCount msgCnt;
   MinuteOfTheYear timeStamp;
   ITIScodes typeEvent;
   RoadSideAlert_description description;
   Priority priority;
   HeadingSlice heading;
   Extent extent;
   FullPositionVector position;
   FurtherInfoID furtherInfoID;
   RoadSideAlert_regional regional;
   OSRTDList extElem1;
} RoadSideAlert;

EXTERN int asn1PE_RoadSideAlert (OSCTXT* pctxt, RoadSideAlert* pvalue);

EXTERN int asn1PD_RoadSideAlert (OSCTXT* pctxt, RoadSideAlert* pvalue);

EXTERN void asn1Print_RoadSideAlert (const char* name, const RoadSideAlert* pvalue);

EXTERN int asn1PrtToStrm_RoadSideAlert (OSCTXT *pctxt, 
   const char* name, const RoadSideAlert* pvalue);

EXTERN int asn1Init_RoadSideAlert (RoadSideAlert* pvalue);

EXTERN void asn1Free_RoadSideAlert (OSCTXT *pctxt, RoadSideAlert* pvalue);

/**************************************************************/
/*                                                            */
/*  PrivilegedEvents                                          */
/*                                                            */
/**************************************************************/
/*
PrivilegedEvents ::= SEQUENCE {
   -- CERT SSP Privilege Details
   sspRights [0] SSPindex,
   -- The active event list
   event [1] PrivilegedEventFlags,
   ...
}
*/
typedef struct EXTERN PrivilegedEvents {
   SSPindex sspRights;
   PrivilegedEventFlags event;
   OSRTDList extElem1;
} PrivilegedEvents;

EXTERN int asn1PE_PrivilegedEvents (OSCTXT* pctxt, PrivilegedEvents* pvalue);

EXTERN int asn1PD_PrivilegedEvents (OSCTXT* pctxt, PrivilegedEvents* pvalue);

EXTERN void asn1Print_PrivilegedEvents 
   (const char* name, const PrivilegedEvents* pvalue);

EXTERN int asn1PrtToStrm_PrivilegedEvents (OSCTXT *pctxt, 
   const char* name, const PrivilegedEvents* pvalue);

EXTERN int asn1Init_PrivilegedEvents (PrivilegedEvents* pvalue);

EXTERN void asn1Free_PrivilegedEvents (OSCTXT *pctxt, PrivilegedEvents* pvalue);

/**************************************************************/
/*                                                            */
/*  EmergencyDetails                                          */
/*                                                            */
/**************************************************************/
/*
EmergencyDetails ::= SEQUENCE {
   -- CERT SSP Privilege Details
   sspRights [0] SSPindex, -- index set by CERT
   sirenUse [1] SirenInUse,
   lightsUse [2] LightbarInUse,
   multi [3] MultiVehicleResponse,
   events [4] PrivilegedEvents OPTIONAL,
   responseType [5] ResponseType OPTIONAL,
   ...
}
*/
typedef struct EXTERN EmergencyDetails {
   struct {
      unsigned eventsPresent : 1;
      unsigned responseTypePresent : 1;
   } m;
   SSPindex sspRights;
   SirenInUse sirenUse;
   LightbarInUse lightsUse;
   MultiVehicleResponse multi;
   PrivilegedEvents events;
   ResponseType responseType;
   OSRTDList extElem1;
} EmergencyDetails;

EXTERN int asn1PE_EmergencyDetails (OSCTXT* pctxt, EmergencyDetails* pvalue);

EXTERN int asn1PD_EmergencyDetails (OSCTXT* pctxt, EmergencyDetails* pvalue);

EXTERN void asn1Print_EmergencyDetails 
   (const char* name, const EmergencyDetails* pvalue);

EXTERN int asn1PrtToStrm_EmergencyDetails (OSCTXT *pctxt, 
   const char* name, const EmergencyDetails* pvalue);

EXTERN int asn1Init_EmergencyDetails (EmergencyDetails* pvalue);

EXTERN void asn1Free_EmergencyDetails (OSCTXT *pctxt, EmergencyDetails* pvalue);

/**************************************************************/
/*                                                            */
/*  EmergencyVehicleAlert_regional                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'EmergencyVehicleAlert'
*/
/* List of RegionalExtension */
typedef OSRTDList EmergencyVehicleAlert_regional;

EXTERN int asn1PE_EmergencyVehicleAlert_regional (OSCTXT* pctxt, EmergencyVehicleAlert_regional* pvalue);

EXTERN int asn1PD_EmergencyVehicleAlert_regional (OSCTXT* pctxt, EmergencyVehicleAlert_regional* pvalue);

EXTERN void asn1Print_EmergencyVehicleAlert_regional 
   (const char* name, const EmergencyVehicleAlert_regional* pvalue);

EXTERN int asn1PrtToStrm_EmergencyVehicleAlert_regional (OSCTXT *pctxt, 
   const char* name, const EmergencyVehicleAlert_regional* pvalue);

EXTERN int asn1Init_EmergencyVehicleAlert_regional (
   EmergencyVehicleAlert_regional* pvalue);

EXTERN void asn1Free_EmergencyVehicleAlert_regional (OSCTXT *pctxt, 
   EmergencyVehicleAlert_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  EmergencyVehicleAlert                                     */
/*                                                            */
/**************************************************************/
/*
EmergencyVehicleAlert ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   id [1] TemporaryID OPTIONAL,
   rsaMsg [2] RoadSideAlert,
     -- the DSRCmsgID inside this 
                   -- data frame is set as per the 
                   -- RoadSideAlert.  
   responseType [3] ResponseType OPTIONAL,
   details [4] EmergencyDetails OPTIONAL,
                   -- Combines these 3 items: 
                   -- SirenInUse,                     
                   -- LightbarInUse,                  
                   -- MultiVehicleReponse,
   mass [5] VehicleMass OPTIONAL,
   basicType [6] VehicleType OPTIONAL,
                                -- gross size and axle cnt
   -- type of vehicle and agency when known
   vehicleType [7] VehicleGroupAffected OPTIONAL,
   responseEquip [8] IncidentResponseEquipment OPTIONAL,
   responderType [9] ResponderGroupAffected OPTIONAL,
   regional [10] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN EmergencyVehicleAlert {
   struct {
      unsigned timeStampPresent : 1;
      unsigned idPresent : 1;
      unsigned responseTypePresent : 1;
      unsigned detailsPresent : 1;
      unsigned massPresent : 1;
      unsigned basicTypePresent : 1;
      unsigned vehicleTypePresent : 1;
      unsigned responseEquipPresent : 1;
      unsigned responderTypePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MinuteOfTheYear timeStamp;
   TemporaryID id;
   RoadSideAlert rsaMsg;
   ResponseType responseType;
   EmergencyDetails details;
   VehicleMass mass;
   VehicleType basicType;
   VehicleGroupAffected vehicleType;
   IncidentResponseEquipment responseEquip;
   ResponderGroupAffected responderType;
   EmergencyVehicleAlert_regional regional;
   OSRTDList extElem1;
} EmergencyVehicleAlert;

EXTERN int asn1PE_EmergencyVehicleAlert (OSCTXT* pctxt, EmergencyVehicleAlert* pvalue);

EXTERN int asn1PD_EmergencyVehicleAlert (OSCTXT* pctxt, EmergencyVehicleAlert* pvalue);

EXTERN void asn1Print_EmergencyVehicleAlert 
   (const char* name, const EmergencyVehicleAlert* pvalue);

EXTERN int asn1PrtToStrm_EmergencyVehicleAlert (OSCTXT *pctxt, 
   const char* name, const EmergencyVehicleAlert* pvalue);

EXTERN int asn1Init_EmergencyVehicleAlert (EmergencyVehicleAlert* pvalue);

EXTERN void asn1Free_EmergencyVehicleAlert (OSCTXT *pctxt, 
   EmergencyVehicleAlert* pvalue);

/**************************************************************/
/*                                                            */
/*  PathHistoryPoint                                          */
/*                                                            */
/**************************************************************/
/*
PathHistoryPoint ::= SEQUENCE {
   latOffset [0] OffsetLL-B18,
   lonOffset [1] OffsetLL-B18,
   elevationOffset [2] VertOffset-B12,
   timeOffset [3] TimeOffset,
                   -- Offset backwards in time 
   speed [4] Speed OPTIONAL,
                   -- Speed over the reported period
   posAccuracy [5] PositionalAccuracy OPTIONAL,
                   -- The accuracy of this value
   heading [6] CoarseHeading OPTIONAL,
                   -- overall heading 
   ...
}
*/
typedef struct EXTERN PathHistoryPoint {
   struct {
      unsigned speedPresent : 1;
      unsigned posAccuracyPresent : 1;
      unsigned headingPresent : 1;
   } m;
   OffsetLL_B18 latOffset;
   OffsetLL_B18 lonOffset;
   VertOffset_B12 elevationOffset;
   TimeOffset timeOffset;
   Speed speed;
   PositionalAccuracy posAccuracy;
   CoarseHeading heading;
   OSRTDList extElem1;
} PathHistoryPoint;

EXTERN int asn1PE_PathHistoryPoint (OSCTXT* pctxt, PathHistoryPoint* pvalue);

EXTERN int asn1PD_PathHistoryPoint (OSCTXT* pctxt, PathHistoryPoint* pvalue);

EXTERN void asn1Print_PathHistoryPoint 
   (const char* name, const PathHistoryPoint* pvalue);

EXTERN int asn1PrtToStrm_PathHistoryPoint (OSCTXT *pctxt, 
   const char* name, const PathHistoryPoint* pvalue);

EXTERN int asn1Init_PathHistoryPoint (PathHistoryPoint* pvalue);

EXTERN void asn1Free_PathHistoryPoint (OSCTXT *pctxt, PathHistoryPoint* pvalue);

/**************************************************************/
/*                                                            */
/*  PathHistoryPointList                                      */
/*                                                            */
/**************************************************************/
/*
PathHistoryPointList ::= SEQUENCE (SIZE (1..23)) OF PathHistoryPoint
*/
/* List of PathHistoryPoint */
typedef OSRTDList PathHistoryPointList;

EXTERN int asn1PE_PathHistoryPointList (OSCTXT* pctxt, PathHistoryPointList* pvalue);

EXTERN int asn1PD_PathHistoryPointList (OSCTXT* pctxt, PathHistoryPointList* pvalue);

EXTERN void asn1Print_PathHistoryPointList 
   (const char* name, const PathHistoryPointList* pvalue);

EXTERN int asn1PrtToStrm_PathHistoryPointList (OSCTXT *pctxt, 
   const char* name, const PathHistoryPointList* pvalue);

EXTERN int asn1Init_PathHistoryPointList (PathHistoryPointList* pvalue);

EXTERN void asn1Free_PathHistoryPointList (OSCTXT *pctxt, 
   PathHistoryPointList* pvalue);

/**************************************************************/
/*                                                            */
/*  PathHistory                                               */
/*                                                            */
/**************************************************************/
/*
PathHistory ::= SEQUENCE {
   initialPosition [0] FullPositionVector OPTIONAL,
   currGNSSstatus [1] GNSSstatus OPTIONAL,
   crumbData [2] PathHistoryPointList,
   ...
}
*/
typedef struct EXTERN PathHistory {
   struct {
      unsigned initialPositionPresent : 1;
      unsigned currGNSSstatusPresent : 1;
   } m;
   FullPositionVector initialPosition;
   GNSSstatus currGNSSstatus;
   PathHistoryPointList crumbData;
   OSRTDList extElem1;
} PathHistory;

EXTERN int asn1PE_PathHistory (OSCTXT* pctxt, PathHistory* pvalue);

EXTERN int asn1PD_PathHistory (OSCTXT* pctxt, PathHistory* pvalue);

EXTERN void asn1Print_PathHistory (const char* name, const PathHistory* pvalue);

EXTERN int asn1PrtToStrm_PathHistory (OSCTXT *pctxt, 
   const char* name, const PathHistory* pvalue);

EXTERN int asn1Init_PathHistory (PathHistory* pvalue);

EXTERN void asn1Free_PathHistory (OSCTXT *pctxt, PathHistory* pvalue);

/**************************************************************/
/*                                                            */
/*  PathPrediction                                            */
/*                                                            */
/**************************************************************/
/*
PathPrediction ::= SEQUENCE {
   radiusOfCurve [0] RadiusOfCurvature,
                 -- LSB units of 10cm
                 -- straight path to use value of 32767
   confidence [1] Confidence,
                 -- LSB units of 0.5 percent
   ...
}
*/
typedef struct EXTERN PathPrediction {
   RadiusOfCurvature radiusOfCurve;
   Confidence confidence;
   OSRTDList extElem1;
} PathPrediction;

EXTERN int asn1PE_PathPrediction (OSCTXT* pctxt, PathPrediction* pvalue);

EXTERN int asn1PD_PathPrediction (OSCTXT* pctxt, PathPrediction* pvalue);

EXTERN void asn1Print_PathPrediction (const char* name, const PathPrediction* pvalue);

EXTERN int asn1PrtToStrm_PathPrediction (OSCTXT *pctxt, 
   const char* name, const PathPrediction* pvalue);

EXTERN int asn1Init_PathPrediction (PathPrediction* pvalue);

EXTERN void asn1Free_PathPrediction (OSCTXT *pctxt, PathPrediction* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionReferenceID                                   */
/*                                                            */
/**************************************************************/
/*
IntersectionReferenceID ::= SEQUENCE {
   region [0] RoadRegulatorID OPTIONAL,
           -- a globally unique regional assignment value
           -- typical assigned to a regional DOT authority
           -- the value zero shall be used for testing needs
   id [1] IntersectionID
           -- a unique mapping to the intersection
           -- in question within the above region of use
}
*/
typedef struct EXTERN IntersectionReferenceID {
   struct {
      unsigned regionPresent : 1;
   } m;
   RoadRegulatorID region;
   IntersectionID id;
} IntersectionReferenceID;

EXTERN int asn1PE_IntersectionReferenceID (OSCTXT* pctxt, IntersectionReferenceID* pvalue);

EXTERN int asn1PD_IntersectionReferenceID (OSCTXT* pctxt, IntersectionReferenceID* pvalue);

EXTERN void asn1Print_IntersectionReferenceID 
   (const char* name, const IntersectionReferenceID* pvalue);

EXTERN int asn1PrtToStrm_IntersectionReferenceID (OSCTXT *pctxt, 
   const char* name, const IntersectionReferenceID* pvalue);

EXTERN int asn1Init_IntersectionReferenceID (IntersectionReferenceID* pvalue);

/**************************************************************/
/*                                                            */
/*  ApproachOrLane                                            */
/*                                                            */
/**************************************************************/
/*
ApproachOrLane ::= CHOICE {
   approach [0] ApproachID,
   lane [1] LaneID
}
*/
/* Choice tag constants */

#define T_ApproachOrLane_approach       1
#define T_ApproachOrLane_lane           2

typedef struct EXTERN ApproachOrLane {
   OSINT32 t;
   union {
      /* t = 1 */
      ApproachID approach;
      /* t = 2 */
      LaneID lane;
   } u;
} ApproachOrLane;

EXTERN int asn1PE_ApproachOrLane (OSCTXT* pctxt, ApproachOrLane* pvalue);

EXTERN int asn1PD_ApproachOrLane (OSCTXT* pctxt, ApproachOrLane* pvalue);

EXTERN void asn1Print_ApproachOrLane (const char* name, const ApproachOrLane* pvalue);

EXTERN int asn1PrtToStrm_ApproachOrLane (OSCTXT *pctxt, 
   const char* name, const ApproachOrLane* pvalue);

EXTERN int asn1Init_ApproachOrLane (ApproachOrLane* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionCollision_regional                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionCollision'
*/
/* List of RegionalExtension */
typedef OSRTDList IntersectionCollision_regional;

EXTERN int asn1PE_IntersectionCollision_regional (OSCTXT* pctxt, IntersectionCollision_regional* pvalue);

EXTERN int asn1PD_IntersectionCollision_regional (OSCTXT* pctxt, IntersectionCollision_regional* pvalue);

EXTERN void asn1Print_IntersectionCollision_regional 
   (const char* name, const IntersectionCollision_regional* pvalue);

EXTERN int asn1PrtToStrm_IntersectionCollision_regional (OSCTXT *pctxt, 
   const char* name, const IntersectionCollision_regional* pvalue);

EXTERN int asn1Init_IntersectionCollision_regional (
   IntersectionCollision_regional* pvalue);

EXTERN void asn1Free_IntersectionCollision_regional (OSCTXT *pctxt, 
   IntersectionCollision_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionCollision                                     */
/*                                                            */
/**************************************************************/
/*
IntersectionCollision ::= SEQUENCE {
   msgCnt [0] MsgCount,
   id [1] TemporaryID,
   timeStamp [2] MinuteOfTheYear OPTIONAL,
   partOne [3] BSMcoreData OPTIONAL,
   path [4] PathHistory OPTIONAL,
                  -- a set of recent path points forming a history
   pathPrediction [5] PathPrediction OPTIONAL,
                  -- the predicted path
   intersectionID [6] IntersectionReferenceID,
                  -- the applicable Intersection
   laneNumber [7] ApproachOrLane,
                  -- the best estimate of the applicable Lane or Approach
   eventFlag [8] VehicleEventFlags,
                  -- used to convey vehicle Panic Events,  
                  -- Set to indicate "Intersection Violation" 
   regional [9] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN IntersectionCollision {
   struct {
      unsigned timeStampPresent : 1;
      unsigned partOnePresent : 1;
      unsigned pathPresent : 1;
      unsigned pathPredictionPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MsgCount msgCnt;
   TemporaryID id;
   MinuteOfTheYear timeStamp;
   BSMcoreData partOne;
   PathHistory path;
   PathPrediction pathPrediction;
   IntersectionReferenceID intersectionID;
   ApproachOrLane laneNumber;
   VehicleEventFlags eventFlag;
   IntersectionCollision_regional regional;
   OSRTDList extElem1;
} IntersectionCollision;

EXTERN int asn1PE_IntersectionCollision (OSCTXT* pctxt, IntersectionCollision* pvalue);

EXTERN int asn1PD_IntersectionCollision (OSCTXT* pctxt, IntersectionCollision* pvalue);

EXTERN void asn1Print_IntersectionCollision 
   (const char* name, const IntersectionCollision* pvalue);

EXTERN int asn1PrtToStrm_IntersectionCollision (OSCTXT *pctxt, 
   const char* name, const IntersectionCollision* pvalue);

EXTERN int asn1Init_IntersectionCollision (IntersectionCollision* pvalue);

EXTERN void asn1Free_IntersectionCollision (OSCTXT *pctxt, 
   IntersectionCollision* pvalue);

/**************************************************************/
/*                                                            */
/*  Position3D_regional                                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'Position3D'
*/
/* List of RegionalExtension */
typedef OSRTDList Position3D_regional;

EXTERN int asn1PE_Position3D_regional (OSCTXT* pctxt, Position3D_regional* pvalue);

EXTERN int asn1PD_Position3D_regional (OSCTXT* pctxt, Position3D_regional* pvalue);

EXTERN void asn1Print_Position3D_regional 
   (const char* name, const Position3D_regional* pvalue);

EXTERN int asn1PrtToStrm_Position3D_regional (OSCTXT *pctxt, 
   const char* name, const Position3D_regional* pvalue);

EXTERN int asn1Init_Position3D_regional (Position3D_regional* pvalue);

EXTERN void asn1Free_Position3D_regional (OSCTXT *pctxt, Position3D_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  Position3D                                                */
/*                                                            */
/**************************************************************/
/*
Position3D ::= SEQUENCE {
   lat [0] Latitude, -- in 1/10th micro degrees
   long [1] Longitude, -- in 1/10th micro degrees
   elevation [2] Elevation OPTIONAL, -- in 10 cm units
   regional [3] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN Position3D {
   struct {
      unsigned elevationPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Latitude lat;
   Longitude long_;
   Elevation elevation;
   Position3D_regional regional;
   OSRTDList extElem1;
} Position3D;

EXTERN int asn1PE_Position3D (OSCTXT* pctxt, Position3D* pvalue);

EXTERN int asn1PD_Position3D (OSCTXT* pctxt, Position3D* pvalue);

EXTERN void asn1Print_Position3D (const char* name, const Position3D* pvalue);

EXTERN int asn1PrtToStrm_Position3D (OSCTXT *pctxt, 
   const char* name, const Position3D* pvalue);

EXTERN int asn1Init_Position3D (Position3D* pvalue);

EXTERN void asn1Free_Position3D (OSCTXT *pctxt, Position3D* pvalue);

/**************************************************************/
/*                                                            */
/*  RegulatorySpeedLimit                                      */
/*                                                            */
/**************************************************************/
/*
RegulatorySpeedLimit ::= SEQUENCE {
   type [0] SpeedLimitType,
               -- The type of regulatory speed which follows
   speed [1] Velocity
               -- The speed in units of 0.02 m/s
               -- See Section 11 for converting and translating 
               -- speed expressed in mph into units of m/s
}
*/
typedef struct EXTERN RegulatorySpeedLimit {
   SpeedLimitType type;
   Velocity speed;
} RegulatorySpeedLimit;

EXTERN int asn1PE_RegulatorySpeedLimit (OSCTXT* pctxt, RegulatorySpeedLimit* pvalue);

EXTERN int asn1PD_RegulatorySpeedLimit (OSCTXT* pctxt, RegulatorySpeedLimit* pvalue);

EXTERN void asn1Print_RegulatorySpeedLimit 
   (const char* name, const RegulatorySpeedLimit* pvalue);

EXTERN int asn1PrtToStrm_RegulatorySpeedLimit (OSCTXT *pctxt, 
   const char* name, const RegulatorySpeedLimit* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimitList                                            */
/*                                                            */
/**************************************************************/
/*
SpeedLimitList ::= SEQUENCE (SIZE (1..9)) OF RegulatorySpeedLimit
*/
/* List of RegulatorySpeedLimit */
typedef OSRTDList SpeedLimitList;

EXTERN int asn1PE_SpeedLimitList (OSCTXT* pctxt, SpeedLimitList* pvalue);

EXTERN int asn1PD_SpeedLimitList (OSCTXT* pctxt, SpeedLimitList* pvalue);

EXTERN void asn1Print_SpeedLimitList (const char* name, const SpeedLimitList* pvalue);

EXTERN int asn1PrtToStrm_SpeedLimitList (OSCTXT *pctxt, 
   const char* name, const SpeedLimitList* pvalue);

EXTERN int asn1Init_SpeedLimitList (SpeedLimitList* pvalue);

EXTERN void asn1Free_SpeedLimitList (OSCTXT *pctxt, SpeedLimitList* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneTypeAttributes                                        */
/*                                                            */
/**************************************************************/
/*
LaneTypeAttributes ::= CHOICE {
   vehicle [0] LaneAttributes-Vehicle, -- motor vehicle lanes
   crosswalk [1] LaneAttributes-Crosswalk, -- pedestrian crosswalks
   bikeLane [2] LaneAttributes-Bike, -- bike lanes
   sidewalk [3] LaneAttributes-Sidewalk, -- pedestrian sidewalk paths
   median [4] LaneAttributes-Barrier, -- medians & channelization
   striping [5] LaneAttributes-Striping, -- roadway markings
   trackedVehicle [6] LaneAttributes-TrackedVehicle, -- trains and trolleys
   parking [7] LaneAttributes-Parking,
                                             -- parking and stopping lanes
   ...
}
*/
/* Choice tag constants */

#define T_LaneTypeAttributes_vehicle    1
#define T_LaneTypeAttributes_crosswalk  2
#define T_LaneTypeAttributes_bikeLane   3
#define T_LaneTypeAttributes_sidewalk   4
#define T_LaneTypeAttributes_median     5
#define T_LaneTypeAttributes_striping   6
#define T_LaneTypeAttributes_trackedVehicle 7
#define T_LaneTypeAttributes_parking    8
#define T_LaneTypeAttributes_extElem1   9

typedef struct EXTERN LaneTypeAttributes {
   OSINT32 t;
   union {
      /* t = 1 */
      LaneAttributes_Vehicle *vehicle;
      /* t = 2 */
      LaneAttributes_Crosswalk *crosswalk;
      /* t = 3 */
      LaneAttributes_Bike *bikeLane;
      /* t = 4 */
      LaneAttributes_Sidewalk *sidewalk;
      /* t = 5 */
      LaneAttributes_Barrier *median;
      /* t = 6 */
      LaneAttributes_Striping *striping;
      /* t = 7 */
      LaneAttributes_TrackedVehicle *trackedVehicle;
      /* t = 8 */
      LaneAttributes_Parking *parking;
      /* t = 9 */
      ASN1OpenType *extElem1;
   } u;
} LaneTypeAttributes;

EXTERN int asn1PE_LaneTypeAttributes (OSCTXT* pctxt, LaneTypeAttributes* pvalue);

EXTERN int asn1PD_LaneTypeAttributes (OSCTXT* pctxt, LaneTypeAttributes* pvalue);

EXTERN void asn1Print_LaneTypeAttributes 
   (const char* name, const LaneTypeAttributes* pvalue);

EXTERN int asn1PrtToStrm_LaneTypeAttributes (OSCTXT *pctxt, 
   const char* name, const LaneTypeAttributes* pvalue);

EXTERN int asn1Init_LaneTypeAttributes (LaneTypeAttributes* pvalue);

EXTERN void asn1Free_LaneTypeAttributes (OSCTXT *pctxt, LaneTypeAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes                                            */
/*                                                            */
/**************************************************************/
/*
LaneAttributes ::= SEQUENCE {
   directionalUse [0] LaneDirection, -- directions of lane use
   sharedWith [1] LaneSharing, -- co-users of the lane path
   laneType [2] LaneTypeAttributes, -- specific lane type data
   regional [3] RegionalExtension OPTIONAL
}
*/
typedef struct EXTERN LaneAttributes {
   struct {
      unsigned regionalPresent : 1;
   } m;
   LaneDirection directionalUse;
   LaneSharing sharedWith;
   LaneTypeAttributes laneType;
   RegionalExtension regional;
} LaneAttributes;

EXTERN int asn1PE_LaneAttributes (OSCTXT* pctxt, LaneAttributes* pvalue);

EXTERN int asn1PD_LaneAttributes (OSCTXT* pctxt, LaneAttributes* pvalue);

EXTERN void asn1Print_LaneAttributes (const char* name, const LaneAttributes* pvalue);

EXTERN int asn1PrtToStrm_LaneAttributes (OSCTXT *pctxt, 
   const char* name, const LaneAttributes* pvalue);

EXTERN int asn1Init_LaneAttributes (LaneAttributes* pvalue);

EXTERN void asn1Free_LaneAttributes (OSCTXT *pctxt, LaneAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_XY_20b                                               */
/*                                                            */
/**************************************************************/
/*
Node-XY-20b ::= SEQUENCE {
   x [0] Offset-B10,
   y [1] Offset-B10
}
*/
typedef struct EXTERN Node_XY_20b {
   Offset_B10 x;
   Offset_B10 y;
} Node_XY_20b;

EXTERN int asn1PE_Node_XY_20b (OSCTXT* pctxt, Node_XY_20b* pvalue);

EXTERN int asn1PD_Node_XY_20b (OSCTXT* pctxt, Node_XY_20b* pvalue);

EXTERN void asn1Print_Node_XY_20b (const char* name, const Node_XY_20b* pvalue);

EXTERN int asn1PrtToStrm_Node_XY_20b (OSCTXT *pctxt, 
   const char* name, const Node_XY_20b* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_XY_22b                                               */
/*                                                            */
/**************************************************************/
/*
Node-XY-22b ::= SEQUENCE {
   x [0] Offset-B11,
   y [1] Offset-B11
}
*/
typedef struct EXTERN Node_XY_22b {
   Offset_B11 x;
   Offset_B11 y;
} Node_XY_22b;

EXTERN int asn1PE_Node_XY_22b (OSCTXT* pctxt, Node_XY_22b* pvalue);

EXTERN int asn1PD_Node_XY_22b (OSCTXT* pctxt, Node_XY_22b* pvalue);

EXTERN void asn1Print_Node_XY_22b (const char* name, const Node_XY_22b* pvalue);

EXTERN int asn1PrtToStrm_Node_XY_22b (OSCTXT *pctxt, 
   const char* name, const Node_XY_22b* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_XY_24b                                               */
/*                                                            */
/**************************************************************/
/*
Node-XY-24b ::= SEQUENCE {
   x [0] Offset-B12,
   y [1] Offset-B12
}
*/
typedef struct EXTERN Node_XY_24b {
   Offset_B12 x;
   Offset_B12 y;
} Node_XY_24b;

EXTERN int asn1PE_Node_XY_24b (OSCTXT* pctxt, Node_XY_24b* pvalue);

EXTERN int asn1PD_Node_XY_24b (OSCTXT* pctxt, Node_XY_24b* pvalue);

EXTERN void asn1Print_Node_XY_24b (const char* name, const Node_XY_24b* pvalue);

EXTERN int asn1PrtToStrm_Node_XY_24b (OSCTXT *pctxt, 
   const char* name, const Node_XY_24b* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_XY_26b                                               */
/*                                                            */
/**************************************************************/
/*
Node-XY-26b ::= SEQUENCE {
   x [0] Offset-B13,
   y [1] Offset-B13
}
*/
typedef struct EXTERN Node_XY_26b {
   Offset_B13 x;
   Offset_B13 y;
} Node_XY_26b;

EXTERN int asn1PE_Node_XY_26b (OSCTXT* pctxt, Node_XY_26b* pvalue);

EXTERN int asn1PD_Node_XY_26b (OSCTXT* pctxt, Node_XY_26b* pvalue);

EXTERN void asn1Print_Node_XY_26b (const char* name, const Node_XY_26b* pvalue);

EXTERN int asn1PrtToStrm_Node_XY_26b (OSCTXT *pctxt, 
   const char* name, const Node_XY_26b* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_XY_28b                                               */
/*                                                            */
/**************************************************************/
/*
Node-XY-28b ::= SEQUENCE {
   x [0] Offset-B14,
   y [1] Offset-B14
}
*/
typedef struct EXTERN Node_XY_28b {
   Offset_B14 x;
   Offset_B14 y;
} Node_XY_28b;

EXTERN int asn1PE_Node_XY_28b (OSCTXT* pctxt, Node_XY_28b* pvalue);

EXTERN int asn1PD_Node_XY_28b (OSCTXT* pctxt, Node_XY_28b* pvalue);

EXTERN void asn1Print_Node_XY_28b (const char* name, const Node_XY_28b* pvalue);

EXTERN int asn1PrtToStrm_Node_XY_28b (OSCTXT *pctxt, 
   const char* name, const Node_XY_28b* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_XY_32b                                               */
/*                                                            */
/**************************************************************/
/*
Node-XY-32b ::= SEQUENCE {
   x [0] Offset-B16,
   y [1] Offset-B16
}
*/
typedef struct EXTERN Node_XY_32b {
   Offset_B16 x;
   Offset_B16 y;
} Node_XY_32b;

EXTERN int asn1PE_Node_XY_32b (OSCTXT* pctxt, Node_XY_32b* pvalue);

EXTERN int asn1PD_Node_XY_32b (OSCTXT* pctxt, Node_XY_32b* pvalue);

EXTERN void asn1Print_Node_XY_32b (const char* name, const Node_XY_32b* pvalue);

EXTERN int asn1PrtToStrm_Node_XY_32b (OSCTXT *pctxt, 
   const char* name, const Node_XY_32b* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LLmD_64b                                             */
/*                                                            */
/**************************************************************/
/*
Node-LLmD-64b ::= SEQUENCE {
   lon [0] Longitude,
   lat [1] Latitude
}
*/
typedef struct EXTERN Node_LLmD_64b {
   Longitude lon;
   Latitude lat;
} Node_LLmD_64b;

EXTERN int asn1PE_Node_LLmD_64b (OSCTXT* pctxt, Node_LLmD_64b* pvalue);

EXTERN int asn1PD_Node_LLmD_64b (OSCTXT* pctxt, Node_LLmD_64b* pvalue);

EXTERN void asn1Print_Node_LLmD_64b (const char* name, const Node_LLmD_64b* pvalue);

EXTERN int asn1PrtToStrm_Node_LLmD_64b (OSCTXT *pctxt, 
   const char* name, const Node_LLmD_64b* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeOffsetPointXY                                         */
/*                                                            */
/**************************************************************/
/*
NodeOffsetPointXY ::= CHOICE {
   -- Nodes with X,Y content
   node-XY1 [0] Node-XY-20b, -- node is within   5.11m of last node
   node-XY2 [1] Node-XY-22b, -- node is within  10.23m of last node
   node-XY3 [2] Node-XY-24b, -- node is within  20.47m of last node
   node-XY4 [3] Node-XY-26b, -- node is within  40.96m of last node
   node-XY5 [4] Node-XY-28b, -- node is within  81.91m of last node
   node-XY6 [5] Node-XY-32b, -- node is within 327.67m of last node
   node-LatLon [6] Node-LLmD-64b, -- node is a full 32b Lat/Lon range
   regional [7] RegionalExtension
                                    -- node which follows is of a 
                                    -- regional definition type 
}
*/
/* Choice tag constants */

#define T_NodeOffsetPointXY_node_XY1    1
#define T_NodeOffsetPointXY_node_XY2    2
#define T_NodeOffsetPointXY_node_XY3    3
#define T_NodeOffsetPointXY_node_XY4    4
#define T_NodeOffsetPointXY_node_XY5    5
#define T_NodeOffsetPointXY_node_XY6    6
#define T_NodeOffsetPointXY_node_LatLon 7
#define T_NodeOffsetPointXY_regional    8

typedef struct EXTERN NodeOffsetPointXY {
   OSINT32 t;
   union {
      /* t = 1 */
      Node_XY_20b *node_XY1;
      /* t = 2 */
      Node_XY_22b *node_XY2;
      /* t = 3 */
      Node_XY_24b *node_XY3;
      /* t = 4 */
      Node_XY_26b *node_XY4;
      /* t = 5 */
      Node_XY_28b *node_XY5;
      /* t = 6 */
      Node_XY_32b *node_XY6;
      /* t = 7 */
      Node_LLmD_64b *node_LatLon;
      /* t = 8 */
      RegionalExtension *regional;
   } u;
} NodeOffsetPointXY;

EXTERN int asn1PE_NodeOffsetPointXY (OSCTXT* pctxt, NodeOffsetPointXY* pvalue);

EXTERN int asn1PD_NodeOffsetPointXY (OSCTXT* pctxt, NodeOffsetPointXY* pvalue);

EXTERN void asn1Print_NodeOffsetPointXY 
   (const char* name, const NodeOffsetPointXY* pvalue);

EXTERN int asn1PrtToStrm_NodeOffsetPointXY (OSCTXT *pctxt, 
   const char* name, const NodeOffsetPointXY* pvalue);

EXTERN int asn1Init_NodeOffsetPointXY (NodeOffsetPointXY* pvalue);

EXTERN void asn1Free_NodeOffsetPointXY (OSCTXT *pctxt, NodeOffsetPointXY* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeXYList                                       */
/*                                                            */
/**************************************************************/
/*
NodeAttributeXYList ::= SEQUENCE (SIZE (1..8)) OF NodeAttributeXY
*/
typedef struct EXTERN NodeAttributeXYList {
   OSSIZE n;
   NodeAttributeXY elem[8];
} NodeAttributeXYList;

EXTERN int asn1PE_NodeAttributeXYList (OSCTXT* pctxt, NodeAttributeXYList* pvalue);

EXTERN int asn1PD_NodeAttributeXYList (OSCTXT* pctxt, NodeAttributeXYList* pvalue);

EXTERN void asn1Print_NodeAttributeXYList 
   (const char* name, const NodeAttributeXYList* pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeXYList (OSCTXT *pctxt, 
   const char* name, const NodeAttributeXYList* pvalue);

EXTERN int asn1Init_NodeAttributeXYList (NodeAttributeXYList* pvalue);

/**************************************************************/
/*                                                            */
/*  SegmentAttributeXYList                                    */
/*                                                            */
/**************************************************************/
/*
SegmentAttributeXYList ::= SEQUENCE (SIZE (1..8)) OF SegmentAttributeXY
*/
typedef struct EXTERN SegmentAttributeXYList {
   OSSIZE n;
   SegmentAttributeXY elem[8];
} SegmentAttributeXYList;

EXTERN int asn1PE_SegmentAttributeXYList (OSCTXT* pctxt, SegmentAttributeXYList* pvalue);

EXTERN int asn1PD_SegmentAttributeXYList (OSCTXT* pctxt, SegmentAttributeXYList* pvalue);

EXTERN void asn1Print_SegmentAttributeXYList 
   (const char* name, const SegmentAttributeXYList* pvalue);

EXTERN int asn1PrtToStrm_SegmentAttributeXYList (OSCTXT *pctxt, 
   const char* name, const SegmentAttributeXYList* pvalue);

EXTERN int asn1Init_SegmentAttributeXYList (SegmentAttributeXYList* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneDataAttribute_regional                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'LaneDataAttribute'
*/
/* List of RegionalExtension */
typedef OSRTDList LaneDataAttribute_regional;

EXTERN int asn1PE_LaneDataAttribute_regional (OSCTXT* pctxt, LaneDataAttribute_regional* pvalue);

EXTERN int asn1PD_LaneDataAttribute_regional (OSCTXT* pctxt, LaneDataAttribute_regional* pvalue);

EXTERN void asn1Print_LaneDataAttribute_regional 
   (const char* name, const LaneDataAttribute_regional* pvalue);

EXTERN int asn1PrtToStrm_LaneDataAttribute_regional (OSCTXT *pctxt, 
   const char* name, const LaneDataAttribute_regional* pvalue);

EXTERN int asn1Init_LaneDataAttribute_regional (LaneDataAttribute_regional* pvalue);

EXTERN void asn1Free_LaneDataAttribute_regional (OSCTXT *pctxt, 
   LaneDataAttribute_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneDataAttribute                                         */
/*                                                            */
/**************************************************************/
/*
LaneDataAttribute ::= CHOICE {
     -- Segment attribute types and the data needed for each
   pathEndPointAngle [0] DeltaAngle,
                              -- adjusts final point/width slant
                              -- of the lane to align with the stop line
   laneCrownPointCenter [1] RoadwayCrownAngle,
                              -- sets the canter of the road bed      
                              -- from centerline point
   laneCrownPointLeft [2] RoadwayCrownAngle,
                              -- sets the canter of the road bed
                              -- from left edge
   laneCrownPointRight [3] RoadwayCrownAngle,
                              -- sets the canter of the road bed
                              -- from right edge
   laneAngle [4] MergeDivergeNodeAngle,
                              -- the angle or direction of another lane
                              -- this is required to support Japan style
                              -- when a merge point angle is required
   speedLimits [5] SpeedLimitList,
                              -- Reference regulatory speed limits
                              -- used by all segments
     -- Add others as needed, in regional space
   regional [6] SEQUENCE (SIZE (1..4)) OF RegionalExtension,
   ...
}
*/
/* Choice tag constants */

#define T_LaneDataAttribute_pathEndPointAngle 1
#define T_LaneDataAttribute_laneCrownPointCenter 2
#define T_LaneDataAttribute_laneCrownPointLeft 3
#define T_LaneDataAttribute_laneCrownPointRight 4
#define T_LaneDataAttribute_laneAngle   5
#define T_LaneDataAttribute_speedLimits 6
#define T_LaneDataAttribute_regional    7
#define T_LaneDataAttribute_extElem1    8

typedef struct EXTERN LaneDataAttribute {
   OSINT32 t;
   union {
      /* t = 1 */
      DeltaAngle pathEndPointAngle;
      /* t = 2 */
      RoadwayCrownAngle laneCrownPointCenter;
      /* t = 3 */
      RoadwayCrownAngle laneCrownPointLeft;
      /* t = 4 */
      RoadwayCrownAngle laneCrownPointRight;
      /* t = 5 */
      MergeDivergeNodeAngle laneAngle;
      /* t = 6 */
      SpeedLimitList *speedLimits;
      /* t = 7 */
      LaneDataAttribute_regional *regional;
      /* t = 8 */
      ASN1OpenType *extElem1;
   } u;
} LaneDataAttribute;

EXTERN int asn1PE_LaneDataAttribute (OSCTXT* pctxt, LaneDataAttribute* pvalue);

EXTERN int asn1PD_LaneDataAttribute (OSCTXT* pctxt, LaneDataAttribute* pvalue);

EXTERN void asn1Print_LaneDataAttribute 
   (const char* name, const LaneDataAttribute* pvalue);

EXTERN int asn1PrtToStrm_LaneDataAttribute (OSCTXT *pctxt, 
   const char* name, const LaneDataAttribute* pvalue);

EXTERN int asn1Init_LaneDataAttribute (LaneDataAttribute* pvalue);

EXTERN void asn1Free_LaneDataAttribute (OSCTXT *pctxt, LaneDataAttribute* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneDataAttributeList                                     */
/*                                                            */
/**************************************************************/
/*
LaneDataAttributeList ::= SEQUENCE (SIZE (1..8)) OF LaneDataAttribute
*/
/* List of LaneDataAttribute */
typedef OSRTDList LaneDataAttributeList;

EXTERN int asn1PE_LaneDataAttributeList (OSCTXT* pctxt, LaneDataAttributeList* pvalue);

EXTERN int asn1PD_LaneDataAttributeList (OSCTXT* pctxt, LaneDataAttributeList* pvalue);

EXTERN void asn1Print_LaneDataAttributeList 
   (const char* name, const LaneDataAttributeList* pvalue);

EXTERN int asn1PrtToStrm_LaneDataAttributeList (OSCTXT *pctxt, 
   const char* name, const LaneDataAttributeList* pvalue);

EXTERN int asn1Init_LaneDataAttributeList (LaneDataAttributeList* pvalue);

EXTERN void asn1Free_LaneDataAttributeList (OSCTXT *pctxt, 
   LaneDataAttributeList* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetXY_regional                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NodeAttributeSetXY'
*/
/* List of RegionalExtension */
typedef OSRTDList NodeAttributeSetXY_regional;

EXTERN int asn1PE_NodeAttributeSetXY_regional (OSCTXT* pctxt, NodeAttributeSetXY_regional* pvalue);

EXTERN int asn1PD_NodeAttributeSetXY_regional (OSCTXT* pctxt, NodeAttributeSetXY_regional* pvalue);

EXTERN void asn1Print_NodeAttributeSetXY_regional 
   (const char* name, const NodeAttributeSetXY_regional* pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeSetXY_regional (OSCTXT *pctxt, 
   const char* name, const NodeAttributeSetXY_regional* pvalue);

EXTERN int asn1Init_NodeAttributeSetXY_regional (NodeAttributeSetXY_regional* pvalue);

EXTERN void asn1Free_NodeAttributeSetXY_regional (OSCTXT *pctxt, 
   NodeAttributeSetXY_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetXY                                        */
/*                                                            */
/**************************************************************/
/*
NodeAttributeSetXY ::= SEQUENCE {
   localNode [0] NodeAttributeXYList OPTIONAL,
                -- Attribute states which pertain to this node point
   disabled [1] SegmentAttributeXYList OPTIONAL,
                -- Attribute states which are disabled at this node point
   enabled [2] SegmentAttributeXYList OPTIONAL,
                -- Attribute states which are enabled at this node point
                -- and which remain enabled until disabled or the lane ends
   data [3] LaneDataAttributeList OPTIONAL,
                -- Attributes which require an additional data values
                -- some of these are local to the node point, while others
                -- persist with the provided values until changed
                -- and this is indicated in each entry
   dWidth [4] Offset-B10 OPTIONAL,
                -- A value added to the current lane width
                -- at this node and from this node onwards, in 1cm steps
                -- lane width between nodes are a linear taper between pts
                -- the value of zero shall not be sent here
   dElevation [5] Offset-B10 OPTIONAL,
                -- A value added to the current Elevation 
                -- at this node from this node onwards, in 10cm steps
                -- elevations between nodes are a linear taper between pts
                -- the value of zero shall not be sent here
   regional [6] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN NodeAttributeSetXY {
   struct {
      unsigned localNodePresent : 1;
      unsigned disabledPresent : 1;
      unsigned enabledPresent : 1;
      unsigned dataPresent : 1;
      unsigned dWidthPresent : 1;
      unsigned dElevationPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   NodeAttributeXYList localNode;
   SegmentAttributeXYList disabled;
   SegmentAttributeXYList enabled;
   LaneDataAttributeList data;
   Offset_B10 dWidth;
   Offset_B10 dElevation;
   NodeAttributeSetXY_regional regional;
   OSRTDList extElem1;
} NodeAttributeSetXY;

EXTERN int asn1PE_NodeAttributeSetXY (OSCTXT* pctxt, NodeAttributeSetXY* pvalue);

EXTERN int asn1PD_NodeAttributeSetXY (OSCTXT* pctxt, NodeAttributeSetXY* pvalue);

EXTERN void asn1Print_NodeAttributeSetXY 
   (const char* name, const NodeAttributeSetXY* pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeSetXY (OSCTXT *pctxt, 
   const char* name, const NodeAttributeSetXY* pvalue);

EXTERN int asn1Init_NodeAttributeSetXY (NodeAttributeSetXY* pvalue);

EXTERN void asn1Free_NodeAttributeSetXY (OSCTXT *pctxt, NodeAttributeSetXY* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeXY                                                    */
/*                                                            */
/**************************************************************/
/*
NodeXY ::= SEQUENCE {
   delta [0] NodeOffsetPointXY,
               -- A choice of which X,Y offset value to use  
               -- this includes various delta values as well a regional choices
   attributes [1] NodeAttributeSetXY OPTIONAL,
               -- Any optional Attributes which are needed
               -- This includes changes to the current lane width and elevation
   ...
}
*/
typedef struct EXTERN NodeXY {
   struct {
      unsigned attributesPresent : 1;
   } m;
   NodeOffsetPointXY delta;
   NodeAttributeSetXY attributes;
   OSRTDList extElem1;
} NodeXY;

EXTERN int asn1PE_NodeXY (OSCTXT* pctxt, NodeXY* pvalue);

EXTERN int asn1PD_NodeXY (OSCTXT* pctxt, NodeXY* pvalue);

EXTERN void asn1Print_NodeXY (const char* name, const NodeXY* pvalue);

EXTERN int asn1PrtToStrm_NodeXY (OSCTXT *pctxt, 
   const char* name, const NodeXY* pvalue);

EXTERN int asn1Init_NodeXY (NodeXY* pvalue);

EXTERN void asn1Free_NodeXY (OSCTXT *pctxt, NodeXY* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeSetXY                                                 */
/*                                                            */
/**************************************************************/
/*
NodeSetXY ::= SEQUENCE (SIZE (2..63)) OF NodeXY
*/
/* List of NodeXY */
typedef OSRTDList NodeSetXY;

EXTERN int asn1PE_NodeSetXY (OSCTXT* pctxt, NodeSetXY* pvalue);

EXTERN int asn1PD_NodeSetXY (OSCTXT* pctxt, NodeSetXY* pvalue);

EXTERN void asn1Print_NodeSetXY (const char* name, const NodeSetXY* pvalue);

EXTERN int asn1PrtToStrm_NodeSetXY (OSCTXT *pctxt, 
   const char* name, const NodeSetXY* pvalue);

EXTERN int asn1Init_NodeSetXY (NodeSetXY* pvalue);

EXTERN void asn1Free_NodeSetXY (OSCTXT *pctxt, NodeSetXY* pvalue);

/**************************************************************/
/*                                                            */
/*  ComputedLane_offsetXaxis                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ComputedLane'
*/
/* Choice tag constants */

#define T_ComputedLane_offsetXaxis_small_ 1
#define T_ComputedLane_offsetXaxis_large_ 2

typedef struct EXTERN ComputedLane_offsetXaxis {
   OSINT32 t;
   union {
      /* t = 1 */
      DrivenLineOffsetSm small_;
      /* t = 2 */
      DrivenLineOffsetLg large_;
   } u;
} ComputedLane_offsetXaxis;

EXTERN int asn1PE_ComputedLane_offsetXaxis (OSCTXT* pctxt, ComputedLane_offsetXaxis* pvalue);

EXTERN int asn1PD_ComputedLane_offsetXaxis (OSCTXT* pctxt, ComputedLane_offsetXaxis* pvalue);

EXTERN void asn1Print_ComputedLane_offsetXaxis 
   (const char* name, const ComputedLane_offsetXaxis* pvalue);

EXTERN int asn1PrtToStrm_ComputedLane_offsetXaxis (OSCTXT *pctxt, 
   const char* name, const ComputedLane_offsetXaxis* pvalue);

EXTERN int asn1Init_ComputedLane_offsetXaxis (ComputedLane_offsetXaxis* pvalue);

/**************************************************************/
/*                                                            */
/*  ComputedLane_offsetYaxis                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ComputedLane'
*/
/* Choice tag constants */

#define T_ComputedLane_offsetYaxis_small_ 1
#define T_ComputedLane_offsetYaxis_large_ 2

typedef struct EXTERN ComputedLane_offsetYaxis {
   OSINT32 t;
   union {
      /* t = 1 */
      DrivenLineOffsetSm small_;
      /* t = 2 */
      DrivenLineOffsetLg large_;
   } u;
} ComputedLane_offsetYaxis;

EXTERN int asn1PE_ComputedLane_offsetYaxis (OSCTXT* pctxt, ComputedLane_offsetYaxis* pvalue);

EXTERN int asn1PD_ComputedLane_offsetYaxis (OSCTXT* pctxt, ComputedLane_offsetYaxis* pvalue);

EXTERN void asn1Print_ComputedLane_offsetYaxis 
   (const char* name, const ComputedLane_offsetYaxis* pvalue);

EXTERN int asn1PrtToStrm_ComputedLane_offsetYaxis (OSCTXT *pctxt, 
   const char* name, const ComputedLane_offsetYaxis* pvalue);

EXTERN int asn1Init_ComputedLane_offsetYaxis (ComputedLane_offsetYaxis* pvalue);

/**************************************************************/
/*                                                            */
/*  ComputedLane_regional                                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ComputedLane'
*/
/* List of RegionalExtension */
typedef OSRTDList ComputedLane_regional;

EXTERN int asn1PE_ComputedLane_regional (OSCTXT* pctxt, ComputedLane_regional* pvalue);

EXTERN int asn1PD_ComputedLane_regional (OSCTXT* pctxt, ComputedLane_regional* pvalue);

EXTERN void asn1Print_ComputedLane_regional 
   (const char* name, const ComputedLane_regional* pvalue);

EXTERN int asn1PrtToStrm_ComputedLane_regional (OSCTXT *pctxt, 
   const char* name, const ComputedLane_regional* pvalue);

EXTERN int asn1Init_ComputedLane_regional (ComputedLane_regional* pvalue);

EXTERN void asn1Free_ComputedLane_regional (OSCTXT *pctxt, 
   ComputedLane_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  ComputedLane                                              */
/*                                                            */
/**************************************************************/
/*
ComputedLane ::= SEQUENCE {
   -- Data needed to created a computed lane
   referenceLaneId [0] LaneID,
                         -- the lane ID upon which this 
                         -- computed lane will be based 
   -- Lane Offset in X and Y direction
   offsetXaxis [1] CHOICE {
      small [0] DrivenLineOffsetSm,
      large [1] DrivenLineOffsetLg
   },
   offsetYaxis [2] CHOICE {
      small [0] DrivenLineOffsetSm,
      large [1] DrivenLineOffsetLg
   },
                         -- A path X offset value for translations of the 
                         -- path's points when creating translated lanes. 
                         -- The values found in the reference lane are 
                         -- all offset based on the X and Y values from 
                         -- the coordinates of the reference lane's 
                         -- initial path point.   
   -- Lane Rotation
   rotateXY [3] Angle OPTIONAL,
                         -- A path rotation value for the entire lane
                         -- Observe that this rotates the existing orientation 
                         -- of the referenced lane, it does not replace it.
                         -- Rotation occurs about the initial path point.
   -- Lane Path Scale (zooming)
   scaleXaxis [4] Scale-B12 OPTIONAL,
   scaleYaxis [5] Scale-B12 OPTIONAL,
                         -- value for translations or zooming of the path's 
                         -- points. The values found in the reference lane 
                         -- are all expanded or contracted based on the X 
                         -- and Y and width values from the coordinates of 
                         -- the reference lane's initial path point.  
                         -- The Z axis remains untouched.  
   regional [6] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN ComputedLane {
   struct {
      unsigned rotateXYPresent : 1;
      unsigned scaleXaxisPresent : 1;
      unsigned scaleYaxisPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   LaneID referenceLaneId;
   ComputedLane_offsetXaxis offsetXaxis;
   ComputedLane_offsetYaxis offsetYaxis;
   Angle rotateXY;
   Scale_B12 scaleXaxis;
   Scale_B12 scaleYaxis;
   ComputedLane_regional regional;
   OSRTDList extElem1;
} ComputedLane;

EXTERN int asn1PE_ComputedLane (OSCTXT* pctxt, ComputedLane* pvalue);

EXTERN int asn1PD_ComputedLane (OSCTXT* pctxt, ComputedLane* pvalue);

EXTERN void asn1Print_ComputedLane (const char* name, const ComputedLane* pvalue);

EXTERN int asn1PrtToStrm_ComputedLane (OSCTXT *pctxt, 
   const char* name, const ComputedLane* pvalue);

EXTERN int asn1Init_ComputedLane (ComputedLane* pvalue);

EXTERN void asn1Free_ComputedLane (OSCTXT *pctxt, ComputedLane* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeListXY                                                */
/*                                                            */
/**************************************************************/
/*
NodeListXY ::= CHOICE {
   nodes [0] NodeSetXY,
             -- a lane made up of two or more
             -- XY node points and any attributes 
             -- defined in those nodes
   computed [1] ComputedLane,
         -- a lane path computed by translating 
         -- the data defined by another lane
   ...
}
*/
/* Choice tag constants */

#define T_NodeListXY_nodes              1
#define T_NodeListXY_computed           2
#define T_NodeListXY_extElem1           3

typedef struct EXTERN NodeListXY {
   OSINT32 t;
   union {
      /* t = 1 */
      NodeSetXY *nodes;
      /* t = 2 */
      ComputedLane *computed;
      /* t = 3 */
      ASN1OpenType *extElem1;
   } u;
} NodeListXY;

EXTERN int asn1PE_NodeListXY (OSCTXT* pctxt, NodeListXY* pvalue);

EXTERN int asn1PD_NodeListXY (OSCTXT* pctxt, NodeListXY* pvalue);

EXTERN void asn1Print_NodeListXY (const char* name, const NodeListXY* pvalue);

EXTERN int asn1PrtToStrm_NodeListXY (OSCTXT *pctxt, 
   const char* name, const NodeListXY* pvalue);

EXTERN int asn1Init_NodeListXY (NodeListXY* pvalue);

EXTERN void asn1Free_NodeListXY (OSCTXT *pctxt, NodeListXY* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectingLane                                            */
/*                                                            */
/**************************************************************/
/*
ConnectingLane ::= SEQUENCE {
   lane [0] LaneID, -- Index of the connecting lane
   maneuver [1] AllowedManeuvers OPTIONAL
                       -- The Maneuver between 
                       -- the enclosing lane and this lane
                       -- at the stop line to connect them
}
*/
typedef struct EXTERN ConnectingLane {
   struct {
      unsigned maneuverPresent : 1;
   } m;
   LaneID lane;
   AllowedManeuvers maneuver;
} ConnectingLane;

EXTERN int asn1PE_ConnectingLane (OSCTXT* pctxt, ConnectingLane* pvalue);

EXTERN int asn1PD_ConnectingLane (OSCTXT* pctxt, ConnectingLane* pvalue);

EXTERN void asn1Print_ConnectingLane (const char* name, const ConnectingLane* pvalue);

EXTERN int asn1PrtToStrm_ConnectingLane (OSCTXT *pctxt, 
   const char* name, const ConnectingLane* pvalue);

EXTERN int asn1Init_ConnectingLane (ConnectingLane* pvalue);

/**************************************************************/
/*                                                            */
/*  Connection                                                */
/*                                                            */
/**************************************************************/
/*
Connection ::= SEQUENCE {
   -- The subject lane connecting to this lane is:
   connectingLane [0] ConnectingLane,
                      -- The index of the connecting lane and also
                      -- the maneuver from the current lane to it
   remoteIntersection [1] IntersectionReferenceID OPTIONAL,
                      -- This entry is only used when the 
                      -- indicated connecting lane belongs 
                      -- to another intersection layout. This 
                      -- provides a means to create meshes of lanes
   -- SPAT mapping details at the stop line are:
   signalGroup [2] SignalGroupID OPTIONAL,
                      -- The matching signal group send by 
                      -- the SPAT message for this lane/maneuver.
                      -- Shall be present unless the connectingLane 
                      -- has no signal group (is un-signalized)
   userClass [3] RestrictionClassID OPTIONAL,
                      -- The Restriction Class of users this applies to
                      -- The use of some lane/maneuver and SignalGroupID 
                      -- pairings are restricted to selected users.
                      -- When absent, the SignalGroupID applies to all
   -- Movement assist details are given by:
   connectionID [4] LaneConnectionID OPTIONAL
                      -- An optional connection index used to 
                      -- relate this lane connection to any dynamic 
                      -- clearance data in the SPAT. Note that
                      -- the index may be shared with other 
                      -- connections if the clearance data is common
}
*/
typedef struct EXTERN Connection {
   struct {
      unsigned remoteIntersectionPresent : 1;
      unsigned signalGroupPresent : 1;
      unsigned userClassPresent : 1;
      unsigned connectionIDPresent : 1;
   } m;
   ConnectingLane connectingLane;
   IntersectionReferenceID remoteIntersection;
   SignalGroupID signalGroup;
   RestrictionClassID userClass;
   LaneConnectionID connectionID;
} Connection;

EXTERN int asn1PE_Connection (OSCTXT* pctxt, Connection* pvalue);

EXTERN int asn1PD_Connection (OSCTXT* pctxt, Connection* pvalue);

EXTERN void asn1Print_Connection (const char* name, const Connection* pvalue);

EXTERN int asn1PrtToStrm_Connection (OSCTXT *pctxt, 
   const char* name, const Connection* pvalue);

EXTERN int asn1Init_Connection (Connection* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectsToList                                            */
/*                                                            */
/**************************************************************/
/*
ConnectsToList ::= SEQUENCE (SIZE (1..16)) OF Connection
*/
/* List of Connection */
typedef OSRTDList ConnectsToList;

EXTERN int asn1PE_ConnectsToList (OSCTXT* pctxt, ConnectsToList* pvalue);

EXTERN int asn1PD_ConnectsToList (OSCTXT* pctxt, ConnectsToList* pvalue);

EXTERN void asn1Print_ConnectsToList (const char* name, const ConnectsToList* pvalue);

EXTERN int asn1PrtToStrm_ConnectsToList (OSCTXT *pctxt, 
   const char* name, const ConnectsToList* pvalue);

EXTERN int asn1Init_ConnectsToList (ConnectsToList* pvalue);

EXTERN void asn1Free_ConnectsToList (OSCTXT *pctxt, ConnectsToList* pvalue);

/**************************************************************/
/*                                                            */
/*  OverlayLaneList                                           */
/*                                                            */
/**************************************************************/
/*
OverlayLaneList ::= SEQUENCE (SIZE (1..5)) OF LaneID
    The unique ID numbers for any lane object which have
    spatial paths that overlay (run on top of, and not
    simply cross with) the current lane.
    Such as a train path that overlays a motor vehicle
    lane object for a roadway segment.

*/
typedef struct EXTERN OverlayLaneList {
   OSSIZE n;
   LaneID elem[5];
} OverlayLaneList;

EXTERN int asn1PE_OverlayLaneList (OSCTXT* pctxt, OverlayLaneList* pvalue);

EXTERN int asn1PD_OverlayLaneList (OSCTXT* pctxt, OverlayLaneList* pvalue);

EXTERN void asn1Print_OverlayLaneList 
   (const char* name, const OverlayLaneList* pvalue);

EXTERN int asn1PrtToStrm_OverlayLaneList (OSCTXT *pctxt, 
   const char* name, const OverlayLaneList* pvalue);

EXTERN int asn1Init_OverlayLaneList (OverlayLaneList* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericLane_regional                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericLane'
*/
/* List of RegionalExtension */
typedef OSRTDList GenericLane_regional;

EXTERN int asn1PE_GenericLane_regional (OSCTXT* pctxt, GenericLane_regional* pvalue);

EXTERN int asn1PD_GenericLane_regional (OSCTXT* pctxt, GenericLane_regional* pvalue);

EXTERN void asn1Print_GenericLane_regional 
   (const char* name, const GenericLane_regional* pvalue);

EXTERN int asn1PrtToStrm_GenericLane_regional (OSCTXT *pctxt, 
   const char* name, const GenericLane_regional* pvalue);

EXTERN int asn1Init_GenericLane_regional (GenericLane_regional* pvalue);

EXTERN void asn1Free_GenericLane_regional (OSCTXT *pctxt, 
   GenericLane_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericLane                                               */
/*                                                            */
/**************************************************************/
/*
GenericLane ::= SEQUENCE {
   laneID [0] LaneID,
                    -- The unique ID number assigned 
                    -- to this lane object
   name [1] DescriptiveName OPTIONAL,
                    -- often for debug use only 
                    -- but at times used to name ped crossings
   ingressApproach [2] ApproachID OPTIONAL, -- inbound
   egressApproach [3] ApproachID OPTIONAL, -- outbound
                    -- Approach IDs to which this lane belongs
   laneAttributes [4] LaneAttributes,
                    -- All Attribute information about 
                    -- the basic selected lane type
                    -- Directions of use, Geometric co-sharing
                    -- and Type Specific Attributes
                    -- These Attributes are 'lane - global' that is,
                    -- they are true for the entire length of the lane
   maneuvers [5] AllowedManeuvers OPTIONAL,
                    -- the permitted maneuvers for this lane
   nodeList [6] NodeListXY,
                    -- Lane spatial path information as well as
                    -- various Attribute information along the node path  
                    -- Attributes found here are more general and may
                    -- come and go over the length of the lane.
   connectsTo [7] ConnectsToList OPTIONAL,
                    -- a list of other lanes and their signal group IDs
                    -- each connecting lane and its signal group ID
                    -- is given, therefore this element provides the
                    -- information formerly in "signalGroups" in prior
                    -- editions.
   overlays [8] OverlayLaneList OPTIONAL,
                    -- A list of any lanes which have spatial paths that
                    -- overlay (run on top of, and not simply cross) 
                    -- the path of this lane when used
   regional [9] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN GenericLane {
   struct {
      unsigned namePresent : 1;
      unsigned ingressApproachPresent : 1;
      unsigned egressApproachPresent : 1;
      unsigned maneuversPresent : 1;
      unsigned connectsToPresent : 1;
      unsigned overlaysPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   LaneID laneID;
   DescriptiveName name;
   ApproachID ingressApproach;
   ApproachID egressApproach;
   LaneAttributes laneAttributes;
   AllowedManeuvers maneuvers;
   NodeListXY nodeList;
   ConnectsToList connectsTo;
   OverlayLaneList overlays;
   GenericLane_regional regional;
   OSRTDList extElem1;
} GenericLane;

EXTERN int asn1PE_GenericLane (OSCTXT* pctxt, GenericLane* pvalue);

EXTERN int asn1PD_GenericLane (OSCTXT* pctxt, GenericLane* pvalue);

EXTERN void asn1Print_GenericLane (const char* name, const GenericLane* pvalue);

EXTERN int asn1PrtToStrm_GenericLane (OSCTXT *pctxt, 
   const char* name, const GenericLane* pvalue);

EXTERN int asn1Init_GenericLane (GenericLane* pvalue);

EXTERN void asn1Free_GenericLane (OSCTXT *pctxt, GenericLane* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneList                                                  */
/*                                                            */
/**************************************************************/
/*
LaneList ::= SEQUENCE (SIZE (1..255)) OF GenericLane
*/
/* List of GenericLane */
typedef OSRTDList LaneList;

EXTERN int asn1PE_LaneList (OSCTXT* pctxt, LaneList* pvalue);

EXTERN int asn1PD_LaneList (OSCTXT* pctxt, LaneList* pvalue);

EXTERN void asn1Print_LaneList (const char* name, const LaneList* pvalue);

EXTERN int asn1PrtToStrm_LaneList (OSCTXT *pctxt, 
   const char* name, const LaneList* pvalue);

EXTERN int asn1Init_LaneList (LaneList* pvalue);

EXTERN void asn1Free_LaneList (OSCTXT *pctxt, LaneList* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalControlZone                                         */
/*                                                            */
/**************************************************************/
/*
SignalControlZone ::= SEQUENCE {
   zone [0] RegionalExtension,
   ...
}
*/
typedef struct EXTERN SignalControlZone {
   RegionalExtension zone;
   OSRTDList extElem1;
} SignalControlZone;

EXTERN int asn1PE_SignalControlZone (OSCTXT* pctxt, SignalControlZone* pvalue);

EXTERN int asn1PD_SignalControlZone (OSCTXT* pctxt, SignalControlZone* pvalue);

EXTERN void asn1Print_SignalControlZone 
   (const char* name, const SignalControlZone* pvalue);

EXTERN int asn1PrtToStrm_SignalControlZone (OSCTXT *pctxt, 
   const char* name, const SignalControlZone* pvalue);

EXTERN int asn1Init_SignalControlZone (SignalControlZone* pvalue);

EXTERN void asn1Free_SignalControlZone (OSCTXT *pctxt, SignalControlZone* pvalue);

/**************************************************************/
/*                                                            */
/*  PreemptPriorityList                                       */
/*                                                            */
/**************************************************************/
/*
PreemptPriorityList ::= SEQUENCE (SIZE (1..32)) OF SignalControlZone
*/
/* List of SignalControlZone */
typedef OSRTDList PreemptPriorityList;

EXTERN int asn1PE_PreemptPriorityList (OSCTXT* pctxt, PreemptPriorityList* pvalue);

EXTERN int asn1PD_PreemptPriorityList (OSCTXT* pctxt, PreemptPriorityList* pvalue);

EXTERN void asn1Print_PreemptPriorityList 
   (const char* name, const PreemptPriorityList* pvalue);

EXTERN int asn1PrtToStrm_PreemptPriorityList (OSCTXT *pctxt, 
   const char* name, const PreemptPriorityList* pvalue);

EXTERN int asn1Init_PreemptPriorityList (PreemptPriorityList* pvalue);

EXTERN void asn1Free_PreemptPriorityList (OSCTXT *pctxt, PreemptPriorityList* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometry_regional                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionGeometry'
*/
/* List of RegionalExtension */
typedef OSRTDList IntersectionGeometry_regional;

EXTERN int asn1PE_IntersectionGeometry_regional (OSCTXT* pctxt, IntersectionGeometry_regional* pvalue);

EXTERN int asn1PD_IntersectionGeometry_regional (OSCTXT* pctxt, IntersectionGeometry_regional* pvalue);

EXTERN void asn1Print_IntersectionGeometry_regional 
   (const char* name, const IntersectionGeometry_regional* pvalue);

EXTERN int asn1PrtToStrm_IntersectionGeometry_regional (OSCTXT *pctxt, 
   const char* name, const IntersectionGeometry_regional* pvalue);

EXTERN int asn1Init_IntersectionGeometry_regional (
   IntersectionGeometry_regional* pvalue);

EXTERN void asn1Free_IntersectionGeometry_regional (OSCTXT *pctxt, 
   IntersectionGeometry_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometry                                      */
/*                                                            */
/**************************************************************/
/*
IntersectionGeometry ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
                            -- For debug use only
   id [1] IntersectionReferenceID,
                            -- A globally unique value set, 
                            -- consisting of a regionID and 
                            -- intersection ID assignment
   revision [2] MsgCount,
   -- Required default values about lane descriptions follow
   refPoint [3] Position3D, -- The reference from which subsequent 
                            -- data points are offset until a new
                            -- point is used. 
   laneWidth [4] LaneWidth OPTIONAL,
                            -- Reference width used by all subsequent 
                            -- lanes unless a new width is given  
   speedLimits [5] SpeedLimitList OPTIONAL,
                            -- Reference regulatory speed limits
                            -- used by all subsequent 
                            -- lanes unless a new speed is given 
                            -- See Section 11 for converting and 
                            -- translating speed expressed in mph 
                            -- into units of m/s
   -- Complete details regarding each lane type in this intersection
   laneSet [6] LaneList, -- Data about one or more lanes
                            -- (all lane data is found here)
   -- Data describing how to use and request preemption and
   -- priority services from this intersection (if supported)
   -- NOTE Additonal data may be added in the next release of the 
   -- standard at this point to handle this concept
   preemptPriorityData [7] PreemptPriorityList OPTIONAL,
                           -- data about one or more regional
                           -- preempt or priority zones 
   regional [8] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN IntersectionGeometry {
   struct {
      unsigned namePresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned speedLimitsPresent : 1;
      unsigned preemptPriorityDataPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   DescriptiveName name;
   IntersectionReferenceID id;
   MsgCount revision;
   Position3D refPoint;
   LaneWidth laneWidth;
   SpeedLimitList speedLimits;
   LaneList laneSet;
   PreemptPriorityList preemptPriorityData;
   IntersectionGeometry_regional regional;
   OSRTDList extElem1;
} IntersectionGeometry;

EXTERN int asn1PE_IntersectionGeometry (OSCTXT* pctxt, IntersectionGeometry* pvalue);

EXTERN int asn1PD_IntersectionGeometry (OSCTXT* pctxt, IntersectionGeometry* pvalue);

EXTERN void asn1Print_IntersectionGeometry 
   (const char* name, const IntersectionGeometry* pvalue);

EXTERN int asn1PrtToStrm_IntersectionGeometry (OSCTXT *pctxt, 
   const char* name, const IntersectionGeometry* pvalue);

EXTERN int asn1Init_IntersectionGeometry (IntersectionGeometry* pvalue);

EXTERN void asn1Free_IntersectionGeometry (OSCTXT *pctxt, 
   IntersectionGeometry* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometryList                                  */
/*                                                            */
/**************************************************************/
/*
IntersectionGeometryList ::= SEQUENCE (SIZE (1..32)) OF IntersectionGeometry
*/
/* List of IntersectionGeometry */
typedef OSRTDList IntersectionGeometryList;

EXTERN int asn1PE_IntersectionGeometryList (OSCTXT* pctxt, IntersectionGeometryList* pvalue);

EXTERN int asn1PD_IntersectionGeometryList (OSCTXT* pctxt, IntersectionGeometryList* pvalue);

EXTERN void asn1Print_IntersectionGeometryList 
   (const char* name, const IntersectionGeometryList* pvalue);

EXTERN int asn1PrtToStrm_IntersectionGeometryList (OSCTXT *pctxt, 
   const char* name, const IntersectionGeometryList* pvalue);

EXTERN int asn1Init_IntersectionGeometryList (IntersectionGeometryList* pvalue);

EXTERN void asn1Free_IntersectionGeometryList (OSCTXT *pctxt, 
   IntersectionGeometryList* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegmentReferenceID                                    */
/*                                                            */
/**************************************************************/
/*
RoadSegmentReferenceID ::= SEQUENCE {
   region [0] RoadRegulatorID OPTIONAL,
           -- a globally unique regional assignment value
           -- typically assigned to a regional DOT authority
           -- the value zero shall be used for testing needs
   id [1] RoadSegmentID
           -- a unique mapping to the road segment
           -- in question within the above region of use
           -- during its period of assignment and use
           -- note that unlike intersectionID values, 
           -- this value can be reused by the region
}
*/
typedef struct EXTERN RoadSegmentReferenceID {
   struct {
      unsigned regionPresent : 1;
   } m;
   RoadRegulatorID region;
   RoadSegmentID id;
} RoadSegmentReferenceID;

EXTERN int asn1PE_RoadSegmentReferenceID (OSCTXT* pctxt, RoadSegmentReferenceID* pvalue);

EXTERN int asn1PD_RoadSegmentReferenceID (OSCTXT* pctxt, RoadSegmentReferenceID* pvalue);

EXTERN void asn1Print_RoadSegmentReferenceID 
   (const char* name, const RoadSegmentReferenceID* pvalue);

EXTERN int asn1PrtToStrm_RoadSegmentReferenceID (OSCTXT *pctxt, 
   const char* name, const RoadSegmentReferenceID* pvalue);

EXTERN int asn1Init_RoadSegmentReferenceID (RoadSegmentReferenceID* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadLaneSetList                                           */
/*                                                            */
/**************************************************************/
/*
RoadLaneSetList ::= SEQUENCE (SIZE (1..255)) OF GenericLane
*/
/* List of GenericLane */
typedef OSRTDList RoadLaneSetList;

EXTERN int asn1PE_RoadLaneSetList (OSCTXT* pctxt, RoadLaneSetList* pvalue);

EXTERN int asn1PD_RoadLaneSetList (OSCTXT* pctxt, RoadLaneSetList* pvalue);

EXTERN void asn1Print_RoadLaneSetList 
   (const char* name, const RoadLaneSetList* pvalue);

EXTERN int asn1PrtToStrm_RoadLaneSetList (OSCTXT *pctxt, 
   const char* name, const RoadLaneSetList* pvalue);

EXTERN int asn1Init_RoadLaneSetList (RoadLaneSetList* pvalue);

EXTERN void asn1Free_RoadLaneSetList (OSCTXT *pctxt, RoadLaneSetList* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegment_regional                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RoadSegment'
*/
/* List of RegionalExtension */
typedef OSRTDList RoadSegment_regional;

EXTERN int asn1PE_RoadSegment_regional (OSCTXT* pctxt, RoadSegment_regional* pvalue);

EXTERN int asn1PD_RoadSegment_regional (OSCTXT* pctxt, RoadSegment_regional* pvalue);

EXTERN void asn1Print_RoadSegment_regional 
   (const char* name, const RoadSegment_regional* pvalue);

EXTERN int asn1PrtToStrm_RoadSegment_regional (OSCTXT *pctxt, 
   const char* name, const RoadSegment_regional* pvalue);

EXTERN int asn1Init_RoadSegment_regional (RoadSegment_regional* pvalue);

EXTERN void asn1Free_RoadSegment_regional (OSCTXT *pctxt, 
   RoadSegment_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegment                                               */
/*                                                            */
/**************************************************************/
/*
RoadSegment ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
   id [1] RoadSegmentReferenceID,
                           -- a globally unique value for the segment
   revision [2] MsgCount,
   -- Required default values about the descriptions to follow
   refPoint [3] Position3D, -- the reference from which subsequent
                           -- data points are offset until a new
                           -- point is used.
   laneWidth [4] LaneWidth OPTIONAL,
                            -- Reference width used by all subsequent 
                            -- lanes unless a new width is given  
   speedLimits [5] SpeedLimitList OPTIONAL,
                            -- Reference regulatory speed limits
                            -- used by all subsequent 
                            -- lanes unless a new speed is given   
                            -- See Section 11 for converting and  
                            -- translating speed expressed in mph 
                            -- into units of m/s
   -- Data describing disruptions in the RoadSegment
   -- such as work zones etc will be added here;
   -- in the US the SAE ITIS codes would be used here
   -- The details regarding each lane type in the RoadSegment
   roadLaneSet [6] RoadLaneSetList,
   regional [7] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN RoadSegment {
   struct {
      unsigned namePresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned speedLimitsPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   DescriptiveName name;
   RoadSegmentReferenceID id;
   MsgCount revision;
   Position3D refPoint;
   LaneWidth laneWidth;
   SpeedLimitList speedLimits;
   RoadLaneSetList roadLaneSet;
   RoadSegment_regional regional;
   OSRTDList extElem1;
} RoadSegment;

EXTERN int asn1PE_RoadSegment (OSCTXT* pctxt, RoadSegment* pvalue);

EXTERN int asn1PD_RoadSegment (OSCTXT* pctxt, RoadSegment* pvalue);

EXTERN void asn1Print_RoadSegment (const char* name, const RoadSegment* pvalue);

EXTERN int asn1PrtToStrm_RoadSegment (OSCTXT *pctxt, 
   const char* name, const RoadSegment* pvalue);

EXTERN int asn1Init_RoadSegment (RoadSegment* pvalue);

EXTERN void asn1Free_RoadSegment (OSCTXT *pctxt, RoadSegment* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegmentList                                           */
/*                                                            */
/**************************************************************/
/*
RoadSegmentList ::= SEQUENCE (SIZE (1..32)) OF RoadSegment
*/
/* List of RoadSegment */
typedef OSRTDList RoadSegmentList;

EXTERN int asn1PE_RoadSegmentList (OSCTXT* pctxt, RoadSegmentList* pvalue);

EXTERN int asn1PD_RoadSegmentList (OSCTXT* pctxt, RoadSegmentList* pvalue);

EXTERN void asn1Print_RoadSegmentList 
   (const char* name, const RoadSegmentList* pvalue);

EXTERN int asn1PrtToStrm_RoadSegmentList (OSCTXT *pctxt, 
   const char* name, const RoadSegmentList* pvalue);

EXTERN int asn1Init_RoadSegmentList (RoadSegmentList* pvalue);

EXTERN void asn1Free_RoadSegmentList (OSCTXT *pctxt, RoadSegmentList* pvalue);

/**************************************************************/
/*                                                            */
/*  DataParameters                                            */
/*                                                            */
/**************************************************************/
/*
DataParameters ::= SEQUENCE {
   processMethod [0] IA5String (SIZE (1..255)) OPTIONAL,
   processAgency [1] IA5String (SIZE (1..255)) OPTIONAL,
   lastCheckedDate [2] IA5String (SIZE (1..255)) OPTIONAL,
   geoidUsed [3] IA5String (SIZE (1..255)) OPTIONAL,
   ...
}
*/
typedef struct EXTERN DataParameters {
   struct {
      unsigned processMethodPresent : 1;
      unsigned processAgencyPresent : 1;
      unsigned lastCheckedDatePresent : 1;
      unsigned geoidUsedPresent : 1;
   } m;
   const char* processMethod;
   const char* processAgency;
   const char* lastCheckedDate;
   const char* geoidUsed;
   OSRTDList extElem1;
} DataParameters;

EXTERN int asn1PE_DataParameters (OSCTXT* pctxt, DataParameters* pvalue);

EXTERN int asn1PD_DataParameters (OSCTXT* pctxt, DataParameters* pvalue);

EXTERN void asn1Print_DataParameters (const char* name, const DataParameters* pvalue);

EXTERN int asn1PrtToStrm_DataParameters (OSCTXT *pctxt, 
   const char* name, const DataParameters* pvalue);

EXTERN int asn1Init_DataParameters (DataParameters* pvalue);

EXTERN void asn1Free_DataParameters (OSCTXT *pctxt, DataParameters* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserType_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RestrictionUserType'
*/
/* List of RegionalExtension */
typedef OSRTDList RestrictionUserType_regional;

EXTERN int asn1PE_RestrictionUserType_regional (OSCTXT* pctxt, RestrictionUserType_regional* pvalue);

EXTERN int asn1PD_RestrictionUserType_regional (OSCTXT* pctxt, RestrictionUserType_regional* pvalue);

EXTERN void asn1Print_RestrictionUserType_regional 
   (const char* name, const RestrictionUserType_regional* pvalue);

EXTERN int asn1PrtToStrm_RestrictionUserType_regional (OSCTXT *pctxt, 
   const char* name, const RestrictionUserType_regional* pvalue);

EXTERN int asn1Init_RestrictionUserType_regional (
   RestrictionUserType_regional* pvalue);

EXTERN void asn1Free_RestrictionUserType_regional (OSCTXT *pctxt, 
   RestrictionUserType_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserType                                       */
/*                                                            */
/**************************************************************/
/*
RestrictionUserType ::= CHOICE {
   basicType [0] RestrictionAppliesTo,
               -- a set of the most commonly used types
   regional [1] SEQUENCE (SIZE (1..4)) OF RegionalExtension,
   ...
}
*/
/* Choice tag constants */

#define T_RestrictionUserType_basicType 1
#define T_RestrictionUserType_regional  2
#define T_RestrictionUserType_extElem1  3

typedef struct EXTERN RestrictionUserType {
   OSINT32 t;
   union {
      /* t = 1 */
      RestrictionAppliesTo basicType;
      /* t = 2 */
      RestrictionUserType_regional *regional;
      /* t = 3 */
      ASN1OpenType *extElem1;
   } u;
} RestrictionUserType;

EXTERN int asn1PE_RestrictionUserType (OSCTXT* pctxt, RestrictionUserType* pvalue);

EXTERN int asn1PD_RestrictionUserType (OSCTXT* pctxt, RestrictionUserType* pvalue);

EXTERN void asn1Print_RestrictionUserType 
   (const char* name, const RestrictionUserType* pvalue);

EXTERN int asn1PrtToStrm_RestrictionUserType (OSCTXT *pctxt, 
   const char* name, const RestrictionUserType* pvalue);

EXTERN int asn1Init_RestrictionUserType (RestrictionUserType* pvalue);

EXTERN void asn1Free_RestrictionUserType (OSCTXT *pctxt, RestrictionUserType* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserTypeList                                   */
/*                                                            */
/**************************************************************/
/*
RestrictionUserTypeList ::= SEQUENCE (SIZE (1..16)) OF RestrictionUserType
*/
/* List of RestrictionUserType */
typedef OSRTDList RestrictionUserTypeList;

EXTERN int asn1PE_RestrictionUserTypeList (OSCTXT* pctxt, RestrictionUserTypeList* pvalue);

EXTERN int asn1PD_RestrictionUserTypeList (OSCTXT* pctxt, RestrictionUserTypeList* pvalue);

EXTERN void asn1Print_RestrictionUserTypeList 
   (const char* name, const RestrictionUserTypeList* pvalue);

EXTERN int asn1PrtToStrm_RestrictionUserTypeList (OSCTXT *pctxt, 
   const char* name, const RestrictionUserTypeList* pvalue);

EXTERN int asn1Init_RestrictionUserTypeList (RestrictionUserTypeList* pvalue);

EXTERN void asn1Free_RestrictionUserTypeList (OSCTXT *pctxt, 
   RestrictionUserTypeList* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionClassAssignment                                */
/*                                                            */
/**************************************************************/
/*
RestrictionClassAssignment ::= SEQUENCE {
   id [0] RestrictionClassID,
            -- the unique value (within an intersection or local region)
            -- that is assigned to this group of users
   users [1] RestrictionUserTypeList
            -- The list of user types/classes 
            -- to which this restriction ID applies
}
*/
typedef struct EXTERN RestrictionClassAssignment {
   RestrictionClassID id;
   RestrictionUserTypeList users;
} RestrictionClassAssignment;

EXTERN int asn1PE_RestrictionClassAssignment (OSCTXT* pctxt, RestrictionClassAssignment* pvalue);

EXTERN int asn1PD_RestrictionClassAssignment (OSCTXT* pctxt, RestrictionClassAssignment* pvalue);

EXTERN void asn1Print_RestrictionClassAssignment 
   (const char* name, const RestrictionClassAssignment* pvalue);

EXTERN int asn1PrtToStrm_RestrictionClassAssignment (OSCTXT *pctxt, 
   const char* name, const RestrictionClassAssignment* pvalue);

EXTERN int asn1Init_RestrictionClassAssignment (RestrictionClassAssignment* pvalue);

EXTERN void asn1Free_RestrictionClassAssignment (OSCTXT *pctxt, 
   RestrictionClassAssignment* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionClassList                                      */
/*                                                            */
/**************************************************************/
/*
RestrictionClassList ::= SEQUENCE (SIZE (1..254)) OF RestrictionClassAssignment
*/
/* List of RestrictionClassAssignment */
typedef OSRTDList RestrictionClassList;

EXTERN int asn1PE_RestrictionClassList (OSCTXT* pctxt, RestrictionClassList* pvalue);

EXTERN int asn1PD_RestrictionClassList (OSCTXT* pctxt, RestrictionClassList* pvalue);

EXTERN void asn1Print_RestrictionClassList 
   (const char* name, const RestrictionClassList* pvalue);

EXTERN int asn1PrtToStrm_RestrictionClassList (OSCTXT *pctxt, 
   const char* name, const RestrictionClassList* pvalue);

EXTERN int asn1Init_RestrictionClassList (RestrictionClassList* pvalue);

EXTERN void asn1Free_RestrictionClassList (OSCTXT *pctxt, 
   RestrictionClassList* pvalue);

/**************************************************************/
/*                                                            */
/*  MapData_regional                                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MapData'
*/
/* List of RegionalExtension */
typedef OSRTDList MapData_regional;

EXTERN int asn1PE_MapData_regional (OSCTXT* pctxt, MapData_regional* pvalue);

EXTERN int asn1PD_MapData_regional (OSCTXT* pctxt, MapData_regional* pvalue);

EXTERN void asn1Print_MapData_regional 
   (const char* name, const MapData_regional* pvalue);

EXTERN int asn1PrtToStrm_MapData_regional (OSCTXT *pctxt, 
   const char* name, const MapData_regional* pvalue);

EXTERN int asn1Init_MapData_regional (MapData_regional* pvalue);

EXTERN void asn1Free_MapData_regional (OSCTXT *pctxt, MapData_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  MapData                                                   */
/*                                                            */
/**************************************************************/
/*
MapData ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   msgIssueRevision [1] MsgCount,
   layerType [2] LayerType OPTIONAL,
   layerID [3] LayerID OPTIONAL,
   intersections [4] IntersectionGeometryList OPTIONAL,
                     -- All Intersection definitions 
   roadSegments [5] RoadSegmentList OPTIONAL,
                     -- All roadway descriptions
   dataParameters [6] DataParameters OPTIONAL,
                     -- Any meta data regarding the map contents
   restrictionList [7] RestrictionClassList OPTIONAL,
                     -- Any restriction ID tables which have  
                     -- established for these map entries 
   regional [8] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN MapData {
   struct {
      unsigned timeStampPresent : 1;
      unsigned layerTypePresent : 1;
      unsigned layerIDPresent : 1;
      unsigned intersectionsPresent : 1;
      unsigned roadSegmentsPresent : 1;
      unsigned dataParametersPresent : 1;
      unsigned restrictionListPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MinuteOfTheYear timeStamp;
   MsgCount msgIssueRevision;
   LayerType layerType;
   LayerID layerID;
   IntersectionGeometryList intersections;
   RoadSegmentList roadSegments;
   DataParameters dataParameters;
   RestrictionClassList restrictionList;
   MapData_regional regional;
   OSRTDList extElem1;
} MapData;

EXTERN int asn1PE_MapData (OSCTXT* pctxt, MapData* pvalue);

EXTERN int asn1PD_MapData (OSCTXT* pctxt, MapData* pvalue);

EXTERN void asn1Print_MapData (const char* name, const MapData* pvalue);

EXTERN int asn1PrtToStrm_MapData (OSCTXT *pctxt, 
   const char* name, const MapData* pvalue);

EXTERN int asn1Init_MapData (MapData* pvalue);

EXTERN void asn1Free_MapData (OSCTXT *pctxt, MapData* pvalue);

/**************************************************************/
/*                                                            */
/*  NMEAcorrections_regional                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NMEAcorrections'
*/
/* List of RegionalExtension */
typedef OSRTDList NMEAcorrections_regional;

EXTERN int asn1PE_NMEAcorrections_regional (OSCTXT* pctxt, NMEAcorrections_regional* pvalue);

EXTERN int asn1PD_NMEAcorrections_regional (OSCTXT* pctxt, NMEAcorrections_regional* pvalue);

EXTERN void asn1Print_NMEAcorrections_regional 
   (const char* name, const NMEAcorrections_regional* pvalue);

EXTERN int asn1PrtToStrm_NMEAcorrections_regional (OSCTXT *pctxt, 
   const char* name, const NMEAcorrections_regional* pvalue);

EXTERN int asn1Init_NMEAcorrections_regional (NMEAcorrections_regional* pvalue);

EXTERN void asn1Free_NMEAcorrections_regional (OSCTXT *pctxt, 
   NMEAcorrections_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  NMEAcorrections                                           */
/*                                                            */
/**************************************************************/
/*
NMEAcorrections ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   rev [1] NMEA-Revision OPTIONAL,
             -- the specific edition of the standard
             -- that is being sent, 4.x at the time of publication
   msg [2] NMEA-MsgType OPTIONAL,
             -- the message and sub-message type, as
             -- defined in the revision being used
   -- NOTE The message type is also in the payload expressed as a string, 
   wdCount [3] ObjectCount OPTIONAL,
             -- a count of octets to follow
             -- observe that not all NMEA sentences are limited to 82 characters 
   payload [4] NMEA-Payload,
   regional [5] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN NMEAcorrections {
   struct {
      unsigned timeStampPresent : 1;
      unsigned revPresent : 1;
      unsigned msgPresent : 1;
      unsigned wdCountPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MinuteOfTheYear timeStamp;
   NMEA_Revision rev;
   NMEA_MsgType msg;
   ObjectCount wdCount;
   NMEA_Payload payload;
   NMEAcorrections_regional regional;
   OSRTDList extElem1;
} NMEAcorrections;

EXTERN int asn1PE_NMEAcorrections (OSCTXT* pctxt, NMEAcorrections* pvalue);

EXTERN int asn1PD_NMEAcorrections (OSCTXT* pctxt, NMEAcorrections* pvalue);

EXTERN void asn1Print_NMEAcorrections 
   (const char* name, const NMEAcorrections* pvalue);

EXTERN int asn1PrtToStrm_NMEAcorrections (OSCTXT *pctxt, 
   const char* name, const NMEAcorrections* pvalue);

EXTERN int asn1Init_NMEAcorrections (NMEAcorrections* pvalue);

EXTERN void asn1Free_NMEAcorrections (OSCTXT *pctxt, NMEAcorrections* pvalue);

/**************************************************************/
/*                                                            */
/*  PropelledInformation                                      */
/*                                                            */
/**************************************************************/
/*
PropelledInformation ::= CHOICE {
   human [0] HumanPropelledType, -- PersonalDeviceUserType would be a aPEDESTRIAN
   animal [1] AnimalPropelledType,
   motor [2] MotorizedPropelledType,
   ...
}
*/
/* Choice tag constants */

#define T_PropelledInformation_human    1
#define T_PropelledInformation_animal   2
#define T_PropelledInformation_motor    3
#define T_PropelledInformation_extElem1 4

typedef struct EXTERN PropelledInformation {
   OSINT32 t;
   union {
      /* t = 1 */
      HumanPropelledType human;
      /* t = 2 */
      AnimalPropelledType animal;
      /* t = 3 */
      MotorizedPropelledType motor;
      /* t = 4 */
      ASN1OpenType *extElem1;
   } u;
} PropelledInformation;

EXTERN int asn1PE_PropelledInformation (OSCTXT* pctxt, PropelledInformation* pvalue);

EXTERN int asn1PD_PropelledInformation (OSCTXT* pctxt, PropelledInformation* pvalue);

EXTERN void asn1Print_PropelledInformation 
   (const char* name, const PropelledInformation* pvalue);

EXTERN int asn1PrtToStrm_PropelledInformation (OSCTXT *pctxt, 
   const char* name, const PropelledInformation* pvalue);

EXTERN int asn1Init_PropelledInformation (PropelledInformation* pvalue);

EXTERN void asn1Free_PropelledInformation (OSCTXT *pctxt, 
   PropelledInformation* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalSafetyMessage_regional                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'PersonalSafetyMessage'
*/
/* List of RegionalExtension */
typedef OSRTDList PersonalSafetyMessage_regional;

EXTERN int asn1PE_PersonalSafetyMessage_regional (OSCTXT* pctxt, PersonalSafetyMessage_regional* pvalue);

EXTERN int asn1PD_PersonalSafetyMessage_regional (OSCTXT* pctxt, PersonalSafetyMessage_regional* pvalue);

EXTERN void asn1Print_PersonalSafetyMessage_regional 
   (const char* name, const PersonalSafetyMessage_regional* pvalue);

EXTERN int asn1PrtToStrm_PersonalSafetyMessage_regional (OSCTXT *pctxt, 
   const char* name, const PersonalSafetyMessage_regional* pvalue);

EXTERN int asn1Init_PersonalSafetyMessage_regional (
   PersonalSafetyMessage_regional* pvalue);

EXTERN void asn1Free_PersonalSafetyMessage_regional (OSCTXT *pctxt, 
   PersonalSafetyMessage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  PersonalSafetyMessage                                     */
/*                                                            */
/**************************************************************/
/*
PersonalSafetyMessage ::= SEQUENCE {
   basicType [0] PersonalDeviceUserType,
   secMark [1] DSecond,
   msgCnt [2] MsgCount,
   id [3] TemporaryID,
   position [4] Position3D, --  Lat, Long, Elevation     
   accuracy [5] PositionalAccuracy,
   speed [6] Velocity,
   heading [7] Heading,
   accelSet [8] AccelerationSet4Way OPTIONAL,
   pathHistory [9] PathHistory OPTIONAL,
   pathPrediction [10] PathPrediction OPTIONAL,
   propulsion [11] PropelledInformation OPTIONAL,
   useState [12] PersonalDeviceUsageState OPTIONAL,
   crossRequest [13] PersonalCrossingRequest OPTIONAL,
   crossState [14] PersonalCrossingInProgress OPTIONAL,
   clusterSize [15] NumberOfParticipantsInCluster OPTIONAL,
   clusterRadius [16] PersonalClusterRadius OPTIONAL,
   eventResponderType [17] PublicSafetyEventResponderWorkerType OPTIONAL,
   activityType [18] PublicSafetyAndRoadWorkerActivity OPTIONAL,
   activitySubType [19] PublicSafetyDirectingTrafficSubType OPTIONAL,
   assistType [20] PersonalAssistive OPTIONAL,
   sizing [21] UserSizeAndBehaviour OPTIONAL,
   attachment [22] Attachment OPTIONAL,
   attachmentRadius [23] AttachmentRadius OPTIONAL,
   animalType [24] AnimalType OPTIONAL,
   regional [25] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN PersonalSafetyMessage {
   struct {
      unsigned accelSetPresent : 1;
      unsigned pathHistoryPresent : 1;
      unsigned pathPredictionPresent : 1;
      unsigned propulsionPresent : 1;
      unsigned useStatePresent : 1;
      unsigned crossRequestPresent : 1;
      unsigned crossStatePresent : 1;
      unsigned clusterSizePresent : 1;
      unsigned clusterRadiusPresent : 1;
      unsigned eventResponderTypePresent : 1;
      unsigned activityTypePresent : 1;
      unsigned activitySubTypePresent : 1;
      unsigned assistTypePresent : 1;
      unsigned sizingPresent : 1;
      unsigned attachmentPresent : 1;
      unsigned attachmentRadiusPresent : 1;
      unsigned animalTypePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   PersonalDeviceUserType basicType;
   DSecond secMark;
   MsgCount msgCnt;
   TemporaryID id;
   Position3D position;
   PositionalAccuracy accuracy;
   Velocity speed;
   Heading heading;
   AccelerationSet4Way accelSet;
   PathHistory pathHistory;
   PathPrediction pathPrediction;
   PropelledInformation propulsion;
   PersonalDeviceUsageState useState;
   PersonalCrossingRequest crossRequest;
   PersonalCrossingInProgress crossState;
   NumberOfParticipantsInCluster clusterSize;
   PersonalClusterRadius clusterRadius;
   PublicSafetyEventResponderWorkerType eventResponderType;
   PublicSafetyAndRoadWorkerActivity activityType;
   PublicSafetyDirectingTrafficSubType activitySubType;
   PersonalAssistive assistType;
   UserSizeAndBehaviour sizing;
   Attachment attachment;
   AttachmentRadius attachmentRadius;
   AnimalType animalType;
   PersonalSafetyMessage_regional regional;
   OSRTDList extElem1;
} PersonalSafetyMessage;

EXTERN int asn1PE_PersonalSafetyMessage (OSCTXT* pctxt, PersonalSafetyMessage* pvalue);

EXTERN int asn1PD_PersonalSafetyMessage (OSCTXT* pctxt, PersonalSafetyMessage* pvalue);

EXTERN void asn1Print_PersonalSafetyMessage 
   (const char* name, const PersonalSafetyMessage* pvalue);

EXTERN int asn1PrtToStrm_PersonalSafetyMessage (OSCTXT *pctxt, 
   const char* name, const PersonalSafetyMessage* pvalue);

EXTERN int asn1Init_PersonalSafetyMessage (PersonalSafetyMessage* pvalue);

EXTERN void asn1Free_PersonalSafetyMessage (OSCTXT *pctxt, 
   PersonalSafetyMessage* pvalue);

/**************************************************************/
/*                                                            */
/*  Sample                                                    */
/*                                                            */
/**************************************************************/
/*
Sample ::= SEQUENCE {
   sampleStart [0] INTEGER (0..255), --  Sample Starting Point
   sampleEnd [1] INTEGER (0..255) --  Sample Ending Point
}
*/
typedef struct EXTERN Sample {
   OSUINT8 sampleStart;
   OSUINT8 sampleEnd;
} Sample;

EXTERN int asn1PE_Sample (OSCTXT* pctxt, Sample* pvalue);

EXTERN int asn1PD_Sample (OSCTXT* pctxt, Sample* pvalue);

EXTERN void asn1Print_Sample (const char* name, const Sample* pvalue);

EXTERN int asn1PrtToStrm_Sample (OSCTXT *pctxt, 
   const char* name, const Sample* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeDataManagement_term                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeDataManagement'
*/
/* Choice tag constants */

#define T_ProbeDataManagement_term_termtime 1
#define T_ProbeDataManagement_term_termDistance 2

typedef struct EXTERN ProbeDataManagement_term {
   OSINT32 t;
   union {
      /* t = 1 */
      TermTime termtime;
      /* t = 2 */
      TermDistance termDistance;
   } u;
} ProbeDataManagement_term;

EXTERN int asn1PE_ProbeDataManagement_term (OSCTXT* pctxt, ProbeDataManagement_term* pvalue);

EXTERN int asn1PD_ProbeDataManagement_term (OSCTXT* pctxt, ProbeDataManagement_term* pvalue);

EXTERN void asn1Print_ProbeDataManagement_term 
   (const char* name, const ProbeDataManagement_term* pvalue);

EXTERN int asn1PrtToStrm_ProbeDataManagement_term (OSCTXT *pctxt, 
   const char* name, const ProbeDataManagement_term* pvalue);

EXTERN int asn1Init_ProbeDataManagement_term (ProbeDataManagement_term* pvalue);

/**************************************************************/
/*                                                            */
/*  SnapshotTime                                              */
/*                                                            */
/**************************************************************/
/*
SnapshotTime ::= SEQUENCE {
   speed1 [0] GrossSpeed, -- meters/sec - the instantaneous speed  
                           -- when the calculation is performed
   time1 [1] SecondOfTime, -- in seconds
   speed2 [2] GrossSpeed, -- meters/sec - the instantaneous speed 
                           -- when the calculation is performed
   time2 [3] SecondOfTime -- in seconds
}
*/
typedef struct EXTERN SnapshotTime {
   GrossSpeed speed1;
   SecondOfTime time1;
   GrossSpeed speed2;
   SecondOfTime time2;
} SnapshotTime;

EXTERN int asn1PE_SnapshotTime (OSCTXT* pctxt, SnapshotTime* pvalue);

EXTERN int asn1PD_SnapshotTime (OSCTXT* pctxt, SnapshotTime* pvalue);

EXTERN void asn1Print_SnapshotTime (const char* name, const SnapshotTime* pvalue);

EXTERN int asn1PrtToStrm_SnapshotTime (OSCTXT *pctxt, 
   const char* name, const SnapshotTime* pvalue);

/**************************************************************/
/*                                                            */
/*  SnapshotDistance                                          */
/*                                                            */
/**************************************************************/
/*
SnapshotDistance ::= SEQUENCE {
   distance1 [0] GrossDistance, -- meters
   speed1 [1] GrossSpeed, -- meters/second
   distance2 [2] GrossDistance, -- meters
   speed2 [3] GrossSpeed -- meters/second
}
*/
typedef struct EXTERN SnapshotDistance {
   GrossDistance distance1;
   GrossSpeed speed1;
   GrossDistance distance2;
   GrossSpeed speed2;
} SnapshotDistance;

EXTERN int asn1PE_SnapshotDistance (OSCTXT* pctxt, SnapshotDistance* pvalue);

EXTERN int asn1PD_SnapshotDistance (OSCTXT* pctxt, SnapshotDistance* pvalue);

EXTERN void asn1Print_SnapshotDistance 
   (const char* name, const SnapshotDistance* pvalue);

EXTERN int asn1PrtToStrm_SnapshotDistance (OSCTXT *pctxt, 
   const char* name, const SnapshotDistance* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeDataManagement_snapshot                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeDataManagement'
*/
/* Choice tag constants */

#define T_ProbeDataManagement_snapshot_snapshotTime 1
#define T_ProbeDataManagement_snapshot_snapshotDistance 2

typedef struct EXTERN ProbeDataManagement_snapshot {
   OSINT32 t;
   union {
      /* t = 1 */
      SnapshotTime *snapshotTime;
      /* t = 2 */
      SnapshotDistance *snapshotDistance;
   } u;
} ProbeDataManagement_snapshot;

EXTERN int asn1PE_ProbeDataManagement_snapshot (OSCTXT* pctxt, ProbeDataManagement_snapshot* pvalue);

EXTERN int asn1PD_ProbeDataManagement_snapshot (OSCTXT* pctxt, ProbeDataManagement_snapshot* pvalue);

EXTERN void asn1Print_ProbeDataManagement_snapshot 
   (const char* name, const ProbeDataManagement_snapshot* pvalue);

EXTERN int asn1PrtToStrm_ProbeDataManagement_snapshot (OSCTXT *pctxt, 
   const char* name, const ProbeDataManagement_snapshot* pvalue);

EXTERN int asn1Init_ProbeDataManagement_snapshot (
   ProbeDataManagement_snapshot* pvalue);

EXTERN void asn1Free_ProbeDataManagement_snapshot (OSCTXT *pctxt, 
   ProbeDataManagement_snapshot* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatusRequest                                      */
/*                                                            */
/**************************************************************/
/*
VehicleStatusRequest ::= SEQUENCE {
   dataType [0] VehicleStatusDeviceTypeTag,
   subType [1] INTEGER (1..15) OPTIONAL,
   sendOnLessThenValue [2] INTEGER (-32767..32767) OPTIONAL,
   sendOnMoreThenValue [3] INTEGER (-32767..32767) OPTIONAL,
   sendAll [4] BOOLEAN OPTIONAL,
   ...
}
*/
typedef struct EXTERN VehicleStatusRequest {
   struct {
      unsigned subTypePresent : 1;
      unsigned sendOnLessThenValuePresent : 1;
      unsigned sendOnMoreThenValuePresent : 1;
      unsigned sendAllPresent : 1;
   } m;
   VehicleStatusDeviceTypeTag dataType;
   OSUINT8 subType;
   OSINT16 sendOnLessThenValue;
   OSINT16 sendOnMoreThenValue;
   OSBOOL sendAll;
   OSRTDList extElem1;
} VehicleStatusRequest;

EXTERN int asn1PE_VehicleStatusRequest (OSCTXT* pctxt, VehicleStatusRequest* pvalue);

EXTERN int asn1PD_VehicleStatusRequest (OSCTXT* pctxt, VehicleStatusRequest* pvalue);

EXTERN void asn1Print_VehicleStatusRequest 
   (const char* name, const VehicleStatusRequest* pvalue);

EXTERN int asn1PrtToStrm_VehicleStatusRequest (OSCTXT *pctxt, 
   const char* name, const VehicleStatusRequest* pvalue);

EXTERN int asn1Init_VehicleStatusRequest (VehicleStatusRequest* pvalue);

EXTERN void asn1Free_VehicleStatusRequest (OSCTXT *pctxt, 
   VehicleStatusRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatusRequestList                                  */
/*                                                            */
/**************************************************************/
/*
VehicleStatusRequestList ::= SEQUENCE (SIZE (1..32)) OF VehicleStatusRequest
*/
/* List of VehicleStatusRequest */
typedef OSRTDList VehicleStatusRequestList;

EXTERN int asn1PE_VehicleStatusRequestList (OSCTXT* pctxt, VehicleStatusRequestList* pvalue);

EXTERN int asn1PD_VehicleStatusRequestList (OSCTXT* pctxt, VehicleStatusRequestList* pvalue);

EXTERN void asn1Print_VehicleStatusRequestList 
   (const char* name, const VehicleStatusRequestList* pvalue);

EXTERN int asn1PrtToStrm_VehicleStatusRequestList (OSCTXT *pctxt, 
   const char* name, const VehicleStatusRequestList* pvalue);

EXTERN int asn1Init_VehicleStatusRequestList (VehicleStatusRequestList* pvalue);

EXTERN void asn1Free_VehicleStatusRequestList (OSCTXT *pctxt, 
   VehicleStatusRequestList* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeDataManagement_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeDataManagement'
*/
/* List of RegionalExtension */
typedef OSRTDList ProbeDataManagement_regional;

EXTERN int asn1PE_ProbeDataManagement_regional (OSCTXT* pctxt, ProbeDataManagement_regional* pvalue);

EXTERN int asn1PD_ProbeDataManagement_regional (OSCTXT* pctxt, ProbeDataManagement_regional* pvalue);

EXTERN void asn1Print_ProbeDataManagement_regional 
   (const char* name, const ProbeDataManagement_regional* pvalue);

EXTERN int asn1PrtToStrm_ProbeDataManagement_regional (OSCTXT *pctxt, 
   const char* name, const ProbeDataManagement_regional* pvalue);

EXTERN int asn1Init_ProbeDataManagement_regional (
   ProbeDataManagement_regional* pvalue);

EXTERN void asn1Free_ProbeDataManagement_regional (OSCTXT *pctxt, 
   ProbeDataManagement_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeDataManagement                                       */
/*                                                            */
/**************************************************************/
/*
ProbeDataManagement ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   sample [1] Sample, -- Identifies the vehicle  
                                          -- population affected by this
   directions [2] HeadingSlice, -- Applicable headings/directions
   term [3] CHOICE {
      termtime [0] TermTime, -- Terminate this management process 
                                          -- based on Time-to-Live
      termDistance [1] TermDistance -- Terminate management process 
                                          -- based on Distance-to-Live
   },
   snapshot [4] CHOICE {
      snapshotTime [0] SnapshotTime, -- Collect snapshots based on Time
                                          -- the value 0 indicates forever
      snapshotDistance [1] SnapshotDistance -- Collect snapshots based on combination 
                                          -- of vehicle Speed and Distance
   },
   txInterval [5] SecondOfTime, -- Time Interval at which to send snapshots
   dataElements [6] VehicleStatusRequestList OPTIONAL,
                                          -- Control data frames and associated 
                                          -- trigger thresholds to be changed 
   regional [7] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN ProbeDataManagement {
   struct {
      unsigned timeStampPresent : 1;
      unsigned dataElementsPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MinuteOfTheYear timeStamp;
   Sample sample;
   HeadingSlice directions;
   ProbeDataManagement_term term;
   ProbeDataManagement_snapshot snapshot;
   SecondOfTime txInterval;
   VehicleStatusRequestList dataElements;
   ProbeDataManagement_regional regional;
   OSRTDList extElem1;
} ProbeDataManagement;

EXTERN int asn1PE_ProbeDataManagement (OSCTXT* pctxt, ProbeDataManagement* pvalue);

EXTERN int asn1PD_ProbeDataManagement (OSCTXT* pctxt, ProbeDataManagement* pvalue);

EXTERN void asn1Print_ProbeDataManagement 
   (const char* name, const ProbeDataManagement* pvalue);

EXTERN int asn1PrtToStrm_ProbeDataManagement (OSCTXT *pctxt, 
   const char* name, const ProbeDataManagement* pvalue);

EXTERN int asn1Init_ProbeDataManagement (ProbeDataManagement* pvalue);

EXTERN void asn1Free_ProbeDataManagement (OSCTXT *pctxt, ProbeDataManagement* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleID                                                 */
/*                                                            */
/**************************************************************/
/*
VehicleID ::= CHOICE {
   entityID [0] TemporaryID,
   stationID [1] StationID
}
*/
/* Choice tag constants */

#define T_VehicleID_entityID            1
#define T_VehicleID_stationID           2

typedef struct EXTERN VehicleID {
   OSINT32 t;
   union {
      /* t = 1 */
      TemporaryID *entityID;
      /* t = 2 */
      StationID stationID;
   } u;
} VehicleID;

EXTERN int asn1PE_VehicleID (OSCTXT* pctxt, VehicleID* pvalue);

EXTERN int asn1PD_VehicleID (OSCTXT* pctxt, VehicleID* pvalue);

EXTERN void asn1Print_VehicleID (const char* name, const VehicleID* pvalue);

EXTERN int asn1PrtToStrm_VehicleID (OSCTXT *pctxt, 
   const char* name, const VehicleID* pvalue);

EXTERN int asn1Init_VehicleID (VehicleID* pvalue);

EXTERN void asn1Free_VehicleID (OSCTXT *pctxt, VehicleID* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleIdent_vehicleClass                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleIdent'
*/
/* Choice tag constants */

#define T_VehicleIdent_vehicleClass_vGroup 1
#define T_VehicleIdent_vehicleClass_rGroup 2
#define T_VehicleIdent_vehicleClass_rEquip 3

typedef struct EXTERN VehicleIdent_vehicleClass {
   OSINT32 t;
   union {
      /* t = 1 */
      VehicleGroupAffected vGroup;
      /* t = 2 */
      ResponderGroupAffected rGroup;
      /* t = 3 */
      IncidentResponseEquipment rEquip;
   } u;
} VehicleIdent_vehicleClass;

EXTERN int asn1PE_VehicleIdent_vehicleClass (OSCTXT* pctxt, VehicleIdent_vehicleClass* pvalue);

EXTERN int asn1PD_VehicleIdent_vehicleClass (OSCTXT* pctxt, VehicleIdent_vehicleClass* pvalue);

EXTERN void asn1Print_VehicleIdent_vehicleClass 
   (const char* name, const VehicleIdent_vehicleClass* pvalue);

EXTERN int asn1PrtToStrm_VehicleIdent_vehicleClass (OSCTXT *pctxt, 
   const char* name, const VehicleIdent_vehicleClass* pvalue);

EXTERN int asn1Init_VehicleIdent_vehicleClass (VehicleIdent_vehicleClass* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleIdent                                              */
/*                                                            */
/**************************************************************/
/*
VehicleIdent ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
                  -- a human readable name for debugging use
   vin [1] VINstring OPTIONAL,
                  -- vehicle VIN value
   ownerCode [2] IA5String (SIZE (1..32)) OPTIONAL,
                  -- vehicle owner code 
   id [3] VehicleID OPTIONAL,
                  -- same value used in the BSM
   vehicleType [4] VehicleType OPTIONAL,
   vehicleClass [5] CHOICE {
      vGroup [0] VehicleGroupAffected,
      rGroup [1] ResponderGroupAffected,
      rEquip [2] IncidentResponseEquipment
   } OPTIONAL,
   ...
}
*/
typedef struct EXTERN VehicleIdent {
   struct {
      unsigned namePresent : 1;
      unsigned vinPresent : 1;
      unsigned ownerCodePresent : 1;
      unsigned idPresent : 1;
      unsigned vehicleTypePresent : 1;
      unsigned vehicleClassPresent : 1;
   } m;
   DescriptiveName name;
   VINstring vin;
   const char* ownerCode;
   VehicleID id;
   VehicleType vehicleType;
   VehicleIdent_vehicleClass vehicleClass;
   OSRTDList extElem1;
} VehicleIdent;

EXTERN int asn1PE_VehicleIdent (OSCTXT* pctxt, VehicleIdent* pvalue);

EXTERN int asn1PD_VehicleIdent (OSCTXT* pctxt, VehicleIdent* pvalue);

EXTERN void asn1Print_VehicleIdent (const char* name, const VehicleIdent* pvalue);

EXTERN int asn1PrtToStrm_VehicleIdent (OSCTXT *pctxt, 
   const char* name, const VehicleIdent* pvalue);

EXTERN int asn1Init_VehicleIdent (VehicleIdent* pvalue);

EXTERN void asn1Free_VehicleIdent (OSCTXT *pctxt, VehicleIdent* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleClassification_regional                            */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleClassification'
*/
/* List of RegionalExtension */
typedef OSRTDList VehicleClassification_regional;

EXTERN int asn1PE_VehicleClassification_regional (OSCTXT* pctxt, VehicleClassification_regional* pvalue);

EXTERN int asn1PD_VehicleClassification_regional (OSCTXT* pctxt, VehicleClassification_regional* pvalue);

EXTERN void asn1Print_VehicleClassification_regional 
   (const char* name, const VehicleClassification_regional* pvalue);

EXTERN int asn1PrtToStrm_VehicleClassification_regional (OSCTXT *pctxt, 
   const char* name, const VehicleClassification_regional* pvalue);

EXTERN int asn1Init_VehicleClassification_regional (
   VehicleClassification_regional* pvalue);

EXTERN void asn1Free_VehicleClassification_regional (OSCTXT *pctxt, 
   VehicleClassification_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleClassification                                     */
/*                                                            */
/**************************************************************/
/*
VehicleClassification ::= SEQUENCE {
   -- Composed of the following elements:
   -- The 'master' DSRC list used when space is limited
   keyType [0] BasicVehicleClass OPTIONAL,
   -- Types used in the MAP/SPAT/SSR/SRM exchanges 
   role [1] BasicVehicleRole OPTIONAL, -- Basic CERT role at a given time
   iso3883 [2] Iso3833VehicleType OPTIONAL,
   hpmsType [3] VehicleType OPTIONAL, -- HPMS classification types
   -- ITIS types for classes of vehicle and agency
   vehicleType [4] VehicleGroupAffected OPTIONAL,
   responseEquip [5] IncidentResponseEquipment OPTIONAL,
   responderType [6] ResponderGroupAffected OPTIONAL,
   -- Fuel types for vehicles
   fuelType [7] FuelType OPTIONAL,
   regional [8] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN VehicleClassification {
   struct {
      unsigned keyTypePresent : 1;
      unsigned rolePresent : 1;
      unsigned iso3883Present : 1;
      unsigned hpmsTypePresent : 1;
      unsigned vehicleTypePresent : 1;
      unsigned responseEquipPresent : 1;
      unsigned responderTypePresent : 1;
      unsigned fuelTypePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   BasicVehicleClass keyType;
   BasicVehicleRole role;
   Iso3833VehicleType iso3883;
   VehicleType hpmsType;
   VehicleGroupAffected vehicleType;
   IncidentResponseEquipment responseEquip;
   ResponderGroupAffected responderType;
   FuelType fuelType;
   VehicleClassification_regional regional;
   OSRTDList extElem1;
} VehicleClassification;

EXTERN int asn1PE_VehicleClassification (OSCTXT* pctxt, VehicleClassification* pvalue);

EXTERN int asn1PD_VehicleClassification (OSCTXT* pctxt, VehicleClassification* pvalue);

EXTERN void asn1Print_VehicleClassification 
   (const char* name, const VehicleClassification* pvalue);

EXTERN int asn1PrtToStrm_VehicleClassification (OSCTXT *pctxt, 
   const char* name, const VehicleClassification* pvalue);

EXTERN int asn1Init_VehicleClassification (VehicleClassification* pvalue);

EXTERN void asn1Free_VehicleClassification (OSCTXT *pctxt, 
   VehicleClassification* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleSafetyExtensions                                   */
/*                                                            */
/**************************************************************/
/*
VehicleSafetyExtensions ::= SEQUENCE {
   events [0] VehicleEventFlags OPTIONAL,
   pathHistory [1] PathHistory OPTIONAL,
   pathPrediction [2] PathPrediction OPTIONAL,
   lights [3] ExteriorLights OPTIONAL,
   ...
}
*/
typedef struct EXTERN VehicleSafetyExtensions {
   struct {
      unsigned eventsPresent : 1;
      unsigned pathHistoryPresent : 1;
      unsigned pathPredictionPresent : 1;
      unsigned lightsPresent : 1;
   } m;
   VehicleEventFlags events;
   PathHistory pathHistory;
   PathPrediction pathPrediction;
   ExteriorLights lights;
   OSRTDList extElem1;
} VehicleSafetyExtensions;

EXTERN int asn1PE_VehicleSafetyExtensions (OSCTXT* pctxt, VehicleSafetyExtensions* pvalue);

EXTERN int asn1PD_VehicleSafetyExtensions (OSCTXT* pctxt, VehicleSafetyExtensions* pvalue);

EXTERN void asn1Print_VehicleSafetyExtensions 
   (const char* name, const VehicleSafetyExtensions* pvalue);

EXTERN int asn1PrtToStrm_VehicleSafetyExtensions (OSCTXT *pctxt, 
   const char* name, const VehicleSafetyExtensions* pvalue);

EXTERN int asn1Init_VehicleSafetyExtensions (VehicleSafetyExtensions* pvalue);

EXTERN void asn1Free_VehicleSafetyExtensions (OSCTXT *pctxt, 
   VehicleSafetyExtensions* pvalue);

/**************************************************************/
/*                                                            */
/*  WiperSet                                                  */
/*                                                            */
/**************************************************************/
/*
WiperSet ::= SEQUENCE {
   statusFront [0] WiperStatus,
   rateFront [1] WiperRate,
   statusRear [2] WiperStatus OPTIONAL,
   rateRear [3] WiperRate OPTIONAL
}
*/
typedef struct EXTERN WiperSet {
   struct {
      unsigned statusRearPresent : 1;
      unsigned rateRearPresent : 1;
   } m;
   WiperStatus statusFront;
   WiperRate rateFront;
   WiperStatus statusRear;
   WiperRate rateRear;
} WiperSet;

EXTERN int asn1PE_WiperSet (OSCTXT* pctxt, WiperSet* pvalue);

EXTERN int asn1PD_WiperSet (OSCTXT* pctxt, WiperSet* pvalue);

EXTERN void asn1Print_WiperSet (const char* name, const WiperSet* pvalue);

EXTERN int asn1PrtToStrm_WiperSet (OSCTXT *pctxt, 
   const char* name, const WiperSet* pvalue);

EXTERN int asn1Init_WiperSet (WiperSet* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_steering                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
typedef struct EXTERN VehicleStatus_steering {
   struct {
      unsigned confidencePresent : 1;
      unsigned ratePresent : 1;
      unsigned wheelsPresent : 1;
   } m;
   SteeringWheelAngle angle;
   SteeringWheelAngleConfidence confidence;
   SteeringWheelAngleRateOfChange rate;
   DrivingWheelAngle wheels;
} VehicleStatus_steering;

EXTERN int asn1PE_VehicleStatus_steering (OSCTXT* pctxt, VehicleStatus_steering* pvalue);

EXTERN int asn1PD_VehicleStatus_steering (OSCTXT* pctxt, VehicleStatus_steering* pvalue);

EXTERN void asn1Print_VehicleStatus_steering 
   (const char* name, const VehicleStatus_steering* pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_steering (OSCTXT *pctxt, 
   const char* name, const VehicleStatus_steering* pvalue);

EXTERN int asn1Init_VehicleStatus_steering (VehicleStatus_steering* pvalue);

/**************************************************************/
/*                                                            */
/*  AccelSteerYawRateConfidence                               */
/*                                                            */
/**************************************************************/
/*
AccelSteerYawRateConfidence ::= SEQUENCE {
   yawRate [0] YawRateConfidence,
   acceleration [1] AccelerationConfidence,
   steeringWheelAngle [2] SteeringWheelAngleConfidence
}
*/
typedef struct EXTERN AccelSteerYawRateConfidence {
   YawRateConfidence yawRate;
   AccelerationConfidence acceleration;
   SteeringWheelAngleConfidence steeringWheelAngle;
} AccelSteerYawRateConfidence;

EXTERN int asn1PE_AccelSteerYawRateConfidence (OSCTXT* pctxt, AccelSteerYawRateConfidence* pvalue);

EXTERN int asn1PD_AccelSteerYawRateConfidence (OSCTXT* pctxt, AccelSteerYawRateConfidence* pvalue);

EXTERN void asn1Print_AccelSteerYawRateConfidence 
   (const char* name, const AccelSteerYawRateConfidence* pvalue);

EXTERN int asn1PrtToStrm_AccelSteerYawRateConfidence (OSCTXT *pctxt, 
   const char* name, const AccelSteerYawRateConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  ConfidenceSet                                             */
/*                                                            */
/**************************************************************/
/*
ConfidenceSet ::= SEQUENCE {
   accelConfidence [0] AccelSteerYawRateConfidence OPTIONAL,
   speedConfidence [1] SpeedandHeadingandThrottleConfidence OPTIONAL,
   timeConfidence [2] TimeConfidence OPTIONAL,
   posConfidence [3] PositionConfidenceSet OPTIONAL,
   steerConfidence [4] SteeringWheelAngleConfidence OPTIONAL,
   headingConfidence [5] HeadingConfidence OPTIONAL,
   throttleConfidence [6] ThrottleConfidence OPTIONAL,
   ...
}
*/
typedef struct EXTERN ConfidenceSet {
   struct {
      unsigned accelConfidencePresent : 1;
      unsigned speedConfidencePresent : 1;
      unsigned timeConfidencePresent : 1;
      unsigned posConfidencePresent : 1;
      unsigned steerConfidencePresent : 1;
      unsigned headingConfidencePresent : 1;
      unsigned throttleConfidencePresent : 1;
   } m;
   AccelSteerYawRateConfidence accelConfidence;
   SpeedandHeadingandThrottleConfidence speedConfidence;
   TimeConfidence timeConfidence;
   PositionConfidenceSet posConfidence;
   SteeringWheelAngleConfidence steerConfidence;
   HeadingConfidence headingConfidence;
   ThrottleConfidence throttleConfidence;
   OSRTDList extElem1;
} ConfidenceSet;

EXTERN int asn1PE_ConfidenceSet (OSCTXT* pctxt, ConfidenceSet* pvalue);

EXTERN int asn1PD_ConfidenceSet (OSCTXT* pctxt, ConfidenceSet* pvalue);

EXTERN void asn1Print_ConfidenceSet (const char* name, const ConfidenceSet* pvalue);

EXTERN int asn1PrtToStrm_ConfidenceSet (OSCTXT *pctxt, 
   const char* name, const ConfidenceSet* pvalue);

EXTERN int asn1Init_ConfidenceSet (ConfidenceSet* pvalue);

EXTERN void asn1Free_ConfidenceSet (OSCTXT *pctxt, ConfidenceSet* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_accelSets                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
typedef struct EXTERN VehicleStatus_accelSets {
   struct {
      unsigned accel4wayPresent : 1;
      unsigned vertAccelThresPresent : 1;
      unsigned yawRateConPresent : 1;
      unsigned hozAccelConPresent : 1;
      unsigned confidenceSetPresent : 1;
   } m;
   AccelerationSet4Way accel4way;
   VerticalAccelerationThreshold vertAccelThres;
   YawRateConfidence yawRateCon;
   AccelerationConfidence hozAccelCon;
   ConfidenceSet confidenceSet;
} VehicleStatus_accelSets;

EXTERN int asn1PE_VehicleStatus_accelSets (OSCTXT* pctxt, VehicleStatus_accelSets* pvalue);

EXTERN int asn1PD_VehicleStatus_accelSets (OSCTXT* pctxt, VehicleStatus_accelSets* pvalue);

EXTERN void asn1Print_VehicleStatus_accelSets 
   (const char* name, const VehicleStatus_accelSets* pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_accelSets (OSCTXT *pctxt, 
   const char* name, const VehicleStatus_accelSets* pvalue);

EXTERN int asn1Init_VehicleStatus_accelSets (VehicleStatus_accelSets* pvalue);

EXTERN void asn1Free_VehicleStatus_accelSets (OSCTXT *pctxt, 
   VehicleStatus_accelSets* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_object                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
typedef struct EXTERN VehicleStatus_object {
   ObstacleDistance obDist;
   Angle obDirect;
   DDateTime dateTime;
} VehicleStatus_object;

EXTERN int asn1PE_VehicleStatus_object (OSCTXT* pctxt, VehicleStatus_object* pvalue);

EXTERN int asn1PD_VehicleStatus_object (OSCTXT* pctxt, VehicleStatus_object* pvalue);

EXTERN void asn1Print_VehicleStatus_object 
   (const char* name, const VehicleStatus_object* pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_object (OSCTXT *pctxt, 
   const char* name, const VehicleStatus_object* pvalue);

EXTERN int asn1Init_VehicleStatus_object (VehicleStatus_object* pvalue);

/**************************************************************/
/*                                                            */
/*  BumperHeights                                             */
/*                                                            */
/**************************************************************/
/*
BumperHeights ::= SEQUENCE {
   front [0] BumperHeight,
   rear [1] BumperHeight
}
*/
typedef struct EXTERN BumperHeights {
   BumperHeight front;
   BumperHeight rear;
} BumperHeights;

EXTERN int asn1PE_BumperHeights (OSCTXT* pctxt, BumperHeights* pvalue);

EXTERN int asn1PD_BumperHeights (OSCTXT* pctxt, BumperHeights* pvalue);

EXTERN void asn1Print_BumperHeights (const char* name, const BumperHeights* pvalue);

EXTERN int asn1PrtToStrm_BumperHeights (OSCTXT *pctxt, 
   const char* name, const BumperHeights* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_vehicleData                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
typedef struct EXTERN VehicleStatus_vehicleData {
   VehicleHeight height;
   BumperHeights bumpers;
   VehicleMass mass;
   TrailerWeight trailerWeight;
   VehicleType type;
} VehicleStatus_vehicleData;

EXTERN int asn1PE_VehicleStatus_vehicleData (OSCTXT* pctxt, VehicleStatus_vehicleData* pvalue);

EXTERN int asn1PD_VehicleStatus_vehicleData (OSCTXT* pctxt, VehicleStatus_vehicleData* pvalue);

EXTERN void asn1Print_VehicleStatus_vehicleData 
   (const char* name, const VehicleStatus_vehicleData* pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_vehicleData (OSCTXT *pctxt, 
   const char* name, const VehicleStatus_vehicleData* pvalue);

/**************************************************************/
/*                                                            */
/*  TireData                                                  */
/*                                                            */
/**************************************************************/
/*
TireData ::= SEQUENCE {
   location [0] TireLocation OPTIONAL,
   pressure [1] TirePressure OPTIONAL,
   temp [2] TireTemp OPTIONAL,
   wheelSensorStatus [3] WheelSensorStatus OPTIONAL,
   wheelEndElectFault [4] WheelEndElectFault OPTIONAL,
   leakageRate [5] TireLeakageRate OPTIONAL,
   detection [6] TirePressureThresholdDetection OPTIONAL,
   ...
}
*/
typedef struct EXTERN TireData {
   struct {
      unsigned locationPresent : 1;
      unsigned pressurePresent : 1;
      unsigned tempPresent : 1;
      unsigned wheelSensorStatusPresent : 1;
      unsigned wheelEndElectFaultPresent : 1;
      unsigned leakageRatePresent : 1;
      unsigned detectionPresent : 1;
   } m;
   TireLocation location;
   TirePressure pressure;
   TireTemp temp;
   WheelSensorStatus wheelSensorStatus;
   WheelEndElectFault wheelEndElectFault;
   TireLeakageRate leakageRate;
   TirePressureThresholdDetection detection;
   OSRTDList extElem1;
} TireData;

EXTERN int asn1PE_TireData (OSCTXT* pctxt, TireData* pvalue);

EXTERN int asn1PD_TireData (OSCTXT* pctxt, TireData* pvalue);

EXTERN void asn1Print_TireData (const char* name, const TireData* pvalue);

EXTERN int asn1PrtToStrm_TireData (OSCTXT *pctxt, 
   const char* name, const TireData* pvalue);

EXTERN int asn1Init_TireData (TireData* pvalue);

EXTERN void asn1Free_TireData (OSCTXT *pctxt, TireData* pvalue);

/**************************************************************/
/*                                                            */
/*  TireDataList                                              */
/*                                                            */
/**************************************************************/
/*
TireDataList ::= SEQUENCE (SIZE (1..16)) OF TireData
*/
/* List of TireData */
typedef OSRTDList TireDataList;

EXTERN int asn1PE_TireDataList (OSCTXT* pctxt, TireDataList* pvalue);

EXTERN int asn1PD_TireDataList (OSCTXT* pctxt, TireDataList* pvalue);

EXTERN void asn1Print_TireDataList (const char* name, const TireDataList* pvalue);

EXTERN int asn1PrtToStrm_TireDataList (OSCTXT *pctxt, 
   const char* name, const TireDataList* pvalue);

EXTERN int asn1Init_TireDataList (TireDataList* pvalue);

EXTERN void asn1Free_TireDataList (OSCTXT *pctxt, TireDataList* pvalue);

/**************************************************************/
/*                                                            */
/*  AxleWeightSet                                             */
/*                                                            */
/**************************************************************/
/*
AxleWeightSet ::= SEQUENCE {
   location [0] AxleLocation OPTIONAL,
   weight [1] AxleWeight OPTIONAL,
   ...
}
*/
typedef struct EXTERN AxleWeightSet {
   struct {
      unsigned locationPresent : 1;
      unsigned weightPresent : 1;
   } m;
   AxleLocation location;
   AxleWeight weight;
   OSRTDList extElem1;
} AxleWeightSet;

EXTERN int asn1PE_AxleWeightSet (OSCTXT* pctxt, AxleWeightSet* pvalue);

EXTERN int asn1PD_AxleWeightSet (OSCTXT* pctxt, AxleWeightSet* pvalue);

EXTERN void asn1Print_AxleWeightSet (const char* name, const AxleWeightSet* pvalue);

EXTERN int asn1PrtToStrm_AxleWeightSet (OSCTXT *pctxt, 
   const char* name, const AxleWeightSet* pvalue);

EXTERN int asn1Init_AxleWeightSet (AxleWeightSet* pvalue);

EXTERN void asn1Free_AxleWeightSet (OSCTXT *pctxt, AxleWeightSet* pvalue);

/**************************************************************/
/*                                                            */
/*  AxleWeightList                                            */
/*                                                            */
/**************************************************************/
/*
AxleWeightList ::= SEQUENCE (SIZE (1..16)) OF AxleWeightSet
*/
/* List of AxleWeightSet */
typedef OSRTDList AxleWeightList;

EXTERN int asn1PE_AxleWeightList (OSCTXT* pctxt, AxleWeightList* pvalue);

EXTERN int asn1PD_AxleWeightList (OSCTXT* pctxt, AxleWeightList* pvalue);

EXTERN void asn1Print_AxleWeightList (const char* name, const AxleWeightList* pvalue);

EXTERN int asn1PrtToStrm_AxleWeightList (OSCTXT *pctxt, 
   const char* name, const AxleWeightList* pvalue);

EXTERN int asn1Init_AxleWeightList (AxleWeightList* pvalue);

EXTERN void asn1Free_AxleWeightList (OSCTXT *pctxt, AxleWeightList* pvalue);

/**************************************************************/
/*                                                            */
/*  J1939data                                                 */
/*                                                            */
/**************************************************************/
/*
J1939data ::= SEQUENCE {
   -- Tire conditions by tire
   tires [0] TireDataList OPTIONAL,
   -- Vehicle Weights by axle
   axles [1] AxleWeightList OPTIONAL,
   trailerWeight [2] TrailerWeight OPTIONAL,
   cargoWeight [3] CargoWeight OPTIONAL,
   steeringAxleTemperature [4] SteeringAxleTemperature OPTIONAL,
   driveAxleLocation [5] DriveAxleLocation OPTIONAL,
   driveAxleLiftAirPressure [6] DriveAxleLiftAirPressure OPTIONAL,
   driveAxleTemperature [7] DriveAxleTemperature OPTIONAL,
   driveAxleLubePressure [8] DriveAxleLubePressure OPTIONAL,
   steeringAxleLubePressure [9] SteeringAxleLubePressure OPTIONAL,
   ...
}
*/
typedef struct EXTERN J1939data {
   struct {
      unsigned tiresPresent : 1;
      unsigned axlesPresent : 1;
      unsigned trailerWeightPresent : 1;
      unsigned cargoWeightPresent : 1;
      unsigned steeringAxleTemperaturePresent : 1;
      unsigned driveAxleLocationPresent : 1;
      unsigned driveAxleLiftAirPressurePresent : 1;
      unsigned driveAxleTemperaturePresent : 1;
      unsigned driveAxleLubePressurePresent : 1;
      unsigned steeringAxleLubePressurePresent : 1;
   } m;
   TireDataList tires;
   AxleWeightList axles;
   TrailerWeight trailerWeight;
   CargoWeight cargoWeight;
   SteeringAxleTemperature steeringAxleTemperature;
   DriveAxleLocation driveAxleLocation;
   DriveAxleLiftAirPressure driveAxleLiftAirPressure;
   DriveAxleTemperature driveAxleTemperature;
   DriveAxleLubePressure driveAxleLubePressure;
   SteeringAxleLubePressure steeringAxleLubePressure;
   OSRTDList extElem1;
} J1939data;

EXTERN int asn1PE_J1939data (OSCTXT* pctxt, J1939data* pvalue);

EXTERN int asn1PD_J1939data (OSCTXT* pctxt, J1939data* pvalue);

EXTERN void asn1Print_J1939data (const char* name, const J1939data* pvalue);

EXTERN int asn1PrtToStrm_J1939data (OSCTXT *pctxt, 
   const char* name, const J1939data* pvalue);

EXTERN int asn1Init_J1939data (J1939data* pvalue);

EXTERN void asn1Free_J1939data (OSCTXT *pctxt, J1939data* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_weatherReport                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
typedef struct EXTERN VehicleStatus_weatherReport {
   struct {
      unsigned rainRatePresent : 1;
      unsigned precipSituationPresent : 1;
      unsigned solarRadiationPresent : 1;
      unsigned frictionPresent : 1;
   } m;
   EssPrecipYesNo isRaining;
   EssPrecipRate rainRate;
   EssPrecipSituation precipSituation;
   EssSolarRadiation solarRadiation;
   EssMobileFriction friction;
} VehicleStatus_weatherReport;

EXTERN int asn1PE_VehicleStatus_weatherReport (OSCTXT* pctxt, VehicleStatus_weatherReport* pvalue);

EXTERN int asn1PD_VehicleStatus_weatherReport (OSCTXT* pctxt, VehicleStatus_weatherReport* pvalue);

EXTERN void asn1Print_VehicleStatus_weatherReport 
   (const char* name, const VehicleStatus_weatherReport* pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus_weatherReport (OSCTXT *pctxt, 
   const char* name, const VehicleStatus_weatherReport* pvalue);

EXTERN int asn1Init_VehicleStatus_weatherReport (VehicleStatus_weatherReport* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus                                             */
/*                                                            */
/**************************************************************/
/*
VehicleStatus ::= SEQUENCE {
   lights [0] ExteriorLights OPTIONAL, -- Exterior Lights
   lightBar [1] LightbarInUse OPTIONAL, -- PS Lights
   wipers [2] WiperSet OPTIONAL, -- Wipers
   brakeStatus [3] BrakeSystemStatus OPTIONAL,
                                                            -- Braking Data
   brakePressure [4] BrakeAppliedPressure OPTIONAL, -- Braking Pressure
   roadFriction [5] CoefficientOfFriction OPTIONAL, -- Roadway Friction 
   sunData [6] SunSensor OPTIONAL, -- Sun Sensor        
   rainData [7] RainSensor OPTIONAL, -- Rain Sensor        
   airTemp [8] AmbientAirTemperature OPTIONAL, -- Air Temperature    
   airPres [9] AmbientAirPressure OPTIONAL, -- Air Pressure
   steering [10] SEQUENCE {
      angle [0] SteeringWheelAngle,
      confidence [1] SteeringWheelAngleConfidence OPTIONAL,
      rate [2] SteeringWheelAngleRateOfChange OPTIONAL,
      wheels [3] DrivingWheelAngle OPTIONAL
   } OPTIONAL, -- steering data
   accelSets [11] SEQUENCE {
      accel4way [0] AccelerationSet4Way OPTIONAL,
      vertAccelThres [1] VerticalAccelerationThreshold OPTIONAL,
                                                      -- Wheel which has 
                                                      -- exceeded acceleration point
      yawRateCon [2] YawRateConfidence OPTIONAL,
                                                      -- Yaw Rate Confidence
      hozAccelCon [3] AccelerationConfidence OPTIONAL,
                                                      -- Acceleration Confidence 
      confidenceSet [4] ConfidenceSet OPTIONAL
                                                      -- general ConfidenceSet 
   } OPTIONAL,
   object [12] SEQUENCE {
      obDist [0] ObstacleDistance, -- Obstacle Distance        
      obDirect [1] Angle, -- Obstacle Direction        
      dateTime [2] DDateTime -- time detected
   } OPTIONAL, -- detected Obstacle data
   fullPos [13] FullPositionVector OPTIONAL, -- complete set of time and
                                                    -- position, speed, heading
   throttlePos [14] ThrottlePosition OPTIONAL,
   speedHeadC [15] SpeedandHeadingandThrottleConfidence OPTIONAL,
   speedC [16] SpeedConfidence OPTIONAL,
   vehicleData [17] SEQUENCE {
      height [0] VehicleHeight,
      bumpers [1] BumperHeights,
      mass [2] VehicleMass,
      trailerWeight [3] TrailerWeight,
      type [4] VehicleType
   } OPTIONAL, -- vehicle data
   vehicleIdent [18] VehicleIdent OPTIONAL, -- common vehicle identity data
   j1939data [19] J1939data OPTIONAL, -- Various SAE J1938 data items
   weatherReport [20] SEQUENCE {
      isRaining [0] EssPrecipYesNo,
      rainRate [1] EssPrecipRate OPTIONAL,
      precipSituation [2] EssPrecipSituation OPTIONAL,
      solarRadiation [3] EssSolarRadiation OPTIONAL,
      friction [4] EssMobileFriction OPTIONAL
   } OPTIONAL, -- local weather data
   gnssStatus [21] GNSSstatus OPTIONAL, -- vehicle's GPS
   ...
}
*/
typedef struct EXTERN VehicleStatus {
   struct {
      unsigned lightsPresent : 1;
      unsigned lightBarPresent : 1;
      unsigned wipersPresent : 1;
      unsigned brakeStatusPresent : 1;
      unsigned brakePressurePresent : 1;
      unsigned roadFrictionPresent : 1;
      unsigned sunDataPresent : 1;
      unsigned rainDataPresent : 1;
      unsigned airTempPresent : 1;
      unsigned airPresPresent : 1;
      unsigned steeringPresent : 1;
      unsigned accelSetsPresent : 1;
      unsigned objectPresent : 1;
      unsigned fullPosPresent : 1;
      unsigned throttlePosPresent : 1;
      unsigned speedHeadCPresent : 1;
      unsigned speedCPresent : 1;
      unsigned vehicleDataPresent : 1;
      unsigned vehicleIdentPresent : 1;
      unsigned j1939dataPresent : 1;
      unsigned weatherReportPresent : 1;
      unsigned gnssStatusPresent : 1;
   } m;
   ExteriorLights lights;
   LightbarInUse lightBar;
   WiperSet wipers;
   BrakeSystemStatus brakeStatus;
   BrakeAppliedPressure brakePressure;
   CoefficientOfFriction roadFriction;
   SunSensor sunData;
   RainSensor rainData;
   AmbientAirTemperature airTemp;
   AmbientAirPressure airPres;
   VehicleStatus_steering steering;
   VehicleStatus_accelSets accelSets;
   VehicleStatus_object object;
   FullPositionVector fullPos;
   ThrottlePosition throttlePos;
   SpeedandHeadingandThrottleConfidence speedHeadC;
   SpeedConfidence speedC;
   VehicleStatus_vehicleData vehicleData;
   VehicleIdent vehicleIdent;
   J1939data j1939data;
   VehicleStatus_weatherReport weatherReport;
   GNSSstatus gnssStatus;
   OSRTDList extElem1;
} VehicleStatus;

EXTERN int asn1PE_VehicleStatus (OSCTXT* pctxt, VehicleStatus* pvalue);

EXTERN int asn1PD_VehicleStatus (OSCTXT* pctxt, VehicleStatus* pvalue);

EXTERN void asn1Print_VehicleStatus (const char* name, const VehicleStatus* pvalue);

EXTERN int asn1PrtToStrm_VehicleStatus (OSCTXT *pctxt, 
   const char* name, const VehicleStatus* pvalue);

EXTERN int asn1Init_VehicleStatus (VehicleStatus* pvalue);

EXTERN void asn1Free_VehicleStatus (OSCTXT *pctxt, VehicleStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  Snapshot                                                  */
/*                                                            */
/**************************************************************/
/*
Snapshot ::= SEQUENCE {
   thePosition [0] FullPositionVector,
                -- data of the position and speed, 
   safetyExt [1] VehicleSafetyExtensions OPTIONAL,
   dataSet [2] VehicleStatus OPTIONAL,
                -- a sequence of data frames
                -- which encodes the data
   ...
}
*/
typedef struct EXTERN Snapshot {
   struct {
      unsigned safetyExtPresent : 1;
      unsigned dataSetPresent : 1;
   } m;
   FullPositionVector thePosition;
   VehicleSafetyExtensions safetyExt;
   VehicleStatus dataSet;
   OSRTDList extElem1;
} Snapshot;

EXTERN int asn1PE_Snapshot (OSCTXT* pctxt, Snapshot* pvalue);

EXTERN int asn1PD_Snapshot (OSCTXT* pctxt, Snapshot* pvalue);

EXTERN void asn1Print_Snapshot (const char* name, const Snapshot* pvalue);

EXTERN int asn1PrtToStrm_Snapshot (OSCTXT *pctxt, 
   const char* name, const Snapshot* pvalue);

EXTERN int asn1Init_Snapshot (Snapshot* pvalue);

EXTERN void asn1Free_Snapshot (OSCTXT *pctxt, Snapshot* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData_snapshots                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeVehicleData'
*/
/* List of Snapshot */
typedef OSRTDList ProbeVehicleData_snapshots;

EXTERN int asn1PE_ProbeVehicleData_snapshots (OSCTXT* pctxt, ProbeVehicleData_snapshots* pvalue);

EXTERN int asn1PD_ProbeVehicleData_snapshots (OSCTXT* pctxt, ProbeVehicleData_snapshots* pvalue);

EXTERN void asn1Print_ProbeVehicleData_snapshots 
   (const char* name, const ProbeVehicleData_snapshots* pvalue);

EXTERN int asn1PrtToStrm_ProbeVehicleData_snapshots (OSCTXT *pctxt, 
   const char* name, const ProbeVehicleData_snapshots* pvalue);

EXTERN int asn1Init_ProbeVehicleData_snapshots (ProbeVehicleData_snapshots* pvalue);

EXTERN void asn1Free_ProbeVehicleData_snapshots (OSCTXT *pctxt, 
   ProbeVehicleData_snapshots* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData_regional                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeVehicleData'
*/
/* List of RegionalExtension */
typedef OSRTDList ProbeVehicleData_regional;

EXTERN int asn1PE_ProbeVehicleData_regional (OSCTXT* pctxt, ProbeVehicleData_regional* pvalue);

EXTERN int asn1PD_ProbeVehicleData_regional (OSCTXT* pctxt, ProbeVehicleData_regional* pvalue);

EXTERN void asn1Print_ProbeVehicleData_regional 
   (const char* name, const ProbeVehicleData_regional* pvalue);

EXTERN int asn1PrtToStrm_ProbeVehicleData_regional (OSCTXT *pctxt, 
   const char* name, const ProbeVehicleData_regional* pvalue);

EXTERN int asn1Init_ProbeVehicleData_regional (ProbeVehicleData_regional* pvalue);

EXTERN void asn1Free_ProbeVehicleData_regional (OSCTXT *pctxt, 
   ProbeVehicleData_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData                                          */
/*                                                            */
/**************************************************************/
/*
ProbeVehicleData ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   segNum [1] ProbeSegmentNumber OPTIONAL,
                                         -- a short term Ident value
                                         -- not used when ident is used
   probeID [2] VehicleIdent OPTIONAL,
                                         -- identity data for selected 
                                         -- types of vehicles    
   startVector [3] FullPositionVector, -- the space and time of 
                                         -- transmission to the RSU
   vehicleType [4] VehicleClassification, -- type of vehicle, 
   snapshots [5] SEQUENCE (SIZE (1..32)) OF Snapshot,
                                         -- a seq of name-value pairs 
                                         -- along with the space and time 
                                         -- of the first measurement set
   regional [6] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN ProbeVehicleData {
   struct {
      unsigned timeStampPresent : 1;
      unsigned segNumPresent : 1;
      unsigned probeIDPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MinuteOfTheYear timeStamp;
   ProbeSegmentNumber segNum;
   VehicleIdent probeID;
   FullPositionVector startVector;
   VehicleClassification vehicleType;
   ProbeVehicleData_snapshots snapshots;
   ProbeVehicleData_regional regional;
   OSRTDList extElem1;
} ProbeVehicleData;

EXTERN int asn1PE_ProbeVehicleData (OSCTXT* pctxt, ProbeVehicleData* pvalue);

EXTERN int asn1PD_ProbeVehicleData (OSCTXT* pctxt, ProbeVehicleData* pvalue);

EXTERN void asn1Print_ProbeVehicleData 
   (const char* name, const ProbeVehicleData* pvalue);

EXTERN int asn1PrtToStrm_ProbeVehicleData (OSCTXT *pctxt, 
   const char* name, const ProbeVehicleData* pvalue);

EXTERN int asn1Init_ProbeVehicleData (ProbeVehicleData* pvalue);

EXTERN void asn1Free_ProbeVehicleData (OSCTXT *pctxt, ProbeVehicleData* pvalue);

/**************************************************************/
/*                                                            */
/*  AntennaOffsetSet                                          */
/*                                                            */
/**************************************************************/
/*
AntennaOffsetSet ::= SEQUENCE {
   antOffsetX [0] Offset-B12, -- a range of +- 20.47 meters
   antOffsetY [1] Offset-B09, -- a range of +- 2.55 meters
   antOffsetZ [2] Offset-B10 -- a range of +- 5.11 meters
}
*/
typedef struct EXTERN AntennaOffsetSet {
   Offset_B12 antOffsetX;
   Offset_B09 antOffsetY;
   Offset_B10 antOffsetZ;
} AntennaOffsetSet;

EXTERN int asn1PE_AntennaOffsetSet (OSCTXT* pctxt, AntennaOffsetSet* pvalue);

EXTERN int asn1PD_AntennaOffsetSet (OSCTXT* pctxt, AntennaOffsetSet* pvalue);

EXTERN void asn1Print_AntennaOffsetSet 
   (const char* name, const AntennaOffsetSet* pvalue);

EXTERN int asn1PrtToStrm_AntennaOffsetSet (OSCTXT *pctxt, 
   const char* name, const AntennaOffsetSet* pvalue);

/**************************************************************/
/*                                                            */
/*  RTCMheader                                                */
/*                                                            */
/**************************************************************/
/*
RTCMheader ::= SEQUENCE {
   status [0] GNSSstatus,
   offsetSet [1] AntennaOffsetSet
}
*/
typedef struct EXTERN RTCMheader {
   GNSSstatus status;
   AntennaOffsetSet offsetSet;
} RTCMheader;

EXTERN int asn1PE_RTCMheader (OSCTXT* pctxt, RTCMheader* pvalue);

EXTERN int asn1PD_RTCMheader (OSCTXT* pctxt, RTCMheader* pvalue);

EXTERN void asn1Print_RTCMheader (const char* name, const RTCMheader* pvalue);

EXTERN int asn1PrtToStrm_RTCMheader (OSCTXT *pctxt, 
   const char* name, const RTCMheader* pvalue);

EXTERN int asn1Init_RTCMheader (RTCMheader* pvalue);

/**************************************************************/
/*                                                            */
/*  RTCMmessageList                                           */
/*                                                            */
/**************************************************************/
/*
RTCMmessageList ::= SEQUENCE (SIZE (1..5)) OF RTCMmessage
*/
typedef struct EXTERN RTCMmessageList {
   OSSIZE n;
   RTCMmessage elem[5];
} RTCMmessageList;

EXTERN int asn1PE_RTCMmessageList (OSCTXT* pctxt, RTCMmessageList* pvalue);

EXTERN int asn1PD_RTCMmessageList (OSCTXT* pctxt, RTCMmessageList* pvalue);

EXTERN void asn1Print_RTCMmessageList 
   (const char* name, const RTCMmessageList* pvalue);

EXTERN int asn1PrtToStrm_RTCMmessageList (OSCTXT *pctxt, 
   const char* name, const RTCMmessageList* pvalue);

EXTERN int asn1Init_RTCMmessageList (RTCMmessageList* pvalue);

/**************************************************************/
/*                                                            */
/*  RTCMcorrections_regional                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RTCMcorrections'
*/
/* List of RegionalExtension */
typedef OSRTDList RTCMcorrections_regional;

EXTERN int asn1PE_RTCMcorrections_regional (OSCTXT* pctxt, RTCMcorrections_regional* pvalue);

EXTERN int asn1PD_RTCMcorrections_regional (OSCTXT* pctxt, RTCMcorrections_regional* pvalue);

EXTERN void asn1Print_RTCMcorrections_regional 
   (const char* name, const RTCMcorrections_regional* pvalue);

EXTERN int asn1PrtToStrm_RTCMcorrections_regional (OSCTXT *pctxt, 
   const char* name, const RTCMcorrections_regional* pvalue);

EXTERN int asn1Init_RTCMcorrections_regional (RTCMcorrections_regional* pvalue);

EXTERN void asn1Free_RTCMcorrections_regional (OSCTXT *pctxt, 
   RTCMcorrections_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RTCMcorrections                                           */
/*                                                            */
/**************************************************************/
/*
RTCMcorrections ::= SEQUENCE {
   msgCnt [0] MsgCount,
   rev [1] RTCM-Revision,
               -- the specific edition of the standard
               -- that is being sent
   timeStamp [2] MinuteOfTheYear OPTIONAL,
   -- Observer position, if needed
   anchorPoint [3] FullPositionVector OPTIONAL,
   -- Precise ant position and noise data for a rover
   rtcmHeader [4] RTCMheader OPTIONAL,
   -- one or more RTCM messages
   msgs [5] RTCMmessageList,
   regional [6] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN RTCMcorrections {
   struct {
      unsigned timeStampPresent : 1;
      unsigned anchorPointPresent : 1;
      unsigned rtcmHeaderPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MsgCount msgCnt;
   RTCM_Revision rev;
   MinuteOfTheYear timeStamp;
   FullPositionVector anchorPoint;
   RTCMheader rtcmHeader;
   RTCMmessageList msgs;
   RTCMcorrections_regional regional;
   OSRTDList extElem1;
} RTCMcorrections;

EXTERN int asn1PE_RTCMcorrections (OSCTXT* pctxt, RTCMcorrections* pvalue);

EXTERN int asn1PD_RTCMcorrections (OSCTXT* pctxt, RTCMcorrections* pvalue);

EXTERN void asn1Print_RTCMcorrections 
   (const char* name, const RTCMcorrections* pvalue);

EXTERN int asn1PrtToStrm_RTCMcorrections (OSCTXT *pctxt, 
   const char* name, const RTCMcorrections* pvalue);

EXTERN int asn1Init_RTCMcorrections (RTCMcorrections* pvalue);

EXTERN void asn1Free_RTCMcorrections (OSCTXT *pctxt, RTCMcorrections* pvalue);

/**************************************************************/
/*                                                            */
/*  EnabledLaneList                                           */
/*                                                            */
/**************************************************************/
/*
EnabledLaneList ::= SEQUENCE (SIZE (1..16)) OF LaneID
    The unique ID numbers for each
    lane object which is 'active' 
    as part of the dynamic map contents.

*/
typedef struct EXTERN EnabledLaneList {
   OSSIZE n;
   LaneID elem[16];
} EnabledLaneList;

EXTERN int asn1PE_EnabledLaneList (OSCTXT* pctxt, EnabledLaneList* pvalue);

EXTERN int asn1PD_EnabledLaneList (OSCTXT* pctxt, EnabledLaneList* pvalue);

EXTERN void asn1Print_EnabledLaneList 
   (const char* name, const EnabledLaneList* pvalue);

EXTERN int asn1PrtToStrm_EnabledLaneList (OSCTXT *pctxt, 
   const char* name, const EnabledLaneList* pvalue);

EXTERN int asn1Init_EnabledLaneList (EnabledLaneList* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeChangeDetails                                         */
/*                                                            */
/**************************************************************/
/*
TimeChangeDetails ::= SEQUENCE {
   startTime [0] TimeMark OPTIONAL,
               -- When this phase 1st started
   minEndTime [1] TimeMark,
               -- Expected shortest end time
   maxEndTime [2] TimeMark OPTIONAL,
               -- Expected longest end time
   likelyTime [3] TimeMark OPTIONAL,
               -- Best predicted value based on other data              
   confidence [4] TimeIntervalConfidence OPTIONAL,
               -- Applies to above time element only
   nextTime [5] TimeMark OPTIONAL
               -- A rough estimate of time when 
               -- this phase may next occur again
               -- used to support various ECO driving power 
               -- management needs.
}
*/
typedef struct EXTERN TimeChangeDetails {
   struct {
      unsigned startTimePresent : 1;
      unsigned maxEndTimePresent : 1;
      unsigned likelyTimePresent : 1;
      unsigned confidencePresent : 1;
      unsigned nextTimePresent : 1;
   } m;
   TimeMark startTime;
   TimeMark minEndTime;
   TimeMark maxEndTime;
   TimeMark likelyTime;
   TimeIntervalConfidence confidence;
   TimeMark nextTime;
} TimeChangeDetails;

EXTERN int asn1PE_TimeChangeDetails (OSCTXT* pctxt, TimeChangeDetails* pvalue);

EXTERN int asn1PD_TimeChangeDetails (OSCTXT* pctxt, TimeChangeDetails* pvalue);

EXTERN void asn1Print_TimeChangeDetails 
   (const char* name, const TimeChangeDetails* pvalue);

EXTERN int asn1PrtToStrm_TimeChangeDetails (OSCTXT *pctxt, 
   const char* name, const TimeChangeDetails* pvalue);

EXTERN int asn1Init_TimeChangeDetails (TimeChangeDetails* pvalue);

/**************************************************************/
/*                                                            */
/*  AdvisorySpeed_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'AdvisorySpeed'
*/
/* List of RegionalExtension */
typedef OSRTDList AdvisorySpeed_regional;

EXTERN int asn1PE_AdvisorySpeed_regional (OSCTXT* pctxt, AdvisorySpeed_regional* pvalue);

EXTERN int asn1PD_AdvisorySpeed_regional (OSCTXT* pctxt, AdvisorySpeed_regional* pvalue);

EXTERN void asn1Print_AdvisorySpeed_regional 
   (const char* name, const AdvisorySpeed_regional* pvalue);

EXTERN int asn1PrtToStrm_AdvisorySpeed_regional (OSCTXT *pctxt, 
   const char* name, const AdvisorySpeed_regional* pvalue);

EXTERN int asn1Init_AdvisorySpeed_regional (AdvisorySpeed_regional* pvalue);

EXTERN void asn1Free_AdvisorySpeed_regional (OSCTXT *pctxt, 
   AdvisorySpeed_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  AdvisorySpeed                                             */
/*                                                            */
/**************************************************************/
/*
AdvisorySpeed ::= SEQUENCE {
   type [0] AdvisorySpeedType,
               -- the type of advisory which this is.
   speed [1] SpeedAdvice OPTIONAL,
               -- See Section 11 for converting and translating speed 
               -- expressed in mph into units of m/s
               -- This element is optional ONLY when superceded 
               -- by the presence of a regional speed element found in
               -- Reg-AdvisorySpeed entry
   confidence [2] SpeedConfidence OPTIONAL,
               -- A confidence value for the above speed
   distance [3] ZoneLength OPTIONAL,
               -- Unit = 1 meter,  
               -- The distance indicates the region for which the advised speed 
               -- is recommended, it is specified upstream from the stop bar  
               -- along the connected egressing lane
   class [4] RestrictionClassID OPTIONAL,
               -- the vehicle types to which it applies
               -- when absent, the AdvisorySpeed applies to
               -- all motor vehicle types
   regional [5] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN AdvisorySpeed {
   struct {
      unsigned speedPresent : 1;
      unsigned confidencePresent : 1;
      unsigned distancePresent : 1;
      unsigned class_Present : 1;
      unsigned regionalPresent : 1;
   } m;
   AdvisorySpeedType type;
   SpeedAdvice speed;
   SpeedConfidence confidence;
   ZoneLength distance;
   RestrictionClassID class_;
   AdvisorySpeed_regional regional;
   OSRTDList extElem1;
} AdvisorySpeed;

EXTERN int asn1PE_AdvisorySpeed (OSCTXT* pctxt, AdvisorySpeed* pvalue);

EXTERN int asn1PD_AdvisorySpeed (OSCTXT* pctxt, AdvisorySpeed* pvalue);

EXTERN void asn1Print_AdvisorySpeed (const char* name, const AdvisorySpeed* pvalue);

EXTERN int asn1PrtToStrm_AdvisorySpeed (OSCTXT *pctxt, 
   const char* name, const AdvisorySpeed* pvalue);

EXTERN int asn1Init_AdvisorySpeed (AdvisorySpeed* pvalue);

EXTERN void asn1Free_AdvisorySpeed (OSCTXT *pctxt, AdvisorySpeed* pvalue);

/**************************************************************/
/*                                                            */
/*  AdvisorySpeedList                                         */
/*                                                            */
/**************************************************************/
/*
AdvisorySpeedList ::= SEQUENCE (SIZE (1..16)) OF AdvisorySpeed
*/
/* List of AdvisorySpeed */
typedef OSRTDList AdvisorySpeedList;

EXTERN int asn1PE_AdvisorySpeedList (OSCTXT* pctxt, AdvisorySpeedList* pvalue);

EXTERN int asn1PD_AdvisorySpeedList (OSCTXT* pctxt, AdvisorySpeedList* pvalue);

EXTERN void asn1Print_AdvisorySpeedList 
   (const char* name, const AdvisorySpeedList* pvalue);

EXTERN int asn1PrtToStrm_AdvisorySpeedList (OSCTXT *pctxt, 
   const char* name, const AdvisorySpeedList* pvalue);

EXTERN int asn1Init_AdvisorySpeedList (AdvisorySpeedList* pvalue);

EXTERN void asn1Free_AdvisorySpeedList (OSCTXT *pctxt, AdvisorySpeedList* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementEvent_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MovementEvent'
*/
/* List of RegionalExtension */
typedef OSRTDList MovementEvent_regional;

EXTERN int asn1PE_MovementEvent_regional (OSCTXT* pctxt, MovementEvent_regional* pvalue);

EXTERN int asn1PD_MovementEvent_regional (OSCTXT* pctxt, MovementEvent_regional* pvalue);

EXTERN void asn1Print_MovementEvent_regional 
   (const char* name, const MovementEvent_regional* pvalue);

EXTERN int asn1PrtToStrm_MovementEvent_regional (OSCTXT *pctxt, 
   const char* name, const MovementEvent_regional* pvalue);

EXTERN int asn1Init_MovementEvent_regional (MovementEvent_regional* pvalue);

EXTERN void asn1Free_MovementEvent_regional (OSCTXT *pctxt, 
   MovementEvent_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementEvent                                             */
/*                                                            */
/**************************************************************/
/*
MovementEvent ::= SEQUENCE {
   eventState [0] MovementPhaseState,
                -- Consisting of:
                -- Phase state (the basic 11 states)
                -- Directional, protected, or permissive state
   timing [1] TimeChangeDetails OPTIONAL,
                -- Timing Data in UTC time stamps for event
                -- includes start and min/max end times of phase
                -- confidence and estimated next occurrence
   speeds [2] AdvisorySpeedList OPTIONAL,
                -- various speed advisories for use by
                -- general and specific types of vehicles
                -- supporting green-wave and other flow needs
                -- See Section 11 for converting and translating 
                -- speed expressed in mph into units of m/s
   regional [3] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN MovementEvent {
   struct {
      unsigned timingPresent : 1;
      unsigned speedsPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MovementPhaseState eventState;
   TimeChangeDetails timing;
   AdvisorySpeedList speeds;
   MovementEvent_regional regional;
   OSRTDList extElem1;
} MovementEvent;

EXTERN int asn1PE_MovementEvent (OSCTXT* pctxt, MovementEvent* pvalue);

EXTERN int asn1PD_MovementEvent (OSCTXT* pctxt, MovementEvent* pvalue);

EXTERN void asn1Print_MovementEvent (const char* name, const MovementEvent* pvalue);

EXTERN int asn1PrtToStrm_MovementEvent (OSCTXT *pctxt, 
   const char* name, const MovementEvent* pvalue);

EXTERN int asn1Init_MovementEvent (MovementEvent* pvalue);

EXTERN void asn1Free_MovementEvent (OSCTXT *pctxt, MovementEvent* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementEventList                                         */
/*                                                            */
/**************************************************************/
/*
MovementEventList ::= SEQUENCE (SIZE (1..16)) OF MovementEvent
*/
/* List of MovementEvent */
typedef OSRTDList MovementEventList;

EXTERN int asn1PE_MovementEventList (OSCTXT* pctxt, MovementEventList* pvalue);

EXTERN int asn1PD_MovementEventList (OSCTXT* pctxt, MovementEventList* pvalue);

EXTERN void asn1Print_MovementEventList 
   (const char* name, const MovementEventList* pvalue);

EXTERN int asn1PrtToStrm_MovementEventList (OSCTXT *pctxt, 
   const char* name, const MovementEventList* pvalue);

EXTERN int asn1Init_MovementEventList (MovementEventList* pvalue);

EXTERN void asn1Free_MovementEventList (OSCTXT *pctxt, MovementEventList* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectionManeuverAssist_regional                         */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ConnectionManeuverAssist'
*/
/* List of RegionalExtension */
typedef OSRTDList ConnectionManeuverAssist_regional;

EXTERN int asn1PE_ConnectionManeuverAssist_regional (OSCTXT* pctxt, ConnectionManeuverAssist_regional* pvalue);

EXTERN int asn1PD_ConnectionManeuverAssist_regional (OSCTXT* pctxt, ConnectionManeuverAssist_regional* pvalue);

EXTERN void asn1Print_ConnectionManeuverAssist_regional 
   (const char* name, const ConnectionManeuverAssist_regional* pvalue);

EXTERN int asn1PrtToStrm_ConnectionManeuverAssist_regional (OSCTXT *pctxt, 
   const char* name, const ConnectionManeuverAssist_regional* pvalue);

EXTERN int asn1Init_ConnectionManeuverAssist_regional (
   ConnectionManeuverAssist_regional* pvalue);

EXTERN void asn1Free_ConnectionManeuverAssist_regional (OSCTXT *pctxt, 
   ConnectionManeuverAssist_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectionManeuverAssist                                  */
/*                                                            */
/**************************************************************/
/*
ConnectionManeuverAssist ::= SEQUENCE {
   connectionID [0] LaneConnectionID,
                        -- the common connectionID used by all lanes to which
                        -- this data applies 
                        -- (this value traces to ConnectsTo entries in lanes)
   -- Expected Clearance Information
   queueLength [1] ZoneLength OPTIONAL,
                        -- Unit = 1 meter, 0 = no queue
                        -- The distance from the stop line to the back 
                        -- edge of the last vehicle in the queue,                     
                        -- as measured along the lane center line.
   availableStorageLength [2] ZoneLength OPTIONAL,
                        -- Unit = 1 meter, 0 = no space remains
                        -- Distance (e.g. beginning from the downstream 
                        -- stop-line up to a given distance) with a high 
                        -- probability for successfully executing the 
                        -- connecting maneuver between the two lanes 
                        -- during the current cycle. 
                        -- Used for enhancing the awareness of vehicles 
                        -- to anticipate if they can pass the stop line
                        -- of the lane. Used for optimizing the green wave, 
                        -- due to knowledge of vehicles waiting in front 
                        -- of a red light (downstream).
                        -- The element nextTime in TimeChangeDetails
                        -- in the containing data frame contains the next 
                        -- timemark at which an active phase is expected, 
                        -- a form of storage flush interval.
   waitOnStop [3] WaitOnStopline OPTIONAL,
                        -- If "true", the vehicles on this specific connecting 
                        -- maneuver have to stop on the stop-line and not 
                        -- to enter the collision area 
   pedBicycleDetect [4] PedestrianBicycleDetect OPTIONAL,
                        -- true if ANY ped or bicycles are detected crossing 
                        -- the above lanes. Set to false ONLY if there is a 
                        -- high certainty that there are none present, 
                        -- otherwise element is not sent.
   regional [5] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN ConnectionManeuverAssist {
   struct {
      unsigned queueLengthPresent : 1;
      unsigned availableStorageLengthPresent : 1;
      unsigned waitOnStopPresent : 1;
      unsigned pedBicycleDetectPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   LaneConnectionID connectionID;
   ZoneLength queueLength;
   ZoneLength availableStorageLength;
   WaitOnStopline waitOnStop;
   PedestrianBicycleDetect pedBicycleDetect;
   ConnectionManeuverAssist_regional regional;
   OSRTDList extElem1;
} ConnectionManeuverAssist;

EXTERN int asn1PE_ConnectionManeuverAssist (OSCTXT* pctxt, ConnectionManeuverAssist* pvalue);

EXTERN int asn1PD_ConnectionManeuverAssist (OSCTXT* pctxt, ConnectionManeuverAssist* pvalue);

EXTERN void asn1Print_ConnectionManeuverAssist 
   (const char* name, const ConnectionManeuverAssist* pvalue);

EXTERN int asn1PrtToStrm_ConnectionManeuverAssist (OSCTXT *pctxt, 
   const char* name, const ConnectionManeuverAssist* pvalue);

EXTERN int asn1Init_ConnectionManeuverAssist (ConnectionManeuverAssist* pvalue);

EXTERN void asn1Free_ConnectionManeuverAssist (OSCTXT *pctxt, 
   ConnectionManeuverAssist* pvalue);

/**************************************************************/
/*                                                            */
/*  ManeuverAssistList                                        */
/*                                                            */
/**************************************************************/
/*
ManeuverAssistList ::= SEQUENCE (SIZE (1..16)) OF ConnectionManeuverAssist
*/
/* List of ConnectionManeuverAssist */
typedef OSRTDList ManeuverAssistList;

EXTERN int asn1PE_ManeuverAssistList (OSCTXT* pctxt, ManeuverAssistList* pvalue);

EXTERN int asn1PD_ManeuverAssistList (OSCTXT* pctxt, ManeuverAssistList* pvalue);

EXTERN void asn1Print_ManeuverAssistList 
   (const char* name, const ManeuverAssistList* pvalue);

EXTERN int asn1PrtToStrm_ManeuverAssistList (OSCTXT *pctxt, 
   const char* name, const ManeuverAssistList* pvalue);

EXTERN int asn1Init_ManeuverAssistList (ManeuverAssistList* pvalue);

EXTERN void asn1Free_ManeuverAssistList (OSCTXT *pctxt, ManeuverAssistList* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementState_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MovementState'
*/
/* List of RegionalExtension */
typedef OSRTDList MovementState_regional;

EXTERN int asn1PE_MovementState_regional (OSCTXT* pctxt, MovementState_regional* pvalue);

EXTERN int asn1PD_MovementState_regional (OSCTXT* pctxt, MovementState_regional* pvalue);

EXTERN void asn1Print_MovementState_regional 
   (const char* name, const MovementState_regional* pvalue);

EXTERN int asn1PrtToStrm_MovementState_regional (OSCTXT *pctxt, 
   const char* name, const MovementState_regional* pvalue);

EXTERN int asn1Init_MovementState_regional (MovementState_regional* pvalue);

EXTERN void asn1Free_MovementState_regional (OSCTXT *pctxt, 
   MovementState_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementState                                             */
/*                                                            */
/**************************************************************/
/*
MovementState ::= SEQUENCE {
   movementName [0] DescriptiveName OPTIONAL,
                      -- uniquely defines movement by name   
                      -- human readable name for intersection  
                      -- to be used only in debug mode
   signalGroup [1] SignalGroupID,
                      -- the group id is used to map to lists 
                      -- of lanes (and their descriptions) 
                      -- which this MovementState data applies to 
                      -- see comments in the Remarks for usage details 
   state-time-speed [2] MovementEventList,
                      -- Consisting of sets of movement data with:
                      -- a)  SignalPhaseState
                      -- b)  TimeChangeDetails,  and 
                      -- c)  AdvisorySpeeds      (optional )
                      -- Note one or more of the movement events may be for 
                      -- a future time and that this allows conveying multiple 
                      -- predictive phase and movement timing for various uses
                      -- for the current signal group
   maneuverAssistList [3] ManeuverAssistList OPTIONAL,
                      -- This information may also be placed in the 
                      -- IntersectionState when common information applies to
                      -- different lanes in the same way
   regional [4] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN MovementState {
   struct {
      unsigned movementNamePresent : 1;
      unsigned maneuverAssistListPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   DescriptiveName movementName;
   SignalGroupID signalGroup;
   MovementEventList state_time_speed;
   ManeuverAssistList maneuverAssistList;
   MovementState_regional regional;
   OSRTDList extElem1;
} MovementState;

EXTERN int asn1PE_MovementState (OSCTXT* pctxt, MovementState* pvalue);

EXTERN int asn1PD_MovementState (OSCTXT* pctxt, MovementState* pvalue);

EXTERN void asn1Print_MovementState (const char* name, const MovementState* pvalue);

EXTERN int asn1PrtToStrm_MovementState (OSCTXT *pctxt, 
   const char* name, const MovementState* pvalue);

EXTERN int asn1Init_MovementState (MovementState* pvalue);

EXTERN void asn1Free_MovementState (OSCTXT *pctxt, MovementState* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementList                                              */
/*                                                            */
/**************************************************************/
/*
MovementList ::= SEQUENCE (SIZE (1..255)) OF MovementState
*/
/* List of MovementState */
typedef OSRTDList MovementList;

EXTERN int asn1PE_MovementList (OSCTXT* pctxt, MovementList* pvalue);

EXTERN int asn1PD_MovementList (OSCTXT* pctxt, MovementList* pvalue);

EXTERN void asn1Print_MovementList (const char* name, const MovementList* pvalue);

EXTERN int asn1PrtToStrm_MovementList (OSCTXT *pctxt, 
   const char* name, const MovementList* pvalue);

EXTERN int asn1Init_MovementList (MovementList* pvalue);

EXTERN void asn1Free_MovementList (OSCTXT *pctxt, MovementList* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionState_regional                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionState'
*/
/* List of RegionalExtension */
typedef OSRTDList IntersectionState_regional;

EXTERN int asn1PE_IntersectionState_regional (OSCTXT* pctxt, IntersectionState_regional* pvalue);

EXTERN int asn1PD_IntersectionState_regional (OSCTXT* pctxt, IntersectionState_regional* pvalue);

EXTERN void asn1Print_IntersectionState_regional 
   (const char* name, const IntersectionState_regional* pvalue);

EXTERN int asn1PrtToStrm_IntersectionState_regional (OSCTXT *pctxt, 
   const char* name, const IntersectionState_regional* pvalue);

EXTERN int asn1Init_IntersectionState_regional (IntersectionState_regional* pvalue);

EXTERN void asn1Free_IntersectionState_regional (OSCTXT *pctxt, 
   IntersectionState_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionState                                         */
/*                                                            */
/**************************************************************/
/*
IntersectionState ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
                -- human readable name for intersection  
                -- to be used only in debug mode
   id [1] IntersectionReferenceID,
                -- A globally unique value set, consisting of a 
                -- regionID and intersection ID assignment
                -- provides a unique mapping to the 
                -- intersection MAP in question
                -- which provides complete location 
                -- and approach/move/lane data
   revision [2] MsgCount,
   status [3] IntersectionStatusObject,
                -- general status of the controller(s)
   moy [4] MinuteOfTheYear OPTIONAL,
                -- Minute of current UTC year
                -- used only with messages to be archived 
   timeStamp [5] DSecond OPTIONAL,
                -- the mSec point in the current UTC minute that
                -- this message was constructed
   enabledLanes [6] EnabledLaneList OPTIONAL,
                -- a list of lanes where the RevocableLane bit 
                -- has been set which are now active and 
                -- therefore part of the current intersection
   states [7] MovementList,
                -- Each Movement is given in turn
                -- and contains its signal phase state, 
                -- mapping to the lanes it applies to, and
                -- point in time it will end, and it
                -- may contain both active and future states 
   maneuverAssistList [8] ManeuverAssistList OPTIONAL,
                -- Assist data
   regional [9] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN IntersectionState {
   struct {
      unsigned namePresent : 1;
      unsigned moyPresent : 1;
      unsigned timeStampPresent : 1;
      unsigned enabledLanesPresent : 1;
      unsigned maneuverAssistListPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   DescriptiveName name;
   IntersectionReferenceID id;
   MsgCount revision;
   IntersectionStatusObject status;
   MinuteOfTheYear moy;
   DSecond timeStamp;
   EnabledLaneList enabledLanes;
   MovementList states;
   ManeuverAssistList maneuverAssistList;
   IntersectionState_regional regional;
   OSRTDList extElem1;
} IntersectionState;

EXTERN int asn1PE_IntersectionState (OSCTXT* pctxt, IntersectionState* pvalue);

EXTERN int asn1PD_IntersectionState (OSCTXT* pctxt, IntersectionState* pvalue);

EXTERN void asn1Print_IntersectionState 
   (const char* name, const IntersectionState* pvalue);

EXTERN int asn1PrtToStrm_IntersectionState (OSCTXT *pctxt, 
   const char* name, const IntersectionState* pvalue);

EXTERN int asn1Init_IntersectionState (IntersectionState* pvalue);

EXTERN void asn1Free_IntersectionState (OSCTXT *pctxt, IntersectionState* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionStateList                                     */
/*                                                            */
/**************************************************************/
/*
IntersectionStateList ::= SEQUENCE (SIZE (1..32)) OF IntersectionState
*/
/* List of IntersectionState */
typedef OSRTDList IntersectionStateList;

EXTERN int asn1PE_IntersectionStateList (OSCTXT* pctxt, IntersectionStateList* pvalue);

EXTERN int asn1PD_IntersectionStateList (OSCTXT* pctxt, IntersectionStateList* pvalue);

EXTERN void asn1Print_IntersectionStateList 
   (const char* name, const IntersectionStateList* pvalue);

EXTERN int asn1PrtToStrm_IntersectionStateList (OSCTXT *pctxt, 
   const char* name, const IntersectionStateList* pvalue);

EXTERN int asn1Init_IntersectionStateList (IntersectionStateList* pvalue);

EXTERN void asn1Free_IntersectionStateList (OSCTXT *pctxt, 
   IntersectionStateList* pvalue);

/**************************************************************/
/*                                                            */
/*  SPAT_regional                                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SPAT'
*/
/* List of RegionalExtension */
typedef OSRTDList SPAT_regional;

EXTERN int asn1PE_SPAT_regional (OSCTXT* pctxt, SPAT_regional* pvalue);

EXTERN int asn1PD_SPAT_regional (OSCTXT* pctxt, SPAT_regional* pvalue);

EXTERN void asn1Print_SPAT_regional (const char* name, const SPAT_regional* pvalue);

EXTERN int asn1PrtToStrm_SPAT_regional (OSCTXT *pctxt, 
   const char* name, const SPAT_regional* pvalue);

EXTERN int asn1Init_SPAT_regional (SPAT_regional* pvalue);

EXTERN void asn1Free_SPAT_regional (OSCTXT *pctxt, SPAT_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SPAT                                                      */
/*                                                            */
/**************************************************************/
/*
SPAT ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   name [1] DescriptiveName OPTIONAL,
                 -- human readable name for this collection 
                 -- to be used only in debug mode
   intersections [2] IntersectionStateList,
                 -- sets of SPAT data (one per intersection)  
   -- If PrioritizationResponse data is required, it is found 
   -- in the RegionalSPAT entry below
   regional [3] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN SPAT {
   struct {
      unsigned timeStampPresent : 1;
      unsigned namePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MinuteOfTheYear timeStamp;
   DescriptiveName name;
   IntersectionStateList intersections;
   SPAT_regional regional;
   OSRTDList extElem1;
} SPAT;

EXTERN int asn1PE_SPAT (OSCTXT* pctxt, SPAT* pvalue);

EXTERN int asn1PD_SPAT (OSCTXT* pctxt, SPAT* pvalue);

EXTERN void asn1Print_SPAT (const char* name, const SPAT* pvalue);

EXTERN int asn1PrtToStrm_SPAT (OSCTXT *pctxt, const char* name, const SPAT* pvalue);

EXTERN int asn1Init_SPAT (SPAT* pvalue);

EXTERN void asn1Free_SPAT (OSCTXT *pctxt, SPAT* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionAccessPoint                                   */
/*                                                            */
/**************************************************************/
/*
IntersectionAccessPoint ::= CHOICE {
   lane [0] LaneID,
   approach [1] ApproachID,
   connection [2] LaneConnectionID,
   ...
}
*/
/* Choice tag constants */

#define T_IntersectionAccessPoint_lane  1
#define T_IntersectionAccessPoint_approach 2
#define T_IntersectionAccessPoint_connection 3
#define T_IntersectionAccessPoint_extElem1 4

typedef struct EXTERN IntersectionAccessPoint {
   OSINT32 t;
   union {
      /* t = 1 */
      LaneID lane;
      /* t = 2 */
      ApproachID approach;
      /* t = 3 */
      LaneConnectionID connection;
      /* t = 4 */
      ASN1OpenType *extElem1;
   } u;
} IntersectionAccessPoint;

EXTERN int asn1PE_IntersectionAccessPoint (OSCTXT* pctxt, IntersectionAccessPoint* pvalue);

EXTERN int asn1PD_IntersectionAccessPoint (OSCTXT* pctxt, IntersectionAccessPoint* pvalue);

EXTERN void asn1Print_IntersectionAccessPoint 
   (const char* name, const IntersectionAccessPoint* pvalue);

EXTERN int asn1PrtToStrm_IntersectionAccessPoint (OSCTXT *pctxt, 
   const char* name, const IntersectionAccessPoint* pvalue);

EXTERN int asn1Init_IntersectionAccessPoint (IntersectionAccessPoint* pvalue);

EXTERN void asn1Free_IntersectionAccessPoint (OSCTXT *pctxt, 
   IntersectionAccessPoint* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequest_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequest'
*/
/* List of RegionalExtension */
typedef OSRTDList SignalRequest_regional;

EXTERN int asn1PE_SignalRequest_regional (OSCTXT* pctxt, SignalRequest_regional* pvalue);

EXTERN int asn1PD_SignalRequest_regional (OSCTXT* pctxt, SignalRequest_regional* pvalue);

EXTERN void asn1Print_SignalRequest_regional 
   (const char* name, const SignalRequest_regional* pvalue);

EXTERN int asn1PrtToStrm_SignalRequest_regional (OSCTXT *pctxt, 
   const char* name, const SignalRequest_regional* pvalue);

EXTERN int asn1Init_SignalRequest_regional (SignalRequest_regional* pvalue);

EXTERN void asn1Free_SignalRequest_regional (OSCTXT *pctxt, 
   SignalRequest_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequest                                             */
/*                                                            */
/**************************************************************/
/*
SignalRequest ::= SEQUENCE {
   -- the unique ID of the target intersection 
   id [0] IntersectionReferenceID,
   -- The unique requestID used by the requestor
   requestID [1] RequestID,
   -- The type of request or cancel for priority or preempt use
   -- when a prior request is canceled, only the requestID is needed
   requestType [2] PriorityRequestType,
   -- In typical use either an approach or a lane number would
   -- be given, this indicates the requested 
   -- path through the intersection to the degree it is known.
   inBoundLane [3] IntersectionAccessPoint,
                 -- desired entry approach or lane
   outBoundLane [4] IntersectionAccessPoint OPTIONAL,
                 -- desired exit approach or lane
                 -- the values zero is used to indicate 
                 -- intent to stop within the intersection
   regional [5] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN SignalRequest {
   struct {
      unsigned outBoundLanePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   IntersectionReferenceID id;
   RequestID requestID;
   PriorityRequestType requestType;
   IntersectionAccessPoint inBoundLane;
   IntersectionAccessPoint outBoundLane;
   SignalRequest_regional regional;
   OSRTDList extElem1;
} SignalRequest;

EXTERN int asn1PE_SignalRequest (OSCTXT* pctxt, SignalRequest* pvalue);

EXTERN int asn1PD_SignalRequest (OSCTXT* pctxt, SignalRequest* pvalue);

EXTERN void asn1Print_SignalRequest (const char* name, const SignalRequest* pvalue);

EXTERN int asn1PrtToStrm_SignalRequest (OSCTXT *pctxt, 
   const char* name, const SignalRequest* pvalue);

EXTERN int asn1Init_SignalRequest (SignalRequest* pvalue);

EXTERN void asn1Free_SignalRequest (OSCTXT *pctxt, SignalRequest* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestPackage_regional                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequestPackage'
*/
/* List of RegionalExtension */
typedef OSRTDList SignalRequestPackage_regional;

EXTERN int asn1PE_SignalRequestPackage_regional (OSCTXT* pctxt, SignalRequestPackage_regional* pvalue);

EXTERN int asn1PD_SignalRequestPackage_regional (OSCTXT* pctxt, SignalRequestPackage_regional* pvalue);

EXTERN void asn1Print_SignalRequestPackage_regional 
   (const char* name, const SignalRequestPackage_regional* pvalue);

EXTERN int asn1PrtToStrm_SignalRequestPackage_regional (OSCTXT *pctxt, 
   const char* name, const SignalRequestPackage_regional* pvalue);

EXTERN int asn1Init_SignalRequestPackage_regional (
   SignalRequestPackage_regional* pvalue);

EXTERN void asn1Free_SignalRequestPackage_regional (OSCTXT *pctxt, 
   SignalRequestPackage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestPackage                                      */
/*                                                            */
/**************************************************************/
/*
SignalRequestPackage ::= SEQUENCE {
   request [0] SignalRequest,
                  -- The specific request to the intersection
                  -- contains IntersectionID, request type,
                  -- requested action (approach/lane request)
   -- The Estimated Time of Arrival (ETA) when the service is requested
   minute [1] MinuteOfTheYear OPTIONAL,
   second [2] DSecond OPTIONAL,
   duration [3] DSecond OPTIONAL,
                  -- The duration value is used to provide a short interval that
                  -- extends the ETA so that the requesting vehicle can arrive at 
                  -- the point of service with uncertainty or with some desired
                  -- duration of service. This concept can be used to avoid needing 
                  -- to frequently update the request.
                  -- The requester must update the ETA and duration values if the
                  -- period of services extends beyond the duration time.  
                  -- It should be assumed that if the vehicle does not clear the
                  -- intersection when the duration is reached, the request will 
                  -- be cancelled and the intersection will revert to 
                  -- normal operation.
   regional [4] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN SignalRequestPackage {
   struct {
      unsigned minutePresent : 1;
      unsigned secondPresent : 1;
      unsigned durationPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   SignalRequest request;
   MinuteOfTheYear minute;
   DSecond second;
   DSecond duration;
   SignalRequestPackage_regional regional;
   OSRTDList extElem1;
} SignalRequestPackage;

EXTERN int asn1PE_SignalRequestPackage (OSCTXT* pctxt, SignalRequestPackage* pvalue);

EXTERN int asn1PD_SignalRequestPackage (OSCTXT* pctxt, SignalRequestPackage* pvalue);

EXTERN void asn1Print_SignalRequestPackage 
   (const char* name, const SignalRequestPackage* pvalue);

EXTERN int asn1PrtToStrm_SignalRequestPackage (OSCTXT *pctxt, 
   const char* name, const SignalRequestPackage* pvalue);

EXTERN int asn1Init_SignalRequestPackage (SignalRequestPackage* pvalue);

EXTERN void asn1Free_SignalRequestPackage (OSCTXT *pctxt, 
   SignalRequestPackage* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestList                                         */
/*                                                            */
/**************************************************************/
/*
SignalRequestList ::= SEQUENCE (SIZE (1..32)) OF SignalRequestPackage
*/
/* List of SignalRequestPackage */
typedef OSRTDList SignalRequestList;

EXTERN int asn1PE_SignalRequestList (OSCTXT* pctxt, SignalRequestList* pvalue);

EXTERN int asn1PD_SignalRequestList (OSCTXT* pctxt, SignalRequestList* pvalue);

EXTERN void asn1Print_SignalRequestList 
   (const char* name, const SignalRequestList* pvalue);

EXTERN int asn1PrtToStrm_SignalRequestList (OSCTXT *pctxt, 
   const char* name, const SignalRequestList* pvalue);

EXTERN int asn1Init_SignalRequestList (SignalRequestList* pvalue);

EXTERN void asn1Free_SignalRequestList (OSCTXT *pctxt, SignalRequestList* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestorType                                             */
/*                                                            */
/**************************************************************/
/*
RequestorType ::= SEQUENCE {
   -- Defines who is requesting
   role [0] BasicVehicleRole, -- Basic role of this user at this time
   subrole [1] RequestSubRole OPTIONAL, -- A local list with role based items 
   -- Defines what kind of request (a level of importance in the Priority Scheme)
   request [2] RequestImportanceLevel OPTIONAL, -- A local list with request items 
   -- Additional classification details 
   iso3883 [3] Iso3833VehicleType OPTIONAL,
   hpmsType [4] VehicleType OPTIONAL, -- HPMS classification types
   regional [5] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN RequestorType {
   struct {
      unsigned subrolePresent : 1;
      unsigned requestPresent : 1;
      unsigned iso3883Present : 1;
      unsigned hpmsTypePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   BasicVehicleRole role;
   RequestSubRole subrole;
   RequestImportanceLevel request;
   Iso3833VehicleType iso3883;
   VehicleType hpmsType;
   RegionalExtension regional;
   OSRTDList extElem1;
} RequestorType;

EXTERN int asn1PE_RequestorType (OSCTXT* pctxt, RequestorType* pvalue);

EXTERN int asn1PD_RequestorType (OSCTXT* pctxt, RequestorType* pvalue);

EXTERN void asn1Print_RequestorType (const char* name, const RequestorType* pvalue);

EXTERN int asn1PrtToStrm_RequestorType (OSCTXT *pctxt, 
   const char* name, const RequestorType* pvalue);

EXTERN int asn1Init_RequestorType (RequestorType* pvalue);

EXTERN void asn1Free_RequestorType (OSCTXT *pctxt, RequestorType* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestorPositionVector                                   */
/*                                                            */
/**************************************************************/
/*
RequestorPositionVector ::= SEQUENCE {
   position [0] Position3D,
   heading [1] Angle OPTIONAL,
   speed [2] TransmissionAndSpeed OPTIONAL,
   ...
}
*/
typedef struct EXTERN RequestorPositionVector {
   struct {
      unsigned headingPresent : 1;
      unsigned speedPresent : 1;
   } m;
   Position3D position;
   Angle heading;
   TransmissionAndSpeed speed;
   OSRTDList extElem1;
} RequestorPositionVector;

EXTERN int asn1PE_RequestorPositionVector (OSCTXT* pctxt, RequestorPositionVector* pvalue);

EXTERN int asn1PD_RequestorPositionVector (OSCTXT* pctxt, RequestorPositionVector* pvalue);

EXTERN void asn1Print_RequestorPositionVector 
   (const char* name, const RequestorPositionVector* pvalue);

EXTERN int asn1PrtToStrm_RequestorPositionVector (OSCTXT *pctxt, 
   const char* name, const RequestorPositionVector* pvalue);

EXTERN int asn1Init_RequestorPositionVector (RequestorPositionVector* pvalue);

EXTERN void asn1Free_RequestorPositionVector (OSCTXT *pctxt, 
   RequestorPositionVector* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestorDescription_regional                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RequestorDescription'
*/
/* List of RegionalExtension */
typedef OSRTDList RequestorDescription_regional;

EXTERN int asn1PE_RequestorDescription_regional (OSCTXT* pctxt, RequestorDescription_regional* pvalue);

EXTERN int asn1PD_RequestorDescription_regional (OSCTXT* pctxt, RequestorDescription_regional* pvalue);

EXTERN void asn1Print_RequestorDescription_regional 
   (const char* name, const RequestorDescription_regional* pvalue);

EXTERN int asn1PrtToStrm_RequestorDescription_regional (OSCTXT *pctxt, 
   const char* name, const RequestorDescription_regional* pvalue);

EXTERN int asn1Init_RequestorDescription_regional (
   RequestorDescription_regional* pvalue);

EXTERN void asn1Free_RequestorDescription_regional (OSCTXT *pctxt, 
   RequestorDescription_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RequestorDescription                                      */
/*                                                            */
/**************************************************************/
/*
RequestorDescription ::= SEQUENCE {
   id [0] VehicleID,
                     -- The ID used in the BSM or CAM of the requestor
                     -- This ID is presumed not to change 
                     -- during the exchange
   type [1] RequestorType OPTIONAL,
                     -- Information regarding all type and class data
                     -- about the requesting vehicle 
   position [2] RequestorPositionVector OPTIONAL,
                     -- The location of the requesting vehicle
   name [3] DescriptiveName OPTIONAL,
                     -- A human readable name for debugging use
   -- Support for Transit requests
   routeName [4] DescriptiveName OPTIONAL,
                     -- A string for transit operations use
   transitStatus [5] TransitVehicleStatus OPTIONAL,
                     -- current vehicle state (loading, etc.)
   transitOccupancy [6] TransitVehicleOccupancy OPTIONAL,
                     -- current vehicle occupancy 
   transitSchedule [7] DeltaTime OPTIONAL,
                     -- current vehicle schedule adherence 
   regional [8] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN RequestorDescription {
   struct {
      unsigned typePresent : 1;
      unsigned positionPresent : 1;
      unsigned namePresent : 1;
      unsigned routeNamePresent : 1;
      unsigned transitStatusPresent : 1;
      unsigned transitOccupancyPresent : 1;
      unsigned transitSchedulePresent : 1;
      unsigned regionalPresent : 1;
   } m;
   VehicleID id;
   RequestorType type;
   RequestorPositionVector position;
   DescriptiveName name;
   DescriptiveName routeName;
   TransitVehicleStatus transitStatus;
   TransitVehicleOccupancy transitOccupancy;
   DeltaTime transitSchedule;
   RequestorDescription_regional regional;
   OSRTDList extElem1;
} RequestorDescription;

EXTERN int asn1PE_RequestorDescription (OSCTXT* pctxt, RequestorDescription* pvalue);

EXTERN int asn1PD_RequestorDescription (OSCTXT* pctxt, RequestorDescription* pvalue);

EXTERN void asn1Print_RequestorDescription 
   (const char* name, const RequestorDescription* pvalue);

EXTERN int asn1PrtToStrm_RequestorDescription (OSCTXT *pctxt, 
   const char* name, const RequestorDescription* pvalue);

EXTERN int asn1Init_RequestorDescription (RequestorDescription* pvalue);

EXTERN void asn1Free_RequestorDescription (OSCTXT *pctxt, 
   RequestorDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestMessage_regional                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalRequestMessage'
*/
/* List of RegionalExtension */
typedef OSRTDList SignalRequestMessage_regional;

EXTERN int asn1PE_SignalRequestMessage_regional (OSCTXT* pctxt, SignalRequestMessage_regional* pvalue);

EXTERN int asn1PD_SignalRequestMessage_regional (OSCTXT* pctxt, SignalRequestMessage_regional* pvalue);

EXTERN void asn1Print_SignalRequestMessage_regional 
   (const char* name, const SignalRequestMessage_regional* pvalue);

EXTERN int asn1PrtToStrm_SignalRequestMessage_regional (OSCTXT *pctxt, 
   const char* name, const SignalRequestMessage_regional* pvalue);

EXTERN int asn1Init_SignalRequestMessage_regional (
   SignalRequestMessage_regional* pvalue);

EXTERN void asn1Free_SignalRequestMessage_regional (OSCTXT *pctxt, 
   SignalRequestMessage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequestMessage                                      */
/*                                                            */
/**************************************************************/
/*
SignalRequestMessage ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   second [1] DSecond,
   sequenceNumber [2] MsgCount OPTIONAL,
   requests [3] SignalRequestList OPTIONAL,
                   -- Request Data for one or more signalized 
                   -- intersections that support SRM dialogs
   requestor [4] RequestorDescription,
                   -- Requesting Device and other User Data
                   -- contains vehicle ID (if from a vehicle)
                   -- as well as type data and current position
                   -- and may contain additional transit data
   regional [5] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN SignalRequestMessage {
   struct {
      unsigned timeStampPresent : 1;
      unsigned sequenceNumberPresent : 1;
      unsigned requestsPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MinuteOfTheYear timeStamp;
   DSecond second;
   MsgCount sequenceNumber;
   SignalRequestList requests;
   RequestorDescription requestor;
   SignalRequestMessage_regional regional;
   OSRTDList extElem1;
} SignalRequestMessage;

EXTERN int asn1PE_SignalRequestMessage (OSCTXT* pctxt, SignalRequestMessage* pvalue);

EXTERN int asn1PD_SignalRequestMessage (OSCTXT* pctxt, SignalRequestMessage* pvalue);

EXTERN void asn1Print_SignalRequestMessage 
   (const char* name, const SignalRequestMessage* pvalue);

EXTERN int asn1PrtToStrm_SignalRequestMessage (OSCTXT *pctxt, 
   const char* name, const SignalRequestMessage* pvalue);

EXTERN int asn1Init_SignalRequestMessage (SignalRequestMessage* pvalue);

EXTERN void asn1Free_SignalRequestMessage (OSCTXT *pctxt, 
   SignalRequestMessage* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalRequesterInfo                                       */
/*                                                            */
/**************************************************************/
/*
SignalRequesterInfo ::= SEQUENCE {
   -- These three items serve to uniquely identify the requester
   -- and the specific request to all parties
   id [0] VehicleID,
   request [1] RequestID,
   sequenceNumber [2] MsgCount,
   role [3] BasicVehicleRole OPTIONAL,
   typeData [4] RequestorType OPTIONAL,
                  -- Used when addition data besides the role
                  -- is needed, at which point the role entry
                  -- above is not sent.
   ...
}
*/
typedef struct EXTERN SignalRequesterInfo {
   struct {
      unsigned rolePresent : 1;
      unsigned typeDataPresent : 1;
   } m;
   VehicleID id;
   RequestID request;
   MsgCount sequenceNumber;
   BasicVehicleRole role;
   RequestorType typeData;
   OSRTDList extElem1;
} SignalRequesterInfo;

EXTERN int asn1PE_SignalRequesterInfo (OSCTXT* pctxt, SignalRequesterInfo* pvalue);

EXTERN int asn1PD_SignalRequesterInfo (OSCTXT* pctxt, SignalRequesterInfo* pvalue);

EXTERN void asn1Print_SignalRequesterInfo 
   (const char* name, const SignalRequesterInfo* pvalue);

EXTERN int asn1PrtToStrm_SignalRequesterInfo (OSCTXT *pctxt, 
   const char* name, const SignalRequesterInfo* pvalue);

EXTERN int asn1Init_SignalRequesterInfo (SignalRequesterInfo* pvalue);

EXTERN void asn1Free_SignalRequesterInfo (OSCTXT *pctxt, SignalRequesterInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusPackage_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalStatusPackage'
*/
/* List of RegionalExtension */
typedef OSRTDList SignalStatusPackage_regional;

EXTERN int asn1PE_SignalStatusPackage_regional (OSCTXT* pctxt, SignalStatusPackage_regional* pvalue);

EXTERN int asn1PD_SignalStatusPackage_regional (OSCTXT* pctxt, SignalStatusPackage_regional* pvalue);

EXTERN void asn1Print_SignalStatusPackage_regional 
   (const char* name, const SignalStatusPackage_regional* pvalue);

EXTERN int asn1PrtToStrm_SignalStatusPackage_regional (OSCTXT *pctxt, 
   const char* name, const SignalStatusPackage_regional* pvalue);

EXTERN int asn1Init_SignalStatusPackage_regional (
   SignalStatusPackage_regional* pvalue);

EXTERN void asn1Free_SignalStatusPackage_regional (OSCTXT *pctxt, 
   SignalStatusPackage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusPackage                                       */
/*                                                            */
/**************************************************************/
/*
SignalStatusPackage ::= SEQUENCE {
   -- The party that made the initial SRM request
   requester [0] SignalRequesterInfo OPTIONAL,
   -- The lanes or approaches used in the request
   inboundOn [1] IntersectionAccessPoint, -- estimated lane / approach of vehicle
   outboundOn [2] IntersectionAccessPoint OPTIONAL,
   -- The Estimated Time of Arrival (ETA) when the service is requested
   -- This data echos the data of the request 
   minute [3] MinuteOfTheYear OPTIONAL,
   second [4] DSecond OPTIONAL,
   duration [5] DSecond OPTIONAL,
   -- the SRM status for this request
   status [6] PrioritizationResponseStatus,
                -- Status of request, this may include rejection
   regional [7] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN SignalStatusPackage {
   struct {
      unsigned requesterPresent : 1;
      unsigned outboundOnPresent : 1;
      unsigned minutePresent : 1;
      unsigned secondPresent : 1;
      unsigned durationPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   SignalRequesterInfo requester;
   IntersectionAccessPoint inboundOn;
   IntersectionAccessPoint outboundOn;
   MinuteOfTheYear minute;
   DSecond second;
   DSecond duration;
   PrioritizationResponseStatus status;
   SignalStatusPackage_regional regional;
   OSRTDList extElem1;
} SignalStatusPackage;

EXTERN int asn1PE_SignalStatusPackage (OSCTXT* pctxt, SignalStatusPackage* pvalue);

EXTERN int asn1PD_SignalStatusPackage (OSCTXT* pctxt, SignalStatusPackage* pvalue);

EXTERN void asn1Print_SignalStatusPackage 
   (const char* name, const SignalStatusPackage* pvalue);

EXTERN int asn1PrtToStrm_SignalStatusPackage (OSCTXT *pctxt, 
   const char* name, const SignalStatusPackage* pvalue);

EXTERN int asn1Init_SignalStatusPackage (SignalStatusPackage* pvalue);

EXTERN void asn1Free_SignalStatusPackage (OSCTXT *pctxt, SignalStatusPackage* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusPackageList                                   */
/*                                                            */
/**************************************************************/
/*
SignalStatusPackageList ::= SEQUENCE (SIZE (1..32)) OF SignalStatusPackage
*/
/* List of SignalStatusPackage */
typedef OSRTDList SignalStatusPackageList;

EXTERN int asn1PE_SignalStatusPackageList (OSCTXT* pctxt, SignalStatusPackageList* pvalue);

EXTERN int asn1PD_SignalStatusPackageList (OSCTXT* pctxt, SignalStatusPackageList* pvalue);

EXTERN void asn1Print_SignalStatusPackageList 
   (const char* name, const SignalStatusPackageList* pvalue);

EXTERN int asn1PrtToStrm_SignalStatusPackageList (OSCTXT *pctxt, 
   const char* name, const SignalStatusPackageList* pvalue);

EXTERN int asn1Init_SignalStatusPackageList (SignalStatusPackageList* pvalue);

EXTERN void asn1Free_SignalStatusPackageList (OSCTXT *pctxt, 
   SignalStatusPackageList* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatus_regional                                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalStatus'
*/
/* List of RegionalExtension */
typedef OSRTDList SignalStatus_regional;

EXTERN int asn1PE_SignalStatus_regional (OSCTXT* pctxt, SignalStatus_regional* pvalue);

EXTERN int asn1PD_SignalStatus_regional (OSCTXT* pctxt, SignalStatus_regional* pvalue);

EXTERN void asn1Print_SignalStatus_regional 
   (const char* name, const SignalStatus_regional* pvalue);

EXTERN int asn1PrtToStrm_SignalStatus_regional (OSCTXT *pctxt, 
   const char* name, const SignalStatus_regional* pvalue);

EXTERN int asn1Init_SignalStatus_regional (SignalStatus_regional* pvalue);

EXTERN void asn1Free_SignalStatus_regional (OSCTXT *pctxt, 
   SignalStatus_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatus                                              */
/*                                                            */
/**************************************************************/
/*
SignalStatus ::= SEQUENCE {
   sequenceNumber [0] MsgCount,
                  -- changed whenever the below contents have change
   id [1] IntersectionReferenceID,
                  -- this provides a unique mapping to the 
                  -- intersection map in question
                  -- which provides complete location 
                  -- and approach/movement/lane data
                  -- as well as zones for priority/preemption
   sigStatus [2] SignalStatusPackageList,
                  -- a list of detailed status containing all
                  -- priority or preemption state data, both
                  -- active and pending, and who requested it
                  -- requests which are denied are also listed
                  -- here for a short period of time
   regional [3] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN SignalStatus {
   struct {
      unsigned regionalPresent : 1;
   } m;
   MsgCount sequenceNumber;
   IntersectionReferenceID id;
   SignalStatusPackageList sigStatus;
   SignalStatus_regional regional;
   OSRTDList extElem1;
} SignalStatus;

EXTERN int asn1PE_SignalStatus (OSCTXT* pctxt, SignalStatus* pvalue);

EXTERN int asn1PD_SignalStatus (OSCTXT* pctxt, SignalStatus* pvalue);

EXTERN void asn1Print_SignalStatus (const char* name, const SignalStatus* pvalue);

EXTERN int asn1PrtToStrm_SignalStatus (OSCTXT *pctxt, 
   const char* name, const SignalStatus* pvalue);

EXTERN int asn1Init_SignalStatus (SignalStatus* pvalue);

EXTERN void asn1Free_SignalStatus (OSCTXT *pctxt, SignalStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusList                                          */
/*                                                            */
/**************************************************************/
/*
SignalStatusList ::= SEQUENCE (SIZE (1..32)) OF SignalStatus
*/
/* List of SignalStatus */
typedef OSRTDList SignalStatusList;

EXTERN int asn1PE_SignalStatusList (OSCTXT* pctxt, SignalStatusList* pvalue);

EXTERN int asn1PD_SignalStatusList (OSCTXT* pctxt, SignalStatusList* pvalue);

EXTERN void asn1Print_SignalStatusList 
   (const char* name, const SignalStatusList* pvalue);

EXTERN int asn1PrtToStrm_SignalStatusList (OSCTXT *pctxt, 
   const char* name, const SignalStatusList* pvalue);

EXTERN int asn1Init_SignalStatusList (SignalStatusList* pvalue);

EXTERN void asn1Free_SignalStatusList (OSCTXT *pctxt, SignalStatusList* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusMessage_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SignalStatusMessage'
*/
/* List of RegionalExtension */
typedef OSRTDList SignalStatusMessage_regional;

EXTERN int asn1PE_SignalStatusMessage_regional (OSCTXT* pctxt, SignalStatusMessage_regional* pvalue);

EXTERN int asn1PD_SignalStatusMessage_regional (OSCTXT* pctxt, SignalStatusMessage_regional* pvalue);

EXTERN void asn1Print_SignalStatusMessage_regional 
   (const char* name, const SignalStatusMessage_regional* pvalue);

EXTERN int asn1PrtToStrm_SignalStatusMessage_regional (OSCTXT *pctxt, 
   const char* name, const SignalStatusMessage_regional* pvalue);

EXTERN int asn1Init_SignalStatusMessage_regional (
   SignalStatusMessage_regional* pvalue);

EXTERN void asn1Free_SignalStatusMessage_regional (OSCTXT *pctxt, 
   SignalStatusMessage_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalStatusMessage                                       */
/*                                                            */
/**************************************************************/
/*
SignalStatusMessage ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   second [1] DSecond,
   sequenceNumber [2] MsgCount OPTIONAL,
   -- Status Data for one of more signalized intersections
   status [3] SignalStatusList,
   regional [4] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN SignalStatusMessage {
   struct {
      unsigned timeStampPresent : 1;
      unsigned sequenceNumberPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MinuteOfTheYear timeStamp;
   DSecond second;
   MsgCount sequenceNumber;
   SignalStatusList status;
   SignalStatusMessage_regional regional;
   OSRTDList extElem1;
} SignalStatusMessage;

EXTERN int asn1PE_SignalStatusMessage (OSCTXT* pctxt, SignalStatusMessage* pvalue);

EXTERN int asn1PD_SignalStatusMessage (OSCTXT* pctxt, SignalStatusMessage* pvalue);

EXTERN void asn1Print_SignalStatusMessage 
   (const char* name, const SignalStatusMessage* pvalue);

EXTERN int asn1PrtToStrm_SignalStatusMessage (OSCTXT *pctxt, 
   const char* name, const SignalStatusMessage* pvalue);

EXTERN int asn1Init_SignalStatusMessage (SignalStatusMessage* pvalue);

EXTERN void asn1Free_SignalStatusMessage (OSCTXT *pctxt, SignalStatusMessage* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSignID                                                */
/*                                                            */
/**************************************************************/
/*
RoadSignID ::= SEQUENCE {
   position [0] Position3D,
                   -- Location of sign
   viewAngle [1] HeadingSlice,
                   -- Vehicle direction of travel while
                   -- facing active side of sign
   mutcdCode [2] MUTCDCode OPTIONAL,
                   -- Tag for MUTCD code or "generic sign" 
   crc [3] MsgCRC OPTIONAL
                   -- Used to provide a check sum
}
*/
typedef struct EXTERN RoadSignID {
   struct {
      unsigned mutcdCodePresent : 1;
      unsigned crcPresent : 1;
   } m;
   Position3D position;
   HeadingSlice viewAngle;
   MUTCDCode mutcdCode;
   MsgCRC crc;
} RoadSignID;

EXTERN int asn1PE_RoadSignID (OSCTXT* pctxt, RoadSignID* pvalue);

EXTERN int asn1PD_RoadSignID (OSCTXT* pctxt, RoadSignID* pvalue);

EXTERN void asn1Print_RoadSignID (const char* name, const RoadSignID* pvalue);

EXTERN int asn1PrtToStrm_RoadSignID (OSCTXT *pctxt, 
   const char* name, const RoadSignID* pvalue);

EXTERN int asn1Init_RoadSignID (RoadSignID* pvalue);

EXTERN void asn1Free_RoadSignID (OSCTXT *pctxt, RoadSignID* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame_msgId                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerDataFrame'
*/
/* Choice tag constants */

#define T_TravelerDataFrame_msgId_furtherInfoID 1
#define T_TravelerDataFrame_msgId_roadSignID 2

typedef struct EXTERN TravelerDataFrame_msgId {
   OSINT32 t;
   union {
      /* t = 1 */
      FurtherInfoID *furtherInfoID;
      /* t = 2 */
      RoadSignID *roadSignID;
   } u;
} TravelerDataFrame_msgId;

EXTERN int asn1PE_TravelerDataFrame_msgId (OSCTXT* pctxt, TravelerDataFrame_msgId* pvalue);

EXTERN int asn1PD_TravelerDataFrame_msgId (OSCTXT* pctxt, TravelerDataFrame_msgId* pvalue);

EXTERN void asn1Print_TravelerDataFrame_msgId 
   (const char* name, const TravelerDataFrame_msgId* pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrame_msgId (OSCTXT *pctxt, 
   const char* name, const TravelerDataFrame_msgId* pvalue);

EXTERN int asn1Init_TravelerDataFrame_msgId (TravelerDataFrame_msgId* pvalue);

EXTERN void asn1Free_TravelerDataFrame_msgId (OSCTXT *pctxt, 
   TravelerDataFrame_msgId* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LL_24B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-24B ::= SEQUENCE {
   -- ranges of +- 0.0002047 degrees
   -- ranges of +- 22.634554 meters at the equator
   lon [0] OffsetLL-B12,
   lat [1] OffsetLL-B12
}
*/
typedef struct EXTERN Node_LL_24B {
   OffsetLL_B12 lon;
   OffsetLL_B12 lat;
} Node_LL_24B;

EXTERN int asn1PE_Node_LL_24B (OSCTXT* pctxt, Node_LL_24B* pvalue);

EXTERN int asn1PD_Node_LL_24B (OSCTXT* pctxt, Node_LL_24B* pvalue);

EXTERN void asn1Print_Node_LL_24B (const char* name, const Node_LL_24B* pvalue);

EXTERN int asn1PrtToStrm_Node_LL_24B (OSCTXT *pctxt, 
   const char* name, const Node_LL_24B* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LL_28B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-28B ::= SEQUENCE {
   -- ranges of +- 0.0008191 degrees
   -- ranges of +- 90.571389 meters at the equator
   lon [0] OffsetLL-B14,
   lat [1] OffsetLL-B14
}
*/
typedef struct EXTERN Node_LL_28B {
   OffsetLL_B14 lon;
   OffsetLL_B14 lat;
} Node_LL_28B;

EXTERN int asn1PE_Node_LL_28B (OSCTXT* pctxt, Node_LL_28B* pvalue);

EXTERN int asn1PD_Node_LL_28B (OSCTXT* pctxt, Node_LL_28B* pvalue);

EXTERN void asn1Print_Node_LL_28B (const char* name, const Node_LL_28B* pvalue);

EXTERN int asn1PrtToStrm_Node_LL_28B (OSCTXT *pctxt, 
   const char* name, const Node_LL_28B* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LL_32B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-32B ::= SEQUENCE {
   -- ranges of +- 0.0032767 degrees
   -- ranges of +- 362.31873 meters at the equator
   lon [0] OffsetLL-B16,
   lat [1] OffsetLL-B16
}
*/
typedef struct EXTERN Node_LL_32B {
   OffsetLL_B16 lon;
   OffsetLL_B16 lat;
} Node_LL_32B;

EXTERN int asn1PE_Node_LL_32B (OSCTXT* pctxt, Node_LL_32B* pvalue);

EXTERN int asn1PD_Node_LL_32B (OSCTXT* pctxt, Node_LL_32B* pvalue);

EXTERN void asn1Print_Node_LL_32B (const char* name, const Node_LL_32B* pvalue);

EXTERN int asn1PrtToStrm_Node_LL_32B (OSCTXT *pctxt, 
   const char* name, const Node_LL_32B* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LL_36B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-36B ::= SEQUENCE {
   -- ranges of +- 0.0131071 degrees
   -- ranges of +- 01.449308 Kmeters at the equator
   lon [0] OffsetLL-B18,
   lat [1] OffsetLL-B18
}
*/
typedef struct EXTERN Node_LL_36B {
   OffsetLL_B18 lon;
   OffsetLL_B18 lat;
} Node_LL_36B;

EXTERN int asn1PE_Node_LL_36B (OSCTXT* pctxt, Node_LL_36B* pvalue);

EXTERN int asn1PD_Node_LL_36B (OSCTXT* pctxt, Node_LL_36B* pvalue);

EXTERN void asn1Print_Node_LL_36B (const char* name, const Node_LL_36B* pvalue);

EXTERN int asn1PrtToStrm_Node_LL_36B (OSCTXT *pctxt, 
   const char* name, const Node_LL_36B* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LL_44B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-44B ::= SEQUENCE {
   -- ranges of +- 0.2097151 degrees
   -- ranges of +- 23.189096 Kmeters at the equator
   lon [0] OffsetLL-B22,
   lat [1] OffsetLL-B22
}
*/
typedef struct EXTERN Node_LL_44B {
   OffsetLL_B22 lon;
   OffsetLL_B22 lat;
} Node_LL_44B;

EXTERN int asn1PE_Node_LL_44B (OSCTXT* pctxt, Node_LL_44B* pvalue);

EXTERN int asn1PD_Node_LL_44B (OSCTXT* pctxt, Node_LL_44B* pvalue);

EXTERN void asn1Print_Node_LL_44B (const char* name, const Node_LL_44B* pvalue);

EXTERN int asn1PrtToStrm_Node_LL_44B (OSCTXT *pctxt, 
   const char* name, const Node_LL_44B* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LL_48B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-48B ::= SEQUENCE {
   -- ranges of +- 0.8388607 degrees
   -- ranges of +- 92.756481 Kmeters at the equator
   lon [0] OffsetLL-B24,
   lat [1] OffsetLL-B24
}
*/
typedef struct EXTERN Node_LL_48B {
   OffsetLL_B24 lon;
   OffsetLL_B24 lat;
} Node_LL_48B;

EXTERN int asn1PE_Node_LL_48B (OSCTXT* pctxt, Node_LL_48B* pvalue);

EXTERN int asn1PD_Node_LL_48B (OSCTXT* pctxt, Node_LL_48B* pvalue);

EXTERN void asn1Print_Node_LL_48B (const char* name, const Node_LL_48B* pvalue);

EXTERN int asn1PrtToStrm_Node_LL_48B (OSCTXT *pctxt, 
   const char* name, const Node_LL_48B* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeOffsetPointLL                                         */
/*                                                            */
/**************************************************************/
/*
NodeOffsetPointLL ::= CHOICE {
   -- Nodes with LL content         Span at the equator when using a zoom of one:
   node-LL1 [0] Node-LL-24B, -- within +- 22.634554  meters of last node
   node-LL2 [1] Node-LL-28B, -- within +- 90.571389  meters of last node
   node-LL3 [2] Node-LL-32B, -- within +- 362.31873  meters of last node
   node-LL4 [3] Node-LL-36B, -- within +- 01.449308 Kmeters of last node
   node-LL5 [4] Node-LL-44B, -- within +- 23.189096 Kmeters of last node
   node-LL6 [5] Node-LL-48B, -- within +- 92.756481 Kmeters of last node
   node-LatLon [6] Node-LLmD-64b, -- node is a full 32b Lat/Lon range
   regional [7] RegionalExtension
                                    -- node which follows is of a
                                    -- regional definition type
}
*/
/* Choice tag constants */

#define T_NodeOffsetPointLL_node_LL1    1
#define T_NodeOffsetPointLL_node_LL2    2
#define T_NodeOffsetPointLL_node_LL3    3
#define T_NodeOffsetPointLL_node_LL4    4
#define T_NodeOffsetPointLL_node_LL5    5
#define T_NodeOffsetPointLL_node_LL6    6
#define T_NodeOffsetPointLL_node_LatLon 7
#define T_NodeOffsetPointLL_regional    8

typedef struct EXTERN NodeOffsetPointLL {
   OSINT32 t;
   union {
      /* t = 1 */
      Node_LL_24B *node_LL1;
      /* t = 2 */
      Node_LL_28B *node_LL2;
      /* t = 3 */
      Node_LL_32B *node_LL3;
      /* t = 4 */
      Node_LL_36B *node_LL4;
      /* t = 5 */
      Node_LL_44B *node_LL5;
      /* t = 6 */
      Node_LL_48B *node_LL6;
      /* t = 7 */
      Node_LLmD_64b *node_LatLon;
      /* t = 8 */
      RegionalExtension *regional;
   } u;
} NodeOffsetPointLL;

EXTERN int asn1PE_NodeOffsetPointLL (OSCTXT* pctxt, NodeOffsetPointLL* pvalue);

EXTERN int asn1PD_NodeOffsetPointLL (OSCTXT* pctxt, NodeOffsetPointLL* pvalue);

EXTERN void asn1Print_NodeOffsetPointLL 
   (const char* name, const NodeOffsetPointLL* pvalue);

EXTERN int asn1PrtToStrm_NodeOffsetPointLL (OSCTXT *pctxt, 
   const char* name, const NodeOffsetPointLL* pvalue);

EXTERN int asn1Init_NodeOffsetPointLL (NodeOffsetPointLL* pvalue);

EXTERN void asn1Free_NodeOffsetPointLL (OSCTXT *pctxt, NodeOffsetPointLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeLLList                                       */
/*                                                            */
/**************************************************************/
/*
NodeAttributeLLList ::= SEQUENCE (SIZE (1..8)) OF NodeAttributeLL
*/
typedef struct EXTERN NodeAttributeLLList {
   OSSIZE n;
   NodeAttributeLL elem[8];
} NodeAttributeLLList;

EXTERN int asn1PE_NodeAttributeLLList (OSCTXT* pctxt, NodeAttributeLLList* pvalue);

EXTERN int asn1PD_NodeAttributeLLList (OSCTXT* pctxt, NodeAttributeLLList* pvalue);

EXTERN void asn1Print_NodeAttributeLLList 
   (const char* name, const NodeAttributeLLList* pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeLLList (OSCTXT *pctxt, 
   const char* name, const NodeAttributeLLList* pvalue);

EXTERN int asn1Init_NodeAttributeLLList (NodeAttributeLLList* pvalue);

/**************************************************************/
/*                                                            */
/*  SegmentAttributeLLList                                    */
/*                                                            */
/**************************************************************/
/*
SegmentAttributeLLList ::= SEQUENCE (SIZE (1..8)) OF SegmentAttributeLL
*/
typedef struct EXTERN SegmentAttributeLLList {
   OSSIZE n;
   SegmentAttributeLL elem[8];
} SegmentAttributeLLList;

EXTERN int asn1PE_SegmentAttributeLLList (OSCTXT* pctxt, SegmentAttributeLLList* pvalue);

EXTERN int asn1PD_SegmentAttributeLLList (OSCTXT* pctxt, SegmentAttributeLLList* pvalue);

EXTERN void asn1Print_SegmentAttributeLLList 
   (const char* name, const SegmentAttributeLLList* pvalue);

EXTERN int asn1PrtToStrm_SegmentAttributeLLList (OSCTXT *pctxt, 
   const char* name, const SegmentAttributeLLList* pvalue);

EXTERN int asn1Init_SegmentAttributeLLList (SegmentAttributeLLList* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetLL_regional                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NodeAttributeSetLL'
*/
/* List of RegionalExtension */
typedef OSRTDList NodeAttributeSetLL_regional;

EXTERN int asn1PE_NodeAttributeSetLL_regional (OSCTXT* pctxt, NodeAttributeSetLL_regional* pvalue);

EXTERN int asn1PD_NodeAttributeSetLL_regional (OSCTXT* pctxt, NodeAttributeSetLL_regional* pvalue);

EXTERN void asn1Print_NodeAttributeSetLL_regional 
   (const char* name, const NodeAttributeSetLL_regional* pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeSetLL_regional (OSCTXT *pctxt, 
   const char* name, const NodeAttributeSetLL_regional* pvalue);

EXTERN int asn1Init_NodeAttributeSetLL_regional (NodeAttributeSetLL_regional* pvalue);

EXTERN void asn1Free_NodeAttributeSetLL_regional (OSCTXT *pctxt, 
   NodeAttributeSetLL_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetLL                                        */
/*                                                            */
/**************************************************************/
/*
NodeAttributeSetLL ::= SEQUENCE {
   localNode [0] NodeAttributeLLList OPTIONAL,
                -- Attribute states which pertain to this node point
   disabled [1] SegmentAttributeLLList OPTIONAL,
                -- Attribute states which are disabled at this node point
   enabled [2] SegmentAttributeLLList OPTIONAL,
                -- Attribute states which are enabled at this node point
                -- and which remain enabled until disabled or the lane ends
   data [3] LaneDataAttributeList OPTIONAL,
                -- Attributes which require an additional data values
                -- some of these are local to the node point, while others
                -- persist with the provided values until changed
                -- and this is indicated in each entry
   dWidth [4] Offset-B10 OPTIONAL,
                -- A value added to the current lane width
                -- at this node and from this node onwards, in 1cm steps
                -- lane width between nodes are a linear taper between pts
                -- the value of zero shall not be sent here
   dElevation [5] Offset-B10 OPTIONAL,
                -- A value added to the current Elevation 
                -- at this node from this node onwards, in 10cm steps
                -- elevations between nodes are a linear taper between pts
                -- the value of zero shall not be sent here
   regional [6] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN NodeAttributeSetLL {
   struct {
      unsigned localNodePresent : 1;
      unsigned disabledPresent : 1;
      unsigned enabledPresent : 1;
      unsigned dataPresent : 1;
      unsigned dWidthPresent : 1;
      unsigned dElevationPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   NodeAttributeLLList localNode;
   SegmentAttributeLLList disabled;
   SegmentAttributeLLList enabled;
   LaneDataAttributeList data;
   Offset_B10 dWidth;
   Offset_B10 dElevation;
   NodeAttributeSetLL_regional regional;
   OSRTDList extElem1;
} NodeAttributeSetLL;

EXTERN int asn1PE_NodeAttributeSetLL (OSCTXT* pctxt, NodeAttributeSetLL* pvalue);

EXTERN int asn1PD_NodeAttributeSetLL (OSCTXT* pctxt, NodeAttributeSetLL* pvalue);

EXTERN void asn1Print_NodeAttributeSetLL 
   (const char* name, const NodeAttributeSetLL* pvalue);

EXTERN int asn1PrtToStrm_NodeAttributeSetLL (OSCTXT *pctxt, 
   const char* name, const NodeAttributeSetLL* pvalue);

EXTERN int asn1Init_NodeAttributeSetLL (NodeAttributeSetLL* pvalue);

EXTERN void asn1Free_NodeAttributeSetLL (OSCTXT *pctxt, NodeAttributeSetLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeLL                                                    */
/*                                                            */
/**************************************************************/
/*
NodeLL ::= SEQUENCE {
   delta [0] NodeOffsetPointLL,
               -- A choice of which Lat,Lon offset value to use  
               -- this includes various delta values as well a regional choices
   attributes [1] NodeAttributeSetLL OPTIONAL,
               -- Any optional Attributes which are needed
               -- This includes changes to the current lane width and elevation
   ...
}
*/
typedef struct EXTERN NodeLL {
   struct {
      unsigned attributesPresent : 1;
   } m;
   NodeOffsetPointLL delta;
   NodeAttributeSetLL attributes;
   OSRTDList extElem1;
} NodeLL;

EXTERN int asn1PE_NodeLL (OSCTXT* pctxt, NodeLL* pvalue);

EXTERN int asn1PD_NodeLL (OSCTXT* pctxt, NodeLL* pvalue);

EXTERN void asn1Print_NodeLL (const char* name, const NodeLL* pvalue);

EXTERN int asn1PrtToStrm_NodeLL (OSCTXT *pctxt, 
   const char* name, const NodeLL* pvalue);

EXTERN int asn1Init_NodeLL (NodeLL* pvalue);

EXTERN void asn1Free_NodeLL (OSCTXT *pctxt, NodeLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeSetLL                                                 */
/*                                                            */
/**************************************************************/
/*
NodeSetLL ::= SEQUENCE (SIZE (2..63)) OF NodeLL
*/
/* List of NodeLL */
typedef OSRTDList NodeSetLL;

EXTERN int asn1PE_NodeSetLL (OSCTXT* pctxt, NodeSetLL* pvalue);

EXTERN int asn1PD_NodeSetLL (OSCTXT* pctxt, NodeSetLL* pvalue);

EXTERN void asn1Print_NodeSetLL (const char* name, const NodeSetLL* pvalue);

EXTERN int asn1PrtToStrm_NodeSetLL (OSCTXT *pctxt, 
   const char* name, const NodeSetLL* pvalue);

EXTERN int asn1Init_NodeSetLL (NodeSetLL* pvalue);

EXTERN void asn1Free_NodeSetLL (OSCTXT *pctxt, NodeSetLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeListLL                                                */
/*                                                            */
/**************************************************************/
/*
NodeListLL ::= CHOICE {
   nodes [0] NodeSetLL,
         -- a path made up of two or more
         -- LL node points and any attributes 
         -- defined in those nodes
   ...
}
*/
/* Choice tag constants */

#define T_NodeListLL_nodes              1
#define T_NodeListLL_extElem1           2

typedef struct EXTERN NodeListLL {
   OSINT32 t;
   union {
      /* t = 1 */
      NodeSetLL *nodes;
      /* t = 2 */
      ASN1OpenType *extElem1;
   } u;
} NodeListLL;

EXTERN int asn1PE_NodeListLL (OSCTXT* pctxt, NodeListLL* pvalue);

EXTERN int asn1PD_NodeListLL (OSCTXT* pctxt, NodeListLL* pvalue);

EXTERN void asn1Print_NodeListLL (const char* name, const NodeListLL* pvalue);

EXTERN int asn1PrtToStrm_NodeListLL (OSCTXT *pctxt, 
   const char* name, const NodeListLL* pvalue);

EXTERN int asn1Init_NodeListLL (NodeListLL* pvalue);

EXTERN void asn1Free_NodeListLL (OSCTXT *pctxt, NodeListLL* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetSystem_offset                                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'OffsetSystem'
*/
/* Choice tag constants */

#define T_OffsetSystem_offset_xy        1
#define T_OffsetSystem_offset_ll        2

typedef struct EXTERN OffsetSystem_offset {
   OSINT32 t;
   union {
      /* t = 1 */
      NodeListXY *xy;
      /* t = 2 */
      NodeListLL *ll;
   } u;
} OffsetSystem_offset;

EXTERN int asn1PE_OffsetSystem_offset (OSCTXT* pctxt, OffsetSystem_offset* pvalue);

EXTERN int asn1PD_OffsetSystem_offset (OSCTXT* pctxt, OffsetSystem_offset* pvalue);

EXTERN void asn1Print_OffsetSystem_offset 
   (const char* name, const OffsetSystem_offset* pvalue);

EXTERN int asn1PrtToStrm_OffsetSystem_offset (OSCTXT *pctxt, 
   const char* name, const OffsetSystem_offset* pvalue);

EXTERN int asn1Init_OffsetSystem_offset (OffsetSystem_offset* pvalue);

EXTERN void asn1Free_OffsetSystem_offset (OSCTXT *pctxt, OffsetSystem_offset* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetSystem                                              */
/*                                                            */
/**************************************************************/
/*
OffsetSystem ::= SEQUENCE {
   scale [0] Zoom OPTIONAL,
   offset [1] CHOICE {
      xy [0] NodeListXY, -- offsets of 1.0 centimeters 
      ll [1] NodeListLL -- offsets of 0.1 microdegrees
   }
}
*/
typedef struct EXTERN OffsetSystem {
   struct {
      unsigned scalePresent : 1;
   } m;
   Zoom scale;
   OffsetSystem_offset offset;
} OffsetSystem;

EXTERN int asn1PE_OffsetSystem (OSCTXT* pctxt, OffsetSystem* pvalue);

EXTERN int asn1PD_OffsetSystem (OSCTXT* pctxt, OffsetSystem* pvalue);

EXTERN void asn1Print_OffsetSystem (const char* name, const OffsetSystem* pvalue);

EXTERN int asn1PrtToStrm_OffsetSystem (OSCTXT *pctxt, 
   const char* name, const OffsetSystem* pvalue);

EXTERN int asn1Init_OffsetSystem (OffsetSystem* pvalue);

EXTERN void asn1Free_OffsetSystem (OSCTXT *pctxt, OffsetSystem* pvalue);

/**************************************************************/
/*                                                            */
/*  Circle                                                    */
/*                                                            */
/**************************************************************/
/*
Circle ::= SEQUENCE {
   center [0] Position3D,
   radius [1] Radius-B12,
   units [2] DistanceUnits
}
*/
typedef struct EXTERN Circle {
   Position3D center;
   Radius_B12 radius;
   DistanceUnits units;
} Circle;

EXTERN int asn1PE_Circle (OSCTXT* pctxt, Circle* pvalue);

EXTERN int asn1PD_Circle (OSCTXT* pctxt, Circle* pvalue);

EXTERN void asn1Print_Circle (const char* name, const Circle* pvalue);

EXTERN int asn1PrtToStrm_Circle (OSCTXT *pctxt, 
   const char* name, const Circle* pvalue);

EXTERN int asn1Init_Circle (Circle* pvalue);

EXTERN void asn1Free_Circle (OSCTXT *pctxt, Circle* pvalue);

/**************************************************************/
/*                                                            */
/*  GeometricProjection_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeometricProjection'
*/
/* List of RegionalExtension */
typedef OSRTDList GeometricProjection_regional;

EXTERN int asn1PE_GeometricProjection_regional (OSCTXT* pctxt, GeometricProjection_regional* pvalue);

EXTERN int asn1PD_GeometricProjection_regional (OSCTXT* pctxt, GeometricProjection_regional* pvalue);

EXTERN void asn1Print_GeometricProjection_regional 
   (const char* name, const GeometricProjection_regional* pvalue);

EXTERN int asn1PrtToStrm_GeometricProjection_regional (OSCTXT *pctxt, 
   const char* name, const GeometricProjection_regional* pvalue);

EXTERN int asn1Init_GeometricProjection_regional (
   GeometricProjection_regional* pvalue);

EXTERN void asn1Free_GeometricProjection_regional (OSCTXT *pctxt, 
   GeometricProjection_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  GeometricProjection                                       */
/*                                                            */
/**************************************************************/
/*
GeometricProjection ::= SEQUENCE {
   direction [0] HeadingSlice,
                    -- field of view over which this applies,
   extent [1] Extent OPTIONAL,
                    -- the spatial distance over which this
                    -- message applies and should be presented
   laneWidth [2] LaneWidth OPTIONAL, -- used when a width is needed
   circle [3] Circle, -- A point and radius
   regional [4] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN GeometricProjection {
   struct {
      unsigned extentPresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   HeadingSlice direction;
   Extent extent;
   LaneWidth laneWidth;
   Circle circle;
   GeometricProjection_regional regional;
   OSRTDList extElem1;
} GeometricProjection;

EXTERN int asn1PE_GeometricProjection (OSCTXT* pctxt, GeometricProjection* pvalue);

EXTERN int asn1PD_GeometricProjection (OSCTXT* pctxt, GeometricProjection* pvalue);

EXTERN void asn1Print_GeometricProjection 
   (const char* name, const GeometricProjection* pvalue);

EXTERN int asn1PrtToStrm_GeometricProjection (OSCTXT *pctxt, 
   const char* name, const GeometricProjection* pvalue);

EXTERN int asn1Init_GeometricProjection (GeometricProjection* pvalue);

EXTERN void asn1Free_GeometricProjection (OSCTXT *pctxt, GeometricProjection* pvalue);

/**************************************************************/
/*                                                            */
/*  ShapePointSet                                             */
/*                                                            */
/**************************************************************/
/*
ShapePointSet ::= SEQUENCE {
   anchor [0] Position3D OPTIONAL,
   laneWidth [1] LaneWidth OPTIONAL,
   directionality [2] DirectionOfUse OPTIONAL,
   nodeList [3] NodeListXY, -- XY path details of the lane and width           
   ...
}
*/
typedef struct EXTERN ShapePointSet {
   struct {
      unsigned anchorPresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned directionalityPresent : 1;
   } m;
   Position3D anchor;
   LaneWidth laneWidth;
   DirectionOfUse directionality;
   NodeListXY nodeList;
   OSRTDList extElem1;
} ShapePointSet;

EXTERN int asn1PE_ShapePointSet (OSCTXT* pctxt, ShapePointSet* pvalue);

EXTERN int asn1PD_ShapePointSet (OSCTXT* pctxt, ShapePointSet* pvalue);

EXTERN void asn1Print_ShapePointSet (const char* name, const ShapePointSet* pvalue);

EXTERN int asn1PrtToStrm_ShapePointSet (OSCTXT *pctxt, 
   const char* name, const ShapePointSet* pvalue);

EXTERN int asn1Init_ShapePointSet (ShapePointSet* pvalue);

EXTERN void asn1Free_ShapePointSet (OSCTXT *pctxt, ShapePointSet* pvalue);

/**************************************************************/
/*                                                            */
/*  RegionOffsets                                             */
/*                                                            */
/**************************************************************/
/*
RegionOffsets ::= SEQUENCE {
   xOffset [0] OffsetLL-B16,
   yOffset [1] OffsetLL-B16,
   zOffset [2] OffsetLL-B16 OPTIONAL
            -- all in signed values where 
            -- the LSB is in units of 1 meter  
}
*/
typedef struct EXTERN RegionOffsets {
   struct {
      unsigned zOffsetPresent : 1;
   } m;
   OffsetLL_B16 xOffset;
   OffsetLL_B16 yOffset;
   OffsetLL_B16 zOffset;
} RegionOffsets;

EXTERN int asn1PE_RegionOffsets (OSCTXT* pctxt, RegionOffsets* pvalue);

EXTERN int asn1PD_RegionOffsets (OSCTXT* pctxt, RegionOffsets* pvalue);

EXTERN void asn1Print_RegionOffsets (const char* name, const RegionOffsets* pvalue);

EXTERN int asn1PrtToStrm_RegionOffsets (OSCTXT *pctxt, 
   const char* name, const RegionOffsets* pvalue);

EXTERN int asn1Init_RegionOffsets (RegionOffsets* pvalue);

/**************************************************************/
/*                                                            */
/*  RegionList                                                */
/*                                                            */
/**************************************************************/
/*
RegionList ::= SEQUENCE (SIZE (1..64)) OF RegionOffsets
    the Position3D ref point (starting point or anchor)
    is found in the outer object.

*/
/* List of RegionOffsets */
typedef OSRTDList RegionList;

EXTERN int asn1PE_RegionList (OSCTXT* pctxt, RegionList* pvalue);

EXTERN int asn1PD_RegionList (OSCTXT* pctxt, RegionList* pvalue);

EXTERN void asn1Print_RegionList (const char* name, const RegionList* pvalue);

EXTERN int asn1PrtToStrm_RegionList (OSCTXT *pctxt, 
   const char* name, const RegionList* pvalue);

EXTERN int asn1Init_RegionList (RegionList* pvalue);

EXTERN void asn1Free_RegionList (OSCTXT *pctxt, RegionList* pvalue);

/**************************************************************/
/*                                                            */
/*  RegionPointSet                                            */
/*                                                            */
/**************************************************************/
/*
RegionPointSet ::= SEQUENCE {
   anchor [0] Position3D OPTIONAL,
   scale [1] Zoom OPTIONAL,
   nodeList [2] RegionList,
                    -- path details of the regions outline        
   ...
}
*/
typedef struct EXTERN RegionPointSet {
   struct {
      unsigned anchorPresent : 1;
      unsigned scalePresent : 1;
   } m;
   Position3D anchor;
   Zoom scale;
   RegionList nodeList;
   OSRTDList extElem1;
} RegionPointSet;

EXTERN int asn1PE_RegionPointSet (OSCTXT* pctxt, RegionPointSet* pvalue);

EXTERN int asn1PD_RegionPointSet (OSCTXT* pctxt, RegionPointSet* pvalue);

EXTERN void asn1Print_RegionPointSet (const char* name, const RegionPointSet* pvalue);

EXTERN int asn1PrtToStrm_RegionPointSet (OSCTXT *pctxt, 
   const char* name, const RegionPointSet* pvalue);

EXTERN int asn1Init_RegionPointSet (RegionPointSet* pvalue);

EXTERN void asn1Free_RegionPointSet (OSCTXT *pctxt, RegionPointSet* pvalue);

/**************************************************************/
/*                                                            */
/*  ValidRegion_area                                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ValidRegion'
*/
/* Choice tag constants */

#define T_ValidRegion_area_shapePointSet 1
#define T_ValidRegion_area_circle       2
#define T_ValidRegion_area_regionPointSet 3

typedef struct EXTERN ValidRegion_area {
   OSINT32 t;
   union {
      /* t = 1 */
      ShapePointSet *shapePointSet;
      /* t = 2 */
      Circle *circle;
      /* t = 3 */
      RegionPointSet *regionPointSet;
   } u;
} ValidRegion_area;

EXTERN int asn1PE_ValidRegion_area (OSCTXT* pctxt, ValidRegion_area* pvalue);

EXTERN int asn1PD_ValidRegion_area (OSCTXT* pctxt, ValidRegion_area* pvalue);

EXTERN void asn1Print_ValidRegion_area 
   (const char* name, const ValidRegion_area* pvalue);

EXTERN int asn1PrtToStrm_ValidRegion_area (OSCTXT *pctxt, 
   const char* name, const ValidRegion_area* pvalue);

EXTERN int asn1Init_ValidRegion_area (ValidRegion_area* pvalue);

EXTERN void asn1Free_ValidRegion_area (OSCTXT *pctxt, ValidRegion_area* pvalue);

/**************************************************************/
/*                                                            */
/*  ValidRegion                                               */
/*                                                            */
/**************************************************************/
/*
ValidRegion ::= SEQUENCE {
   direction [0] HeadingSlice,
                     -- field of view over which this applies,
   extent [1] Extent OPTIONAL,
                     -- the spatial distance over which this
                     -- message applies and should be presented 
                     -- to the driver
   area [2] CHOICE {
      shapePointSet [0] ShapePointSet,
                     -- A short road segment
      circle [1] Circle,
                     -- A point and radius
      regionPointSet [2] RegionPointSet
                     -- Wide area enclosed regions
   }
}
*/
typedef struct EXTERN ValidRegion {
   struct {
      unsigned extentPresent : 1;
   } m;
   HeadingSlice direction;
   Extent extent;
   ValidRegion_area area;
} ValidRegion;

EXTERN int asn1PE_ValidRegion (OSCTXT* pctxt, ValidRegion* pvalue);

EXTERN int asn1PD_ValidRegion (OSCTXT* pctxt, ValidRegion* pvalue);

EXTERN void asn1Print_ValidRegion (const char* name, const ValidRegion* pvalue);

EXTERN int asn1PrtToStrm_ValidRegion (OSCTXT *pctxt, 
   const char* name, const ValidRegion* pvalue);

EXTERN int asn1Init_ValidRegion (ValidRegion* pvalue);

EXTERN void asn1Free_ValidRegion (OSCTXT *pctxt, ValidRegion* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath_description                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeographicalPath'
*/
/* Choice tag constants */

#define T_GeographicalPath_description_path 1
#define T_GeographicalPath_description_geometry 2
#define T_GeographicalPath_description_oldRegion 3
#define T_GeographicalPath_description_extElem1 4

typedef struct EXTERN GeographicalPath_description {
   OSINT32 t;
   union {
      /* t = 1 */
      OffsetSystem *path;
      /* t = 2 */
      GeometricProjection *geometry;
      /* t = 3 */
      ValidRegion *oldRegion;
      /* t = 4 */
      ASN1OpenType *extElem1;
   } u;
} GeographicalPath_description;

EXTERN int asn1PE_GeographicalPath_description (OSCTXT* pctxt, GeographicalPath_description* pvalue);

EXTERN int asn1PD_GeographicalPath_description (OSCTXT* pctxt, GeographicalPath_description* pvalue);

EXTERN void asn1Print_GeographicalPath_description 
   (const char* name, const GeographicalPath_description* pvalue);

EXTERN int asn1PrtToStrm_GeographicalPath_description (OSCTXT *pctxt, 
   const char* name, const GeographicalPath_description* pvalue);

EXTERN int asn1Init_GeographicalPath_description (
   GeographicalPath_description* pvalue);

EXTERN void asn1Free_GeographicalPath_description (OSCTXT *pctxt, 
   GeographicalPath_description* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath_regional                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeographicalPath'
*/
/* List of RegionalExtension */
typedef OSRTDList GeographicalPath_regional;

EXTERN int asn1PE_GeographicalPath_regional (OSCTXT* pctxt, GeographicalPath_regional* pvalue);

EXTERN int asn1PD_GeographicalPath_regional (OSCTXT* pctxt, GeographicalPath_regional* pvalue);

EXTERN void asn1Print_GeographicalPath_regional 
   (const char* name, const GeographicalPath_regional* pvalue);

EXTERN int asn1PrtToStrm_GeographicalPath_regional (OSCTXT *pctxt, 
   const char* name, const GeographicalPath_regional* pvalue);

EXTERN int asn1Init_GeographicalPath_regional (GeographicalPath_regional* pvalue);

EXTERN void asn1Free_GeographicalPath_regional (OSCTXT *pctxt, 
   GeographicalPath_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath                                          */
/*                                                            */
/**************************************************************/
/*
GeographicalPath ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
   id [1] RoadSegmentReferenceID OPTIONAL,
   anchor [2] Position3D OPTIONAL,
   laneWidth [3] LaneWidth OPTIONAL,
   directionality [4] DirectionOfUse OPTIONAL,
   closedPath [5] BOOLEAN OPTIONAL,
                    -- when true, last point closes to first
   direction [6] HeadingSlice OPTIONAL,
                    -- field of view over which this applies
   description [7] CHOICE {
      path [0] OffsetSystem,
                   -- The XYZ and LLH system of paths
      geometry [1] GeometricProjection,
                   -- A projected circle from a point
      oldRegion [2] ValidRegion,
            -- Legacy method, no longer recommended for use
      ...
   } OPTIONAL,
   regional [8] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN GeographicalPath {
   struct {
      unsigned namePresent : 1;
      unsigned idPresent : 1;
      unsigned anchorPresent : 1;
      unsigned laneWidthPresent : 1;
      unsigned directionalityPresent : 1;
      unsigned closedPathPresent : 1;
      unsigned directionPresent : 1;
      unsigned descriptionPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   DescriptiveName name;
   RoadSegmentReferenceID id;
   Position3D anchor;
   LaneWidth laneWidth;
   DirectionOfUse directionality;
   OSBOOL closedPath;
   HeadingSlice direction;
   GeographicalPath_description description;
   GeographicalPath_regional regional;
   OSRTDList extElem1;
} GeographicalPath;

EXTERN int asn1PE_GeographicalPath (OSCTXT* pctxt, GeographicalPath* pvalue);

EXTERN int asn1PD_GeographicalPath (OSCTXT* pctxt, GeographicalPath* pvalue);

EXTERN void asn1Print_GeographicalPath 
   (const char* name, const GeographicalPath* pvalue);

EXTERN int asn1PrtToStrm_GeographicalPath (OSCTXT *pctxt, 
   const char* name, const GeographicalPath* pvalue);

EXTERN int asn1Init_GeographicalPath (GeographicalPath* pvalue);

EXTERN void asn1Free_GeographicalPath (OSCTXT *pctxt, GeographicalPath* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame_regions                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerDataFrame'
*/
/* List of GeographicalPath */
typedef OSRTDList TravelerDataFrame_regions;

EXTERN int asn1PE_TravelerDataFrame_regions (OSCTXT* pctxt, TravelerDataFrame_regions* pvalue);

EXTERN int asn1PD_TravelerDataFrame_regions (OSCTXT* pctxt, TravelerDataFrame_regions* pvalue);

EXTERN void asn1Print_TravelerDataFrame_regions 
   (const char* name, const TravelerDataFrame_regions* pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrame_regions (OSCTXT *pctxt, 
   const char* name, const TravelerDataFrame_regions* pvalue);

EXTERN int asn1Init_TravelerDataFrame_regions (TravelerDataFrame_regions* pvalue);

EXTERN void asn1Free_TravelerDataFrame_regions (OSCTXT *pctxt, 
   TravelerDataFrame_regions* pvalue);

/**************************************************************/
/*                                                            */
/*  WorkZone_element_item                                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'WorkZone'
*/
/* Choice tag constants */

#define T_WorkZone_element_item_itis    1
#define T_WorkZone_element_item_text    2

typedef struct EXTERN WorkZone_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ITIScodes itis;
      /* t = 2 */
      ITIStextPhrase text;
   } u;
} WorkZone_element_item;

EXTERN int asn1PE_WorkZone_element_item (OSCTXT* pctxt, WorkZone_element_item* pvalue);

EXTERN int asn1PD_WorkZone_element_item (OSCTXT* pctxt, WorkZone_element_item* pvalue);

EXTERN void asn1Print_WorkZone_element_item 
   (const char* name, const WorkZone_element_item* pvalue);

EXTERN int asn1PrtToStrm_WorkZone_element_item (OSCTXT *pctxt, 
   const char* name, const WorkZone_element_item* pvalue);

EXTERN int asn1Init_WorkZone_element_item (WorkZone_element_item* pvalue);

EXTERN void asn1Free_WorkZone_element_item (OSCTXT *pctxt, 
   WorkZone_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  WorkZone_element                                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'WorkZone'
*/
typedef struct EXTERN WorkZone_element {
   WorkZone_element_item item;
} WorkZone_element;

EXTERN int asn1PE_WorkZone_element (OSCTXT* pctxt, WorkZone_element* pvalue);

EXTERN int asn1PD_WorkZone_element (OSCTXT* pctxt, WorkZone_element* pvalue);

EXTERN void asn1Print_WorkZone_element 
   (const char* name, const WorkZone_element* pvalue);

EXTERN int asn1PrtToStrm_WorkZone_element (OSCTXT *pctxt, 
   const char* name, const WorkZone_element* pvalue);

EXTERN int asn1Init_WorkZone_element (WorkZone_element* pvalue);

EXTERN void asn1Free_WorkZone_element (OSCTXT *pctxt, WorkZone_element* pvalue);

/**************************************************************/
/*                                                            */
/*  WorkZone                                                  */
/*                                                            */
/**************************************************************/
/*
WorkZone ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of WorkZone_element */
typedef OSRTDList WorkZone;

EXTERN int asn1PE_WorkZone (OSCTXT* pctxt, WorkZone* pvalue);

EXTERN int asn1PD_WorkZone (OSCTXT* pctxt, WorkZone* pvalue);

EXTERN void asn1Print_WorkZone (const char* name, const WorkZone* pvalue);

EXTERN int asn1PrtToStrm_WorkZone (OSCTXT *pctxt, 
   const char* name, const WorkZone* pvalue);

EXTERN int asn1Init_WorkZone (WorkZone* pvalue);

EXTERN void asn1Free_WorkZone (OSCTXT *pctxt, WorkZone* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericSignage_element_item                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericSignage'
*/
/* Choice tag constants */

#define T_GenericSignage_element_item_itis 1
#define T_GenericSignage_element_item_text 2

typedef struct EXTERN GenericSignage_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ITIScodes itis;
      /* t = 2 */
      ITIStextPhrase text;
   } u;
} GenericSignage_element_item;

EXTERN int asn1PE_GenericSignage_element_item (OSCTXT* pctxt, GenericSignage_element_item* pvalue);

EXTERN int asn1PD_GenericSignage_element_item (OSCTXT* pctxt, GenericSignage_element_item* pvalue);

EXTERN void asn1Print_GenericSignage_element_item 
   (const char* name, const GenericSignage_element_item* pvalue);

EXTERN int asn1PrtToStrm_GenericSignage_element_item (OSCTXT *pctxt, 
   const char* name, const GenericSignage_element_item* pvalue);

EXTERN int asn1Init_GenericSignage_element_item (GenericSignage_element_item* pvalue);

EXTERN void asn1Free_GenericSignage_element_item (OSCTXT *pctxt, 
   GenericSignage_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericSignage_element                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericSignage'
*/
typedef struct EXTERN GenericSignage_element {
   GenericSignage_element_item item;
} GenericSignage_element;

EXTERN int asn1PE_GenericSignage_element (OSCTXT* pctxt, GenericSignage_element* pvalue);

EXTERN int asn1PD_GenericSignage_element (OSCTXT* pctxt, GenericSignage_element* pvalue);

EXTERN void asn1Print_GenericSignage_element 
   (const char* name, const GenericSignage_element* pvalue);

EXTERN int asn1PrtToStrm_GenericSignage_element (OSCTXT *pctxt, 
   const char* name, const GenericSignage_element* pvalue);

EXTERN int asn1Init_GenericSignage_element (GenericSignage_element* pvalue);

EXTERN void asn1Free_GenericSignage_element (OSCTXT *pctxt, 
   GenericSignage_element* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericSignage                                            */
/*                                                            */
/**************************************************************/
/*
GenericSignage ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of GenericSignage_element */
typedef OSRTDList GenericSignage;

EXTERN int asn1PE_GenericSignage (OSCTXT* pctxt, GenericSignage* pvalue);

EXTERN int asn1PD_GenericSignage (OSCTXT* pctxt, GenericSignage* pvalue);

EXTERN void asn1Print_GenericSignage (const char* name, const GenericSignage* pvalue);

EXTERN int asn1PrtToStrm_GenericSignage (OSCTXT *pctxt, 
   const char* name, const GenericSignage* pvalue);

EXTERN int asn1Init_GenericSignage (GenericSignage* pvalue);

EXTERN void asn1Free_GenericSignage (OSCTXT *pctxt, GenericSignage* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimit_element_item                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SpeedLimit'
*/
/* Choice tag constants */

#define T_SpeedLimit_element_item_itis  1
#define T_SpeedLimit_element_item_text  2

typedef struct EXTERN SpeedLimit_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ITIScodes itis;
      /* t = 2 */
      ITIStextPhrase text;
   } u;
} SpeedLimit_element_item;

EXTERN int asn1PE_SpeedLimit_element_item (OSCTXT* pctxt, SpeedLimit_element_item* pvalue);

EXTERN int asn1PD_SpeedLimit_element_item (OSCTXT* pctxt, SpeedLimit_element_item* pvalue);

EXTERN void asn1Print_SpeedLimit_element_item 
   (const char* name, const SpeedLimit_element_item* pvalue);

EXTERN int asn1PrtToStrm_SpeedLimit_element_item (OSCTXT *pctxt, 
   const char* name, const SpeedLimit_element_item* pvalue);

EXTERN int asn1Init_SpeedLimit_element_item (SpeedLimit_element_item* pvalue);

EXTERN void asn1Free_SpeedLimit_element_item (OSCTXT *pctxt, 
   SpeedLimit_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimit_element                                        */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SpeedLimit'
*/
typedef struct EXTERN SpeedLimit_element {
   SpeedLimit_element_item item;
} SpeedLimit_element;

EXTERN int asn1PE_SpeedLimit_element (OSCTXT* pctxt, SpeedLimit_element* pvalue);

EXTERN int asn1PD_SpeedLimit_element (OSCTXT* pctxt, SpeedLimit_element* pvalue);

EXTERN void asn1Print_SpeedLimit_element 
   (const char* name, const SpeedLimit_element* pvalue);

EXTERN int asn1PrtToStrm_SpeedLimit_element (OSCTXT *pctxt, 
   const char* name, const SpeedLimit_element* pvalue);

EXTERN int asn1Init_SpeedLimit_element (SpeedLimit_element* pvalue);

EXTERN void asn1Free_SpeedLimit_element (OSCTXT *pctxt, SpeedLimit_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimit                                                */
/*                                                            */
/**************************************************************/
/*
SpeedLimit ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of SpeedLimit_element */
typedef OSRTDList SpeedLimit;

EXTERN int asn1PE_SpeedLimit (OSCTXT* pctxt, SpeedLimit* pvalue);

EXTERN int asn1PD_SpeedLimit (OSCTXT* pctxt, SpeedLimit* pvalue);

EXTERN void asn1Print_SpeedLimit (const char* name, const SpeedLimit* pvalue);

EXTERN int asn1PrtToStrm_SpeedLimit (OSCTXT *pctxt, 
   const char* name, const SpeedLimit* pvalue);

EXTERN int asn1Init_SpeedLimit (SpeedLimit* pvalue);

EXTERN void asn1Free_SpeedLimit (OSCTXT *pctxt, SpeedLimit* pvalue);

/**************************************************************/
/*                                                            */
/*  ExitService_element_item                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ExitService'
*/
/* Choice tag constants */

#define T_ExitService_element_item_itis 1
#define T_ExitService_element_item_text 2

typedef struct EXTERN ExitService_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ITIScodes itis;
      /* t = 2 */
      ITIStextPhrase text;
   } u;
} ExitService_element_item;

EXTERN int asn1PE_ExitService_element_item (OSCTXT* pctxt, ExitService_element_item* pvalue);

EXTERN int asn1PD_ExitService_element_item (OSCTXT* pctxt, ExitService_element_item* pvalue);

EXTERN void asn1Print_ExitService_element_item 
   (const char* name, const ExitService_element_item* pvalue);

EXTERN int asn1PrtToStrm_ExitService_element_item (OSCTXT *pctxt, 
   const char* name, const ExitService_element_item* pvalue);

EXTERN int asn1Init_ExitService_element_item (ExitService_element_item* pvalue);

EXTERN void asn1Free_ExitService_element_item (OSCTXT *pctxt, 
   ExitService_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  ExitService_element                                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ExitService'
*/
typedef struct EXTERN ExitService_element {
   ExitService_element_item item;
} ExitService_element;

EXTERN int asn1PE_ExitService_element (OSCTXT* pctxt, ExitService_element* pvalue);

EXTERN int asn1PD_ExitService_element (OSCTXT* pctxt, ExitService_element* pvalue);

EXTERN void asn1Print_ExitService_element 
   (const char* name, const ExitService_element* pvalue);

EXTERN int asn1PrtToStrm_ExitService_element (OSCTXT *pctxt, 
   const char* name, const ExitService_element* pvalue);

EXTERN int asn1Init_ExitService_element (ExitService_element* pvalue);

EXTERN void asn1Free_ExitService_element (OSCTXT *pctxt, ExitService_element* pvalue);

/**************************************************************/
/*                                                            */
/*  ExitService                                               */
/*                                                            */
/**************************************************************/
/*
ExitService ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of ExitService_element */
typedef OSRTDList ExitService;

EXTERN int asn1PE_ExitService (OSCTXT* pctxt, ExitService* pvalue);

EXTERN int asn1PD_ExitService (OSCTXT* pctxt, ExitService* pvalue);

EXTERN void asn1Print_ExitService (const char* name, const ExitService* pvalue);

EXTERN int asn1PrtToStrm_ExitService (OSCTXT *pctxt, 
   const char* name, const ExitService* pvalue);

EXTERN int asn1Init_ExitService (ExitService* pvalue);

EXTERN void asn1Free_ExitService (OSCTXT *pctxt, ExitService* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame_content                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerDataFrame'
*/
/* Choice tag constants */

#define T_TravelerDataFrame_content_advisory 1
#define T_TravelerDataFrame_content_workZone 2
#define T_TravelerDataFrame_content_genericSign 3
#define T_TravelerDataFrame_content_speedLimit 4
#define T_TravelerDataFrame_content_exitService 5

typedef struct EXTERN TravelerDataFrame_content {
   OSINT32 t;
   union {
      /* t = 1 */
      ITIScodesAndText *advisory;
      /* t = 2 */
      WorkZone *workZone;
      /* t = 3 */
      GenericSignage *genericSign;
      /* t = 4 */
      SpeedLimit *speedLimit;
      /* t = 5 */
      ExitService *exitService;
   } u;
} TravelerDataFrame_content;

EXTERN int asn1PE_TravelerDataFrame_content (OSCTXT* pctxt, TravelerDataFrame_content* pvalue);

EXTERN int asn1PD_TravelerDataFrame_content (OSCTXT* pctxt, TravelerDataFrame_content* pvalue);

EXTERN void asn1Print_TravelerDataFrame_content 
   (const char* name, const TravelerDataFrame_content* pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrame_content (OSCTXT *pctxt, 
   const char* name, const TravelerDataFrame_content* pvalue);

EXTERN int asn1Init_TravelerDataFrame_content (TravelerDataFrame_content* pvalue);

EXTERN void asn1Free_TravelerDataFrame_content (OSCTXT *pctxt, 
   TravelerDataFrame_content* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame                                         */
/*                                                            */
/**************************************************************/
/*
TravelerDataFrame ::= SEQUENCE {
   -- Part I, Frame header
   sspTimRights [0] SSPindex,
   frameType [1] TravelerInfoType, -- (enum, advisory or road sign)
   msgId [2] CHOICE {
      furtherInfoID [0] FurtherInfoID, -- links to ATIS msg
      roadSignID [1] RoadSignID -- an ID to other data
   },
   startYear [3] DYear OPTIONAL, -- only if needed
   startTime [4] MinuteOfTheYear,
   duratonTime [5] MinutesDuration,
   priority [6] SignPrority,
   -- Part II, Applicable Regions of Use
   sspLocationRights [7] SSPindex,
   regions [8] SEQUENCE (SIZE (1..16)) OF GeographicalPath,
   -- Part III, Content
   sspMsgRights1 [9] SSPindex, -- allowed message types
   sspMsgRights2 [10] SSPindex, -- allowed message content
   content [11] CHOICE {
      advisory [0] ITIScodesAndText,
                               -- typical ITIS warnings
      workZone [1] WorkZone,
                               -- work zone signs and directions
      genericSign [2] GenericSignage,
                               -- MUTCD signs and directions
      speedLimit [3] SpeedLimit,
                               -- speed limits and cautions
      exitService [4] ExitService
                               -- roadside avaiable services
   },
   url [12] URL-Short OPTIONAL, -- May link to image or other content
   ...
}
*/
typedef struct EXTERN TravelerDataFrame {
   struct {
      unsigned startYearPresent : 1;
      unsigned urlPresent : 1;
   } m;
   SSPindex sspTimRights;
   TravelerInfoType frameType;
   TravelerDataFrame_msgId msgId;
   DYear startYear;
   MinuteOfTheYear startTime;
   MinutesDuration duratonTime;
   SignPrority priority;
   SSPindex sspLocationRights;
   TravelerDataFrame_regions regions;
   SSPindex sspMsgRights1;
   SSPindex sspMsgRights2;
   TravelerDataFrame_content content;
   URL_Short url;
   OSRTDList extElem1;
} TravelerDataFrame;

EXTERN int asn1PE_TravelerDataFrame (OSCTXT* pctxt, TravelerDataFrame* pvalue);

EXTERN int asn1PD_TravelerDataFrame (OSCTXT* pctxt, TravelerDataFrame* pvalue);

EXTERN void asn1Print_TravelerDataFrame 
   (const char* name, const TravelerDataFrame* pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrame (OSCTXT *pctxt, 
   const char* name, const TravelerDataFrame* pvalue);

EXTERN int asn1Init_TravelerDataFrame (TravelerDataFrame* pvalue);

EXTERN void asn1Free_TravelerDataFrame (OSCTXT *pctxt, TravelerDataFrame* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrameList                                     */
/*                                                            */
/**************************************************************/
/*
TravelerDataFrameList ::= SEQUENCE (SIZE (1..8)) OF TravelerDataFrame
*/
/* List of TravelerDataFrame */
typedef OSRTDList TravelerDataFrameList;

EXTERN int asn1PE_TravelerDataFrameList (OSCTXT* pctxt, TravelerDataFrameList* pvalue);

EXTERN int asn1PD_TravelerDataFrameList (OSCTXT* pctxt, TravelerDataFrameList* pvalue);

EXTERN void asn1Print_TravelerDataFrameList 
   (const char* name, const TravelerDataFrameList* pvalue);

EXTERN int asn1PrtToStrm_TravelerDataFrameList (OSCTXT *pctxt, 
   const char* name, const TravelerDataFrameList* pvalue);

EXTERN int asn1Init_TravelerDataFrameList (TravelerDataFrameList* pvalue);

EXTERN void asn1Free_TravelerDataFrameList (OSCTXT *pctxt, 
   TravelerDataFrameList* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInformation_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerInformation'
*/
/* List of RegionalExtension */
typedef OSRTDList TravelerInformation_regional;

EXTERN int asn1PE_TravelerInformation_regional (OSCTXT* pctxt, TravelerInformation_regional* pvalue);

EXTERN int asn1PD_TravelerInformation_regional (OSCTXT* pctxt, TravelerInformation_regional* pvalue);

EXTERN void asn1Print_TravelerInformation_regional 
   (const char* name, const TravelerInformation_regional* pvalue);

EXTERN int asn1PrtToStrm_TravelerInformation_regional (OSCTXT *pctxt, 
   const char* name, const TravelerInformation_regional* pvalue);

EXTERN int asn1Init_TravelerInformation_regional (
   TravelerInformation_regional* pvalue);

EXTERN void asn1Free_TravelerInformation_regional (OSCTXT *pctxt, 
   TravelerInformation_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInformation                                       */
/*                                                            */
/**************************************************************/
/*
TravelerInformation ::= SEQUENCE {
   msgCnt [0] MsgCount,
   timeStamp [1] MinuteOfTheYear OPTIONAL,
   packetID [2] UniqueMSGID OPTIONAL,
   urlB [3] URL-Base OPTIONAL,
   -- A set of one or more self contained 
   -- traveler information messages (frames)
   dataFrames [4] TravelerDataFrameList,
   regional [5] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TravelerInformation {
   struct {
      unsigned timeStampPresent : 1;
      unsigned packetIDPresent : 1;
      unsigned urlBPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   MsgCount msgCnt;
   MinuteOfTheYear timeStamp;
   UniqueMSGID packetID;
   URL_Base urlB;
   TravelerDataFrameList dataFrames;
   TravelerInformation_regional regional;
   OSRTDList extElem1;
} TravelerInformation;

EXTERN int asn1PE_TravelerInformation (OSCTXT* pctxt, TravelerInformation* pvalue);

EXTERN int asn1PD_TravelerInformation (OSCTXT* pctxt, TravelerInformation* pvalue);

EXTERN void asn1Print_TravelerInformation 
   (const char* name, const TravelerInformation* pvalue);

EXTERN int asn1PrtToStrm_TravelerInformation (OSCTXT *pctxt, 
   const char* name, const TravelerInformation* pvalue);

EXTERN int asn1Init_TravelerInformation (TravelerInformation* pvalue);

EXTERN void asn1Free_TravelerInformation (OSCTXT *pctxt, TravelerInformation* pvalue);

/**************************************************************/
/*                                                            */
/*  Header                                                    */
/*                                                            */
/**************************************************************/
/*
Header ::= SEQUENCE {
   -- Basic time and sequence values for the message
   year [0] DYear OPTIONAL,
   timeStamp [1] MinuteOfTheYear OPTIONAL,
   secMark [2] DSecond OPTIONAL,
   msgIssueRevision [3] MsgCount OPTIONAL,
   ...
}
*/
typedef struct EXTERN Header {
   struct {
      unsigned yearPresent : 1;
      unsigned timeStampPresent : 1;
      unsigned secMarkPresent : 1;
      unsigned msgIssueRevisionPresent : 1;
   } m;
   DYear year;
   MinuteOfTheYear timeStamp;
   DSecond secMark;
   MsgCount msgIssueRevision;
   OSRTDList extElem1;
} Header;

EXTERN int asn1PE_Header (OSCTXT* pctxt, Header* pvalue);

EXTERN int asn1PD_Header (OSCTXT* pctxt, Header* pvalue);

EXTERN void asn1Print_Header (const char* name, const Header* pvalue);

EXTERN int asn1PrtToStrm_Header (OSCTXT *pctxt, 
   const char* name, const Header* pvalue);

EXTERN int asn1Init_Header (Header* pvalue);

EXTERN void asn1Free_Header (OSCTXT *pctxt, Header* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage00                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage00 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   -- All content is added in below data frame
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage00 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage00;

EXTERN int asn1PE_TestMessage00 (OSCTXT* pctxt, TestMessage00* pvalue);

EXTERN int asn1PD_TestMessage00 (OSCTXT* pctxt, TestMessage00* pvalue);

EXTERN void asn1Print_TestMessage00 (const char* name, const TestMessage00* pvalue);

EXTERN int asn1PrtToStrm_TestMessage00 (OSCTXT *pctxt, 
   const char* name, const TestMessage00* pvalue);

EXTERN int asn1Init_TestMessage00 (TestMessage00* pvalue);

EXTERN void asn1Free_TestMessage00 (OSCTXT *pctxt, TestMessage00* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage01                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage01 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage01 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage01;

EXTERN int asn1PE_TestMessage01 (OSCTXT* pctxt, TestMessage01* pvalue);

EXTERN int asn1PD_TestMessage01 (OSCTXT* pctxt, TestMessage01* pvalue);

EXTERN void asn1Print_TestMessage01 (const char* name, const TestMessage01* pvalue);

EXTERN int asn1PrtToStrm_TestMessage01 (OSCTXT *pctxt, 
   const char* name, const TestMessage01* pvalue);

EXTERN int asn1Init_TestMessage01 (TestMessage01* pvalue);

EXTERN void asn1Free_TestMessage01 (OSCTXT *pctxt, TestMessage01* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage02                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage02 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage02 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage02;

EXTERN int asn1PE_TestMessage02 (OSCTXT* pctxt, TestMessage02* pvalue);

EXTERN int asn1PD_TestMessage02 (OSCTXT* pctxt, TestMessage02* pvalue);

EXTERN void asn1Print_TestMessage02 (const char* name, const TestMessage02* pvalue);

EXTERN int asn1PrtToStrm_TestMessage02 (OSCTXT *pctxt, 
   const char* name, const TestMessage02* pvalue);

EXTERN int asn1Init_TestMessage02 (TestMessage02* pvalue);

EXTERN void asn1Free_TestMessage02 (OSCTXT *pctxt, TestMessage02* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage03                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage03 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage03 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage03;

EXTERN int asn1PE_TestMessage03 (OSCTXT* pctxt, TestMessage03* pvalue);

EXTERN int asn1PD_TestMessage03 (OSCTXT* pctxt, TestMessage03* pvalue);

EXTERN void asn1Print_TestMessage03 (const char* name, const TestMessage03* pvalue);

EXTERN int asn1PrtToStrm_TestMessage03 (OSCTXT *pctxt, 
   const char* name, const TestMessage03* pvalue);

EXTERN int asn1Init_TestMessage03 (TestMessage03* pvalue);

EXTERN void asn1Free_TestMessage03 (OSCTXT *pctxt, TestMessage03* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage04                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage04 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage04 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage04;

EXTERN int asn1PE_TestMessage04 (OSCTXT* pctxt, TestMessage04* pvalue);

EXTERN int asn1PD_TestMessage04 (OSCTXT* pctxt, TestMessage04* pvalue);

EXTERN void asn1Print_TestMessage04 (const char* name, const TestMessage04* pvalue);

EXTERN int asn1PrtToStrm_TestMessage04 (OSCTXT *pctxt, 
   const char* name, const TestMessage04* pvalue);

EXTERN int asn1Init_TestMessage04 (TestMessage04* pvalue);

EXTERN void asn1Free_TestMessage04 (OSCTXT *pctxt, TestMessage04* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage05                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage05 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage05 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage05;

EXTERN int asn1PE_TestMessage05 (OSCTXT* pctxt, TestMessage05* pvalue);

EXTERN int asn1PD_TestMessage05 (OSCTXT* pctxt, TestMessage05* pvalue);

EXTERN void asn1Print_TestMessage05 (const char* name, const TestMessage05* pvalue);

EXTERN int asn1PrtToStrm_TestMessage05 (OSCTXT *pctxt, 
   const char* name, const TestMessage05* pvalue);

EXTERN int asn1Init_TestMessage05 (TestMessage05* pvalue);

EXTERN void asn1Free_TestMessage05 (OSCTXT *pctxt, TestMessage05* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage06                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage06 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage06 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage06;

EXTERN int asn1PE_TestMessage06 (OSCTXT* pctxt, TestMessage06* pvalue);

EXTERN int asn1PD_TestMessage06 (OSCTXT* pctxt, TestMessage06* pvalue);

EXTERN void asn1Print_TestMessage06 (const char* name, const TestMessage06* pvalue);

EXTERN int asn1PrtToStrm_TestMessage06 (OSCTXT *pctxt, 
   const char* name, const TestMessage06* pvalue);

EXTERN int asn1Init_TestMessage06 (TestMessage06* pvalue);

EXTERN void asn1Free_TestMessage06 (OSCTXT *pctxt, TestMessage06* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage07                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage07 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage07 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage07;

EXTERN int asn1PE_TestMessage07 (OSCTXT* pctxt, TestMessage07* pvalue);

EXTERN int asn1PD_TestMessage07 (OSCTXT* pctxt, TestMessage07* pvalue);

EXTERN void asn1Print_TestMessage07 (const char* name, const TestMessage07* pvalue);

EXTERN int asn1PrtToStrm_TestMessage07 (OSCTXT *pctxt, 
   const char* name, const TestMessage07* pvalue);

EXTERN int asn1Init_TestMessage07 (TestMessage07* pvalue);

EXTERN void asn1Free_TestMessage07 (OSCTXT *pctxt, TestMessage07* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage08                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage08 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage08 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage08;

EXTERN int asn1PE_TestMessage08 (OSCTXT* pctxt, TestMessage08* pvalue);

EXTERN int asn1PD_TestMessage08 (OSCTXT* pctxt, TestMessage08* pvalue);

EXTERN void asn1Print_TestMessage08 (const char* name, const TestMessage08* pvalue);

EXTERN int asn1PrtToStrm_TestMessage08 (OSCTXT *pctxt, 
   const char* name, const TestMessage08* pvalue);

EXTERN int asn1Init_TestMessage08 (TestMessage08* pvalue);

EXTERN void asn1Free_TestMessage08 (OSCTXT *pctxt, TestMessage08* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage09                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage09 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage09 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage09;

EXTERN int asn1PE_TestMessage09 (OSCTXT* pctxt, TestMessage09* pvalue);

EXTERN int asn1PD_TestMessage09 (OSCTXT* pctxt, TestMessage09* pvalue);

EXTERN void asn1Print_TestMessage09 (const char* name, const TestMessage09* pvalue);

EXTERN int asn1PrtToStrm_TestMessage09 (OSCTXT *pctxt, 
   const char* name, const TestMessage09* pvalue);

EXTERN int asn1Init_TestMessage09 (TestMessage09* pvalue);

EXTERN void asn1Free_TestMessage09 (OSCTXT *pctxt, TestMessage09* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage10                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage10 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage10 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage10;

EXTERN int asn1PE_TestMessage10 (OSCTXT* pctxt, TestMessage10* pvalue);

EXTERN int asn1PD_TestMessage10 (OSCTXT* pctxt, TestMessage10* pvalue);

EXTERN void asn1Print_TestMessage10 (const char* name, const TestMessage10* pvalue);

EXTERN int asn1PrtToStrm_TestMessage10 (OSCTXT *pctxt, 
   const char* name, const TestMessage10* pvalue);

EXTERN int asn1Init_TestMessage10 (TestMessage10* pvalue);

EXTERN void asn1Free_TestMessage10 (OSCTXT *pctxt, TestMessage10* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage11                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage11 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage11 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage11;

EXTERN int asn1PE_TestMessage11 (OSCTXT* pctxt, TestMessage11* pvalue);

EXTERN int asn1PD_TestMessage11 (OSCTXT* pctxt, TestMessage11* pvalue);

EXTERN void asn1Print_TestMessage11 (const char* name, const TestMessage11* pvalue);

EXTERN int asn1PrtToStrm_TestMessage11 (OSCTXT *pctxt, 
   const char* name, const TestMessage11* pvalue);

EXTERN int asn1Init_TestMessage11 (TestMessage11* pvalue);

EXTERN void asn1Free_TestMessage11 (OSCTXT *pctxt, TestMessage11* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage12                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage12 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage12 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage12;

EXTERN int asn1PE_TestMessage12 (OSCTXT* pctxt, TestMessage12* pvalue);

EXTERN int asn1PD_TestMessage12 (OSCTXT* pctxt, TestMessage12* pvalue);

EXTERN void asn1Print_TestMessage12 (const char* name, const TestMessage12* pvalue);

EXTERN int asn1PrtToStrm_TestMessage12 (OSCTXT *pctxt, 
   const char* name, const TestMessage12* pvalue);

EXTERN int asn1Init_TestMessage12 (TestMessage12* pvalue);

EXTERN void asn1Free_TestMessage12 (OSCTXT *pctxt, TestMessage12* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage13                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage13 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage13 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage13;

EXTERN int asn1PE_TestMessage13 (OSCTXT* pctxt, TestMessage13* pvalue);

EXTERN int asn1PD_TestMessage13 (OSCTXT* pctxt, TestMessage13* pvalue);

EXTERN void asn1Print_TestMessage13 (const char* name, const TestMessage13* pvalue);

EXTERN int asn1PrtToStrm_TestMessage13 (OSCTXT *pctxt, 
   const char* name, const TestMessage13* pvalue);

EXTERN int asn1Init_TestMessage13 (TestMessage13* pvalue);

EXTERN void asn1Free_TestMessage13 (OSCTXT *pctxt, TestMessage13* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage14                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage14 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage14 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage14;

EXTERN int asn1PE_TestMessage14 (OSCTXT* pctxt, TestMessage14* pvalue);

EXTERN int asn1PD_TestMessage14 (OSCTXT* pctxt, TestMessage14* pvalue);

EXTERN void asn1Print_TestMessage14 (const char* name, const TestMessage14* pvalue);

EXTERN int asn1PrtToStrm_TestMessage14 (OSCTXT *pctxt, 
   const char* name, const TestMessage14* pvalue);

EXTERN int asn1Init_TestMessage14 (TestMessage14* pvalue);

EXTERN void asn1Free_TestMessage14 (OSCTXT *pctxt, TestMessage14* pvalue);

/**************************************************************/
/*                                                            */
/*  TestMessage15                                             */
/*                                                            */
/**************************************************************/
/*
TestMessage15 ::= SEQUENCE {
   header [0] Header OPTIONAL,
   regional [1] RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TestMessage15 {
   struct {
      unsigned headerPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   Header header;
   RegionalExtension regional;
   OSRTDList extElem1;
} TestMessage15;

EXTERN int asn1PE_TestMessage15 (OSCTXT* pctxt, TestMessage15* pvalue);

EXTERN int asn1PD_TestMessage15 (OSCTXT* pctxt, TestMessage15* pvalue);

EXTERN void asn1Print_TestMessage15 (const char* name, const TestMessage15* pvalue);

EXTERN int asn1PrtToStrm_TestMessage15 (OSCTXT *pctxt, 
   const char* name, const TestMessage15* pvalue);

EXTERN int asn1Init_TestMessage15 (TestMessage15* pvalue);

EXTERN void asn1Free_TestMessage15 (OSCTXT *pctxt, TestMessage15* pvalue);

/**************************************************************/
/*                                                            */
/*  DDate                                                     */
/*                                                            */
/**************************************************************/
/*
DDate ::= SEQUENCE {
   year [0] DYear,
   month [1] DMonth,
   day [2] DDay
}
*/
typedef struct EXTERN DDate {
   DYear year;
   DMonth month;
   DDay day;
} DDate;

EXTERN int asn1PE_DDate (OSCTXT* pctxt, DDate* pvalue);

EXTERN int asn1PD_DDate (OSCTXT* pctxt, DDate* pvalue);

EXTERN void asn1Print_DDate (const char* name, const DDate* pvalue);

EXTERN int asn1PrtToStrm_DDate (OSCTXT *pctxt, const char* name, const DDate* pvalue);

/**************************************************************/
/*                                                            */
/*  DFullTime                                                 */
/*                                                            */
/**************************************************************/
/*
DFullTime ::= SEQUENCE {
   year [0] DYear,
   month [1] DMonth,
   day [2] DDay,
   hour [3] DHour,
   minute [4] DMinute
}
*/
typedef struct EXTERN DFullTime {
   DYear year;
   DMonth month;
   DDay day;
   DHour hour;
   DMinute minute;
} DFullTime;

EXTERN int asn1PE_DFullTime (OSCTXT* pctxt, DFullTime* pvalue);

EXTERN int asn1PD_DFullTime (OSCTXT* pctxt, DFullTime* pvalue);

EXTERN void asn1Print_DFullTime (const char* name, const DFullTime* pvalue);

EXTERN int asn1PrtToStrm_DFullTime (OSCTXT *pctxt, 
   const char* name, const DFullTime* pvalue);

/**************************************************************/
/*                                                            */
/*  DMonthDay                                                 */
/*                                                            */
/**************************************************************/
/*
DMonthDay ::= SEQUENCE {
   month [0] DMonth,
   day [1] DDay
}
*/
typedef struct EXTERN DMonthDay {
   DMonth month;
   DDay day;
} DMonthDay;

EXTERN int asn1PE_DMonthDay (OSCTXT* pctxt, DMonthDay* pvalue);

EXTERN int asn1PD_DMonthDay (OSCTXT* pctxt, DMonthDay* pvalue);

EXTERN void asn1Print_DMonthDay (const char* name, const DMonthDay* pvalue);

EXTERN int asn1PrtToStrm_DMonthDay (OSCTXT *pctxt, 
   const char* name, const DMonthDay* pvalue);

/**************************************************************/
/*                                                            */
/*  DTime                                                     */
/*                                                            */
/**************************************************************/
/*
DTime ::= SEQUENCE {
   hour [0] DHour,
   minute [1] DMinute,
   second [2] DSecond,
   offset [3] DOffset OPTIONAL -- time zone
}
*/
typedef struct EXTERN DTime {
   struct {
      unsigned offsetPresent : 1;
   } m;
   DHour hour;
   DMinute minute;
   DSecond second;
   DOffset offset;
} DTime;

EXTERN int asn1PE_DTime (OSCTXT* pctxt, DTime* pvalue);

EXTERN int asn1PD_DTime (OSCTXT* pctxt, DTime* pvalue);

EXTERN void asn1Print_DTime (const char* name, const DTime* pvalue);

EXTERN int asn1PrtToStrm_DTime (OSCTXT *pctxt, const char* name, const DTime* pvalue);

EXTERN int asn1Init_DTime (DTime* pvalue);

/**************************************************************/
/*                                                            */
/*  DYearMonth                                                */
/*                                                            */
/**************************************************************/
/*
DYearMonth ::= SEQUENCE {
   year [0] DYear,
   month [1] DMonth
}
*/
typedef struct EXTERN DYearMonth {
   DYear year;
   DMonth month;
} DYearMonth;

EXTERN int asn1PE_DYearMonth (OSCTXT* pctxt, DYearMonth* pvalue);

EXTERN int asn1PD_DYearMonth (OSCTXT* pctxt, DYearMonth* pvalue);

EXTERN void asn1Print_DYearMonth (const char* name, const DYearMonth* pvalue);

EXTERN int asn1PrtToStrm_DYearMonth (OSCTXT *pctxt, 
   const char* name, const DYearMonth* pvalue);

/**************************************************************/
/*                                                            */
/*  DisabledVehicle                                           */
/*                                                            */
/**************************************************************/
/*
DisabledVehicle ::= SEQUENCE {
   statusDetails [0] ITIScodes (523..541),
                     -- Codes 532 to 541, as taken from J2540:
                     -- Disabled, etc.
                       -- stalled-vehicle (532),
                       -- abandoned-vehicle (533),
                       -- disabled-vehicle (534),
                       -- disabled-truck (535),
                       -- disabled-semi-trailer (536), -^- Alt: disabled
                     -- tractor-trailer
                       -- disabled-bus (537),
                       -- disabled-train (538),
                       -- vehicle-spun-out (539),
                       -- vehicle-on-fire (540),
                       -- vehicle-in-water (541),
   locationDetails [1] GenericLocations OPTIONAL,
   ...
}
*/
typedef struct EXTERN DisabledVehicle {
   struct {
      unsigned locationDetailsPresent : 1;
   } m;
   OSUINT16 statusDetails;
   GenericLocations locationDetails;
   OSRTDList extElem1;
} DisabledVehicle;

EXTERN int asn1PE_DisabledVehicle (OSCTXT* pctxt, DisabledVehicle* pvalue);

EXTERN int asn1PD_DisabledVehicle (OSCTXT* pctxt, DisabledVehicle* pvalue);

EXTERN void asn1Print_DisabledVehicle 
   (const char* name, const DisabledVehicle* pvalue);

EXTERN int asn1PrtToStrm_DisabledVehicle (OSCTXT *pctxt, 
   const char* name, const DisabledVehicle* pvalue);

EXTERN int asn1Init_DisabledVehicle (DisabledVehicle* pvalue);

EXTERN void asn1Free_DisabledVehicle (OSCTXT *pctxt, DisabledVehicle* pvalue);

/**************************************************************/
/*                                                            */
/*  EventDescription_description                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'EventDescription'
*/
typedef struct EXTERN EventDescription_description {
   OSSIZE n;
   ITIScodes elem[8];
} EventDescription_description;

EXTERN int asn1PE_EventDescription_description (OSCTXT* pctxt, EventDescription_description* pvalue);

EXTERN int asn1PD_EventDescription_description (OSCTXT* pctxt, EventDescription_description* pvalue);

EXTERN void asn1Print_EventDescription_description 
   (const char* name, const EventDescription_description* pvalue);

EXTERN int asn1PrtToStrm_EventDescription_description (OSCTXT *pctxt, 
   const char* name, const EventDescription_description* pvalue);

EXTERN int asn1Init_EventDescription_description (
   EventDescription_description* pvalue);

/**************************************************************/
/*                                                            */
/*  EventDescription_regional                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'EventDescription'
*/
/* List of RegionalExtension */
typedef OSRTDList EventDescription_regional;

EXTERN int asn1PE_EventDescription_regional (OSCTXT* pctxt, EventDescription_regional* pvalue);

EXTERN int asn1PD_EventDescription_regional (OSCTXT* pctxt, EventDescription_regional* pvalue);

EXTERN void asn1Print_EventDescription_regional 
   (const char* name, const EventDescription_regional* pvalue);

EXTERN int asn1PrtToStrm_EventDescription_regional (OSCTXT *pctxt, 
   const char* name, const EventDescription_regional* pvalue);

EXTERN int asn1Init_EventDescription_regional (EventDescription_regional* pvalue);

EXTERN void asn1Free_EventDescription_regional (OSCTXT *pctxt, 
   EventDescription_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  EventDescription                                          */
/*                                                            */
/**************************************************************/
/*
EventDescription ::= SEQUENCE {
   typeEvent [0] ITIScodes,
                 -- A category and an item from that category 
                 -- all ITS stds use the same types here
                 -- to explain the type of  the 
                 -- alert / danger / hazard involved
   description [1] SEQUENCE (SIZE (1..8)) OF ITIScodes OPTIONAL,
                 -- Up to eight ITIS code set entries to further
                 -- describe the event, give advice, or any 
                 -- other ITIS codes
   priority [2] Priority OPTIONAL,
                 -- The urgency of this message, a relative
                 -- degree of merit compared with other 
                 -- similar messages for this type (not other
                 -- messages being sent by the device), nor  
                 -- is it a priority of display urgency
   heading [3] HeadingSlice OPTIONAL,
                 -- Applicable headings/direction
   extent [4] Extent OPTIONAL,
                 -- The spatial distance over which this
                 -- message applies and should be presented to the driver
   regional [5] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN EventDescription {
   struct {
      unsigned descriptionPresent : 1;
      unsigned priorityPresent : 1;
      unsigned headingPresent : 1;
      unsigned extentPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   ITIScodes typeEvent;
   EventDescription_description description;
   Priority priority;
   HeadingSlice heading;
   Extent extent;
   EventDescription_regional regional;
   OSRTDList extElem1;
} EventDescription;

EXTERN int asn1PE_EventDescription (OSCTXT* pctxt, EventDescription* pvalue);

EXTERN int asn1PD_EventDescription (OSCTXT* pctxt, EventDescription* pvalue);

EXTERN void asn1Print_EventDescription 
   (const char* name, const EventDescription* pvalue);

EXTERN int asn1PrtToStrm_EventDescription (OSCTXT *pctxt, 
   const char* name, const EventDescription* pvalue);

EXTERN int asn1Init_EventDescription (EventDescription* pvalue);

EXTERN void asn1Free_EventDescription (OSCTXT *pctxt, EventDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  ObstacleDetection                                         */
/*                                                            */
/**************************************************************/
/*
ObstacleDetection ::= SEQUENCE {
   obDist [0] ObstacleDistance, -- Obstacle Distance        
   obDirect [1] ObstacleDirection, -- Obstacle Direction
   description [2] ITIScodes (523..541) OPTIONAL,
                                            -- Uses a limited set of ITIS codes        
   locationDetails [3] GenericLocations OPTIONAL,
   dateTime [4] DDateTime, -- Time detected
   vertEvent [5] VerticalAccelerationThreshold OPTIONAL,
                                            -- Any wheels which have 
                                            -- exceeded the acceleration point
   ...
}
*/
typedef struct EXTERN ObstacleDetection {
   struct {
      unsigned descriptionPresent : 1;
      unsigned locationDetailsPresent : 1;
      unsigned vertEventPresent : 1;
   } m;
   ObstacleDistance obDist;
   ObstacleDirection obDirect;
   OSUINT16 description;
   GenericLocations locationDetails;
   DDateTime dateTime;
   VerticalAccelerationThreshold vertEvent;
   OSRTDList extElem1;
} ObstacleDetection;

EXTERN int asn1PE_ObstacleDetection (OSCTXT* pctxt, ObstacleDetection* pvalue);

EXTERN int asn1PD_ObstacleDetection (OSCTXT* pctxt, ObstacleDetection* pvalue);

EXTERN void asn1Print_ObstacleDetection 
   (const char* name, const ObstacleDetection* pvalue);

EXTERN int asn1PrtToStrm_ObstacleDetection (OSCTXT *pctxt, 
   const char* name, const ObstacleDetection* pvalue);

EXTERN int asn1Init_ObstacleDetection (ObstacleDetection* pvalue);

EXTERN void asn1Free_ObstacleDetection (OSCTXT *pctxt, ObstacleDetection* pvalue);

/**************************************************************/
/*                                                            */
/*  PivotPointDescription                                     */
/*                                                            */
/**************************************************************/
/*
PivotPointDescription ::= SEQUENCE {
   pivotOffset [0] Offset-B11,
                -- This gives a +- 10m range from the edge of the outline
                -- measured from the edge of the length of this unit
                -- a negative value is offset to inside the units
                -- a positive value is offset beyond the unit
   pivotAngle [1] Angle,
                -- Measured between the center-line of this unit 
                -- and the unit ahead which is pulling it.
                -- This value is required to project the units relative position
   pivots [2] PivotingAllowed,
                -- true if this unit can rotate about the pivot connection point
   ...
}
*/
typedef struct EXTERN PivotPointDescription {
   Offset_B11 pivotOffset;
   Angle pivotAngle;
   PivotingAllowed pivots;
   OSRTDList extElem1;
} PivotPointDescription;

EXTERN int asn1PE_PivotPointDescription (OSCTXT* pctxt, PivotPointDescription* pvalue);

EXTERN int asn1PD_PivotPointDescription (OSCTXT* pctxt, PivotPointDescription* pvalue);

EXTERN void asn1Print_PivotPointDescription 
   (const char* name, const PivotPointDescription* pvalue);

EXTERN int asn1PrtToStrm_PivotPointDescription (OSCTXT *pctxt, 
   const char* name, const PivotPointDescription* pvalue);

EXTERN int asn1Init_PivotPointDescription (PivotPointDescription* pvalue);

EXTERN void asn1Free_PivotPointDescription (OSCTXT *pctxt, 
   PivotPointDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  RTCMPackage                                               */
/*                                                            */
/**************************************************************/
/*
RTCMPackage ::= SEQUENCE {
   -- precise antenna position and noise data for a rover
   rtcmHeader [0] RTCMheader OPTIONAL,
   -- one or more RTCM messages
   msgs [1] RTCMmessageList,
   ...
}
*/
typedef struct EXTERN RTCMPackage {
   struct {
      unsigned rtcmHeaderPresent : 1;
   } m;
   RTCMheader rtcmHeader;
   RTCMmessageList msgs;
   OSRTDList extElem1;
} RTCMPackage;

EXTERN int asn1PE_RTCMPackage (OSCTXT* pctxt, RTCMPackage* pvalue);

EXTERN int asn1PD_RTCMPackage (OSCTXT* pctxt, RTCMPackage* pvalue);

EXTERN void asn1Print_RTCMPackage (const char* name, const RTCMPackage* pvalue);

EXTERN int asn1PrtToStrm_RTCMPackage (OSCTXT *pctxt, 
   const char* name, const RTCMPackage* pvalue);

EXTERN int asn1Init_RTCMPackage (RTCMPackage* pvalue);

EXTERN void asn1Free_RTCMPackage (OSCTXT *pctxt, RTCMPackage* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerHistoryPoint                                       */
/*                                                            */
/**************************************************************/
/*
TrailerHistoryPoint ::= SEQUENCE {
   pivotAngle [0] Angle,
                    -- angle with respect to the lead unit
   timeOffset [1] TimeOffset,
                    -- offset backwards in time 
   -- Position relative to the hauling Vehicle
   positionOffset [2] Node-XY-24b,
   elevationOffset [3] VertOffset-B07 OPTIONAL,
   heading [4] CoarseHeading OPTIONAL,
                    -- overall heading 
   ...
}
*/
typedef struct EXTERN TrailerHistoryPoint {
   struct {
      unsigned elevationOffsetPresent : 1;
      unsigned headingPresent : 1;
   } m;
   Angle pivotAngle;
   TimeOffset timeOffset;
   Node_XY_24b positionOffset;
   VertOffset_B07 elevationOffset;
   CoarseHeading heading;
   OSRTDList extElem1;
} TrailerHistoryPoint;

EXTERN int asn1PE_TrailerHistoryPoint (OSCTXT* pctxt, TrailerHistoryPoint* pvalue);

EXTERN int asn1PD_TrailerHistoryPoint (OSCTXT* pctxt, TrailerHistoryPoint* pvalue);

EXTERN void asn1Print_TrailerHistoryPoint 
   (const char* name, const TrailerHistoryPoint* pvalue);

EXTERN int asn1PrtToStrm_TrailerHistoryPoint (OSCTXT *pctxt, 
   const char* name, const TrailerHistoryPoint* pvalue);

EXTERN int asn1Init_TrailerHistoryPoint (TrailerHistoryPoint* pvalue);

EXTERN void asn1Free_TrailerHistoryPoint (OSCTXT *pctxt, TrailerHistoryPoint* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerHistoryPointList                                   */
/*                                                            */
/**************************************************************/
/*
TrailerHistoryPointList ::= SEQUENCE (SIZE (1..23)) OF TrailerHistoryPoint
*/
/* List of TrailerHistoryPoint */
typedef OSRTDList TrailerHistoryPointList;

EXTERN int asn1PE_TrailerHistoryPointList (OSCTXT* pctxt, TrailerHistoryPointList* pvalue);

EXTERN int asn1PD_TrailerHistoryPointList (OSCTXT* pctxt, TrailerHistoryPointList* pvalue);

EXTERN void asn1Print_TrailerHistoryPointList 
   (const char* name, const TrailerHistoryPointList* pvalue);

EXTERN int asn1PrtToStrm_TrailerHistoryPointList (OSCTXT *pctxt, 
   const char* name, const TrailerHistoryPointList* pvalue);

EXTERN int asn1Init_TrailerHistoryPointList (TrailerHistoryPointList* pvalue);

EXTERN void asn1Free_TrailerHistoryPointList (OSCTXT *pctxt, 
   TrailerHistoryPointList* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerUnitDescription                                    */
/*                                                            */
/**************************************************************/
/*
TrailerUnitDescription ::= SEQUENCE {
   isDolly [0] IsDolly, -- if false this is a trailer
   width [1] VehicleWidth,
   length [2] VehicleLength,
   height [3] VehicleHeight OPTIONAL,
   mass [4] TrailerMass OPTIONAL,
   bumperHeights [5] BumperHeights OPTIONAL,
   centerOfGravity [6] VehicleHeight OPTIONAL,
   -- The front pivot point of the unit
   frontPivot [7] PivotPointDescription,
   -- The rear pivot point connecting to the next element, 
   -- if present and used (implies another unit is connected)
   rearPivot [8] PivotPointDescription OPTIONAL,
   -- Rear wheel pivot point center-line offset
   -- measured from the rear of the above length
   rearWheelOffset [9] Offset-B12 OPTIONAL,
                    -- the effective center-line of the wheel set
   -- Current Position relative to the hauling Vehicle
   positionOffset [10] Node-XY-24b,
   elevationOffset [11] VertOffset-B07 OPTIONAL,
   -- Past Position history relative to the hauling Vehicle
   crumbData [12] TrailerHistoryPointList OPTIONAL,
   ...
}
*/
typedef struct EXTERN TrailerUnitDescription {
   struct {
      unsigned heightPresent : 1;
      unsigned massPresent : 1;
      unsigned bumperHeightsPresent : 1;
      unsigned centerOfGravityPresent : 1;
      unsigned rearPivotPresent : 1;
      unsigned rearWheelOffsetPresent : 1;
      unsigned elevationOffsetPresent : 1;
      unsigned crumbDataPresent : 1;
   } m;
   IsDolly isDolly;
   VehicleWidth width;
   VehicleLength length;
   VehicleHeight height;
   TrailerMass mass;
   BumperHeights bumperHeights;
   VehicleHeight centerOfGravity;
   PivotPointDescription frontPivot;
   PivotPointDescription rearPivot;
   Offset_B12 rearWheelOffset;
   Node_XY_24b positionOffset;
   VertOffset_B07 elevationOffset;
   TrailerHistoryPointList crumbData;
   OSRTDList extElem1;
} TrailerUnitDescription;

EXTERN int asn1PE_TrailerUnitDescription (OSCTXT* pctxt, TrailerUnitDescription* pvalue);

EXTERN int asn1PD_TrailerUnitDescription (OSCTXT* pctxt, TrailerUnitDescription* pvalue);

EXTERN void asn1Print_TrailerUnitDescription 
   (const char* name, const TrailerUnitDescription* pvalue);

EXTERN int asn1PrtToStrm_TrailerUnitDescription (OSCTXT *pctxt, 
   const char* name, const TrailerUnitDescription* pvalue);

EXTERN int asn1Init_TrailerUnitDescription (TrailerUnitDescription* pvalue);

EXTERN void asn1Free_TrailerUnitDescription (OSCTXT *pctxt, 
   TrailerUnitDescription* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerUnitDescriptionList                                */
/*                                                            */
/**************************************************************/
/*
TrailerUnitDescriptionList ::= SEQUENCE (SIZE (1..8)) OF TrailerUnitDescription
*/
/* List of TrailerUnitDescription */
typedef OSRTDList TrailerUnitDescriptionList;

EXTERN int asn1PE_TrailerUnitDescriptionList (OSCTXT* pctxt, TrailerUnitDescriptionList* pvalue);

EXTERN int asn1PD_TrailerUnitDescriptionList (OSCTXT* pctxt, TrailerUnitDescriptionList* pvalue);

EXTERN void asn1Print_TrailerUnitDescriptionList 
   (const char* name, const TrailerUnitDescriptionList* pvalue);

EXTERN int asn1PrtToStrm_TrailerUnitDescriptionList (OSCTXT *pctxt, 
   const char* name, const TrailerUnitDescriptionList* pvalue);

EXTERN int asn1Init_TrailerUnitDescriptionList (TrailerUnitDescriptionList* pvalue);

EXTERN void asn1Free_TrailerUnitDescriptionList (OSCTXT *pctxt, 
   TrailerUnitDescriptionList* pvalue);

/**************************************************************/
/*                                                            */
/*  TrailerData                                               */
/*                                                            */
/**************************************************************/
/*
TrailerData ::= SEQUENCE {
   -- CERT SSP Privilege Details
   sspRights [0] SSPindex, -- index to CERT rights
   -- Offset connection point details from the 
   -- hauling vehicle to the first trailer unit
   connection [1] PivotPointDescription,
   -- One of more Trailer or Dolly Descriptions 
   -- (each called a unit)
   units [2] TrailerUnitDescriptionList,
   ...
}
*/
typedef struct EXTERN TrailerData {
   SSPindex sspRights;
   PivotPointDescription connection;
   TrailerUnitDescriptionList units;
   OSRTDList extElem1;
} TrailerData;

EXTERN int asn1PE_TrailerData (OSCTXT* pctxt, TrailerData* pvalue);

EXTERN int asn1PD_TrailerData (OSCTXT* pctxt, TrailerData* pvalue);

EXTERN void asn1Print_TrailerData (const char* name, const TrailerData* pvalue);

EXTERN int asn1PrtToStrm_TrailerData (OSCTXT *pctxt, 
   const char* name, const TrailerData* pvalue);

EXTERN int asn1Init_TrailerData (TrailerData* pvalue);

EXTERN void asn1Free_TrailerData (OSCTXT *pctxt, TrailerData* pvalue);

/**************************************************************/
/*                                                            */
/*  SpecialVehicleExtensions                                  */
/*                                                            */
/**************************************************************/
/*
SpecialVehicleExtensions ::= SEQUENCE {
   -- The content below requires SSP permissions to transmit
   -- The entire EVA message has been reduced to these items
   vehicleAlerts [0] EmergencyDetails OPTIONAL,
   -- Description or Direction from an emergency vehicle
   description [1] EventDescription OPTIONAL, -- short ITIS description
   -- Trailers for both passenger vehicles and heavy trucks
   trailers [2] TrailerData OPTIONAL,
   ...
}
*/
typedef struct EXTERN SpecialVehicleExtensions {
   struct {
      unsigned vehicleAlertsPresent : 1;
      unsigned descriptionPresent : 1;
      unsigned trailersPresent : 1;
   } m;
   EmergencyDetails vehicleAlerts;
   EventDescription description;
   TrailerData trailers;
   OSRTDList extElem1;
} SpecialVehicleExtensions;

EXTERN int asn1PE_SpecialVehicleExtensions (OSCTXT* pctxt, SpecialVehicleExtensions* pvalue);

EXTERN int asn1PD_SpecialVehicleExtensions (OSCTXT* pctxt, SpecialVehicleExtensions* pvalue);

EXTERN void asn1Print_SpecialVehicleExtensions 
   (const char* name, const SpecialVehicleExtensions* pvalue);

EXTERN int asn1PrtToStrm_SpecialVehicleExtensions (OSCTXT *pctxt, 
   const char* name, const SpecialVehicleExtensions* pvalue);

EXTERN int asn1Init_SpecialVehicleExtensions (SpecialVehicleExtensions* pvalue);

EXTERN void asn1Free_SpecialVehicleExtensions (OSCTXT *pctxt, 
   SpecialVehicleExtensions* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedProfileMeasurementList                               */
/*                                                            */
/**************************************************************/
/*
SpeedProfileMeasurementList ::= SEQUENCE (SIZE (1..20)) OF SpeedProfileMeasurement
*/
typedef struct EXTERN SpeedProfileMeasurementList {
   OSSIZE n;
   SpeedProfileMeasurement elem[20];
} SpeedProfileMeasurementList;

EXTERN int asn1PE_SpeedProfileMeasurementList (OSCTXT* pctxt, SpeedProfileMeasurementList* pvalue);

EXTERN int asn1PD_SpeedProfileMeasurementList (OSCTXT* pctxt, SpeedProfileMeasurementList* pvalue);

EXTERN void asn1Print_SpeedProfileMeasurementList 
   (const char* name, const SpeedProfileMeasurementList* pvalue);

EXTERN int asn1PrtToStrm_SpeedProfileMeasurementList (OSCTXT *pctxt, 
   const char* name, const SpeedProfileMeasurementList* pvalue);

EXTERN int asn1Init_SpeedProfileMeasurementList (SpeedProfileMeasurementList* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedProfile                                              */
/*                                                            */
/**************************************************************/
/*
SpeedProfile ::= SEQUENCE {
   -- Composed of set of measured average speeds
   speedReports [0] SpeedProfileMeasurementList,
   ...
}
*/
typedef struct EXTERN SpeedProfile {
   SpeedProfileMeasurementList speedReports;
   OSRTDList extElem1;
} SpeedProfile;

EXTERN int asn1PE_SpeedProfile (OSCTXT* pctxt, SpeedProfile* pvalue);

EXTERN int asn1PD_SpeedProfile (OSCTXT* pctxt, SpeedProfile* pvalue);

EXTERN void asn1Print_SpeedProfile (const char* name, const SpeedProfile* pvalue);

EXTERN int asn1PrtToStrm_SpeedProfile (OSCTXT *pctxt, 
   const char* name, const SpeedProfile* pvalue);

EXTERN int asn1Init_SpeedProfile (SpeedProfile* pvalue);

EXTERN void asn1Free_SpeedProfile (OSCTXT *pctxt, SpeedProfile* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleData                                               */
/*                                                            */
/**************************************************************/
/*
VehicleData ::= SEQUENCE {
   -- Values for width and length are sent in BSM part I 
   height [0] VehicleHeight OPTIONAL,
   bumpers [1] BumperHeights OPTIONAL,
   mass [2] VehicleMass OPTIONAL,
   trailerWeight [3] TrailerWeight OPTIONAL,
   ...
}
*/
typedef struct EXTERN VehicleData {
   struct {
      unsigned heightPresent : 1;
      unsigned bumpersPresent : 1;
      unsigned massPresent : 1;
      unsigned trailerWeightPresent : 1;
   } m;
   VehicleHeight height;
   BumperHeights bumpers;
   VehicleMass mass;
   TrailerWeight trailerWeight;
   OSRTDList extElem1;
} VehicleData;

EXTERN int asn1PE_VehicleData (OSCTXT* pctxt, VehicleData* pvalue);

EXTERN int asn1PD_VehicleData (OSCTXT* pctxt, VehicleData* pvalue);

EXTERN void asn1Print_VehicleData (const char* name, const VehicleData* pvalue);

EXTERN int asn1PrtToStrm_VehicleData (OSCTXT *pctxt, 
   const char* name, const VehicleData* pvalue);

EXTERN int asn1Init_VehicleData (VehicleData* pvalue);

EXTERN void asn1Free_VehicleData (OSCTXT *pctxt, VehicleData* pvalue);

/**************************************************************/
/*                                                            */
/*  WeatherReport                                             */
/*                                                            */
/**************************************************************/
/*
WeatherReport ::= SEQUENCE {
   isRaining [0] EssPrecipYesNo,
   rainRate [1] EssPrecipRate OPTIONAL,
   precipSituation [2] EssPrecipSituation OPTIONAL,
   solarRadiation [3] EssSolarRadiation OPTIONAL,
   friction [4] EssMobileFriction OPTIONAL,
   roadFriction [5] CoefficientOfFriction OPTIONAL,
   ...
}
*/
typedef struct EXTERN WeatherReport {
   struct {
      unsigned rainRatePresent : 1;
      unsigned precipSituationPresent : 1;
      unsigned solarRadiationPresent : 1;
      unsigned frictionPresent : 1;
      unsigned roadFrictionPresent : 1;
   } m;
   EssPrecipYesNo isRaining;
   EssPrecipRate rainRate;
   EssPrecipSituation precipSituation;
   EssSolarRadiation solarRadiation;
   EssMobileFriction friction;
   CoefficientOfFriction roadFriction;
   OSRTDList extElem1;
} WeatherReport;

EXTERN int asn1PE_WeatherReport (OSCTXT* pctxt, WeatherReport* pvalue);

EXTERN int asn1PD_WeatherReport (OSCTXT* pctxt, WeatherReport* pvalue);

EXTERN void asn1Print_WeatherReport (const char* name, const WeatherReport* pvalue);

EXTERN int asn1PrtToStrm_WeatherReport (OSCTXT *pctxt, 
   const char* name, const WeatherReport* pvalue);

EXTERN int asn1Init_WeatherReport (WeatherReport* pvalue);

EXTERN void asn1Free_WeatherReport (OSCTXT *pctxt, WeatherReport* pvalue);

/**************************************************************/
/*                                                            */
/*  WeatherProbe                                              */
/*                                                            */
/**************************************************************/
/*
WeatherProbe ::= SEQUENCE {
   airTemp [0] AmbientAirTemperature OPTIONAL,
   airPressure [1] AmbientAirPressure OPTIONAL,
   rainRates [2] WiperSet OPTIONAL,
   ...
}
*/
typedef struct EXTERN WeatherProbe {
   struct {
      unsigned airTempPresent : 1;
      unsigned airPressurePresent : 1;
      unsigned rainRatesPresent : 1;
   } m;
   AmbientAirTemperature airTemp;
   AmbientAirPressure airPressure;
   WiperSet rainRates;
   OSRTDList extElem1;
} WeatherProbe;

EXTERN int asn1PE_WeatherProbe (OSCTXT* pctxt, WeatherProbe* pvalue);

EXTERN int asn1PD_WeatherProbe (OSCTXT* pctxt, WeatherProbe* pvalue);

EXTERN void asn1Print_WeatherProbe (const char* name, const WeatherProbe* pvalue);

EXTERN int asn1PrtToStrm_WeatherProbe (OSCTXT *pctxt, 
   const char* name, const WeatherProbe* pvalue);

EXTERN int asn1Init_WeatherProbe (WeatherProbe* pvalue);

EXTERN void asn1Free_WeatherProbe (OSCTXT *pctxt, WeatherProbe* pvalue);

/**************************************************************/
/*                                                            */
/*  SupplementalVehicleExtensions_regional                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SupplementalVehicleExtensions'
*/
/* List of RegionalExtension */
typedef OSRTDList SupplementalVehicleExtensions_regional;

EXTERN int asn1PE_SupplementalVehicleExtensions_regional (OSCTXT* pctxt, SupplementalVehicleExtensions_regional* pvalue);

EXTERN int asn1PD_SupplementalVehicleExtensions_regional (OSCTXT* pctxt, SupplementalVehicleExtensions_regional* pvalue);

EXTERN void asn1Print_SupplementalVehicleExtensions_regional 
   (const char* name, const SupplementalVehicleExtensions_regional* pvalue);

EXTERN int asn1PrtToStrm_SupplementalVehicleExtensions_regional (OSCTXT *pctxt, 
   const char* name, const SupplementalVehicleExtensions_regional* pvalue);

EXTERN int asn1Init_SupplementalVehicleExtensions_regional (
   SupplementalVehicleExtensions_regional* pvalue);

EXTERN void asn1Free_SupplementalVehicleExtensions_regional (OSCTXT *pctxt, 
   SupplementalVehicleExtensions_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SupplementalVehicleExtensions                             */
/*                                                            */
/**************************************************************/
/*
SupplementalVehicleExtensions ::= SEQUENCE {
   -- Note that VehicleEventFlags, ExteriorLights, 
   -- PathHistory, and PathPrediction are in VehicleSafetyExtensions 
   -- Vehicle Type Classification Data
   classification [0] BasicVehicleClass OPTIONAL,
                    -- May be required to be present for non passenger vehicles
   classDetails [1] VehicleClassification OPTIONAL,
   vehicleData [2] VehicleData OPTIONAL,
   -- Various V2V Probe Data
   weatherReport [3] WeatherReport OPTIONAL,
   weatherProbe [4] WeatherProbe OPTIONAL,
   -- Detected Obstacle data
   obstacle [5] ObstacleDetection OPTIONAL,
   -- Disabled Vehicle Report
   status [6] DisabledVehicle OPTIONAL,
   -- Oncoming lane speed reporting
   speedProfile [7] SpeedProfile OPTIONAL,
   -- Raw GNSS measurements
   theRTCM [8] RTCMPackage OPTIONAL,
   regional [9] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN SupplementalVehicleExtensions {
   struct {
      unsigned classificationPresent : 1;
      unsigned classDetailsPresent : 1;
      unsigned vehicleDataPresent : 1;
      unsigned weatherReportPresent : 1;
      unsigned weatherProbePresent : 1;
      unsigned obstaclePresent : 1;
      unsigned statusPresent : 1;
      unsigned speedProfilePresent : 1;
      unsigned theRTCMPresent : 1;
      unsigned regionalPresent : 1;
   } m;
   BasicVehicleClass classification;
   VehicleClassification classDetails;
   VehicleData vehicleData;
   WeatherReport weatherReport;
   WeatherProbe weatherProbe;
   ObstacleDetection obstacle;
   DisabledVehicle status;
   SpeedProfile speedProfile;
   RTCMPackage theRTCM;
   SupplementalVehicleExtensions_regional regional;
   OSRTDList extElem1;
} SupplementalVehicleExtensions;

EXTERN int asn1PE_SupplementalVehicleExtensions (OSCTXT* pctxt, SupplementalVehicleExtensions* pvalue);

EXTERN int asn1PD_SupplementalVehicleExtensions (OSCTXT* pctxt, SupplementalVehicleExtensions* pvalue);

EXTERN void asn1Print_SupplementalVehicleExtensions 
   (const char* name, const SupplementalVehicleExtensions* pvalue);

EXTERN int asn1PrtToStrm_SupplementalVehicleExtensions (OSCTXT *pctxt, 
   const char* name, const SupplementalVehicleExtensions* pvalue);

EXTERN int asn1Init_SupplementalVehicleExtensions (
   SupplementalVehicleExtensions* pvalue);

EXTERN void asn1Free_SupplementalVehicleExtensions (OSCTXT *pctxt, 
   SupplementalVehicleExtensions* pvalue);

/**************************************************************/
/*                                                            */
/*  VerticalOffset                                            */
/*                                                            */
/**************************************************************/
/*
VerticalOffset ::= CHOICE {
   -- Vertical Offset
   -- All below in steps of 10cm above or below the reference ellipsoid
   offset1 [0] VertOffset-B07, -- with a range of +-   6.3 meters vertical
   offset2 [1] VertOffset-B08, -- with a range of +-  12.7 meters vertical
   offset3 [2] VertOffset-B09, -- with a range of +-  25.5 meters vertical
   offset4 [3] VertOffset-B10, -- with a range of +-  51.1 meters vertical
   offset5 [4] VertOffset-B11, -- with a range of +- 102.3 meters vertical
   offset6 [5] VertOffset-B12, -- with a range of +- 204.7 meters vertical
   elevation [6] Elevation, -- with a range of -409.5 to + 6143.9 meters
   regional [7] RegionalExtension
                                    -- offset which follows is of a
                                    -- regional definition type
}
*/
/* Choice tag constants */

#define T_VerticalOffset_offset1        1
#define T_VerticalOffset_offset2        2
#define T_VerticalOffset_offset3        3
#define T_VerticalOffset_offset4        4
#define T_VerticalOffset_offset5        5
#define T_VerticalOffset_offset6        6
#define T_VerticalOffset_elevation      7
#define T_VerticalOffset_regional       8

typedef struct EXTERN VerticalOffset {
   OSINT32 t;
   union {
      /* t = 1 */
      VertOffset_B07 offset1;
      /* t = 2 */
      VertOffset_B08 offset2;
      /* t = 3 */
      VertOffset_B09 offset3;
      /* t = 4 */
      VertOffset_B10 offset4;
      /* t = 5 */
      VertOffset_B11 offset5;
      /* t = 6 */
      VertOffset_B12 offset6;
      /* t = 7 */
      Elevation elevation;
      /* t = 8 */
      RegionalExtension *regional;
   } u;
} VerticalOffset;

EXTERN int asn1PE_VerticalOffset (OSCTXT* pctxt, VerticalOffset* pvalue);

EXTERN int asn1PD_VerticalOffset (OSCTXT* pctxt, VerticalOffset* pvalue);

EXTERN void asn1Print_VerticalOffset (const char* name, const VerticalOffset* pvalue);

EXTERN int asn1PrtToStrm_VerticalOffset (OSCTXT *pctxt, 
   const char* name, const VerticalOffset* pvalue);

EXTERN int asn1Init_VerticalOffset (VerticalOffset* pvalue);

EXTERN void asn1Free_VerticalOffset (OSCTXT *pctxt, VerticalOffset* pvalue);

/* Value definitions */

#define ASN1V_vehicleSafetyExt 0
#define ASN1V_specialVehicleExt 1
#define ASN1V_supplementalVehicleExt 2
#define ASN1V_unknownVehicleClass 0
#define ASN1V_specialVehicleClass 1
#define ASN1V_passenger_Vehicle_TypeUnknown 10
#define ASN1V_passenger_Vehicle_TypeOther 11
#define ASN1V_lightTruck_Vehicle_TypeUnknown 20
#define ASN1V_lightTruck_Vehicle_TypeOther 21
#define ASN1V_truck_Vehicle_TypeUnknown 25
#define ASN1V_truck_Vehicle_TypeOther 26
#define ASN1V_truck_axleCnt2 27
#define ASN1V_truck_axleCnt3 28
#define ASN1V_truck_axleCnt4 29
#define ASN1V_truck_axleCnt4Trailer 30
#define ASN1V_truck_axleCnt5Trailer 31
#define ASN1V_truck_axleCnt6Trailer 32
#define ASN1V_truck_axleCnt5MultiTrailer 33
#define ASN1V_truck_axleCnt6MultiTrailer 34
#define ASN1V_truck_axleCnt7MultiTrailer 35
#define ASN1V_motorcycle_TypeUnknown 40
#define ASN1V_motorcycle_TypeOther 41
#define ASN1V_motorcycle_Cruiser_Standard 42
#define ASN1V_motorcycle_SportUnclad 43
#define ASN1V_motorcycle_SportTouring 44
#define ASN1V_motorcycle_SuperSport 45
#define ASN1V_motorcycle_Touring 46
#define ASN1V_motorcycle_Trike 47
#define ASN1V_motorcycle_wPassengers 48
#define ASN1V_transit_TypeUnknown 50
#define ASN1V_transit_TypeOther 51
#define ASN1V_transit_BRT 52
#define ASN1V_transit_ExpressBus 53
#define ASN1V_transit_LocalBus 54
#define ASN1V_transit_SchoolBus 55
#define ASN1V_transit_FixedGuideway 56
#define ASN1V_transit_Paratransit 57
#define ASN1V_transit_Paratransit_Ambulance 58
#define ASN1V_emergency_TypeUnknown 60
#define ASN1V_emergency_TypeOther 61
#define ASN1V_emergency_Fire_Light_Vehicle 62
#define ASN1V_emergency_Fire_Heavy_Vehicle 63
#define ASN1V_emergency_Fire_Paramedic_Vehicle 64
#define ASN1V_emergency_Fire_Ambulance_Vehicle 65
#define ASN1V_emergency_Police_Light_Vehicle 66
#define ASN1V_emergency_Police_Heavy_Vehicle 67
#define ASN1V_emergency_Other_Responder 68
#define ASN1V_emergency_Other_Ambulance 69
#define ASN1V_otherTraveler_TypeUnknown 80
#define ASN1V_otherTraveler_TypeOther 81
#define ASN1V_otherTraveler_Pedestrian 82
#define ASN1V_otherTraveler_Visually_Disabled 83
#define ASN1V_otherTraveler_Physically_Disabled 84
#define ASN1V_otherTraveler_Bicycle 85
#define ASN1V_otherTraveler_Vulnerable_Roadworker 86
#define ASN1V_infrastructure_TypeUnknown 90
#define ASN1V_infrastructure_Fixed 91
#define ASN1V_infrastructure_Movable 92
#define ASN1V_equipped_CargoTrailer 93
#define ASN1V_reservedMessageId_D 0
#define ASN1V_alaCarteMessage_D 1
#define ASN1V_basicSafetyMessage_D 2
#define ASN1V_basicSafetyMessageVerbose_D 3
#define ASN1V_commonSafetyRequest_D 4
#define ASN1V_emergencyVehicleAlert_D 5
#define ASN1V_intersectionCollision_D 6
#define ASN1V_mapData_D 7
#define ASN1V_nmeaCorrections_D 8
#define ASN1V_probeDataManagement_D 9
#define ASN1V_probeVehicleData_D 10
#define ASN1V_roadSideAlert_D 11
#define ASN1V_rtcmCorrections_D 12
#define ASN1V_signalPhaseAndTimingMessage_D 13
#define ASN1V_signalRequestMessage_D 14
#define ASN1V_signalStatusMessage_D 15
#define ASN1V_travelerInformation_D 16
#define ASN1V_uperFrame_D 17
#define ASN1V_mapData 18
#define ASN1V_signalPhaseAndTimingMessage 19
#define ASN1V_basicSafetyMessage 20
#define ASN1V_commonSafetyRequest 21
#define ASN1V_emergencyVehicleAlert 22
#define ASN1V_intersectionCollision 23
#define ASN1V_nmeaCorrections 24
#define ASN1V_probeDataManagement 25
#define ASN1V_probeVehicleData 26
#define ASN1V_roadSideAlert 27
#define ASN1V_rtcmCorrections 28
#define ASN1V_signalRequestMessage 29
#define ASN1V_signalStatusMessage 30
#define ASN1V_travelerInformation 31
#define ASN1V_personalSafetyMessage 32
#define ASN1V_testMessage00 240
#define ASN1V_testMessage01 241
#define ASN1V_testMessage02 242
#define ASN1V_testMessage03 243
#define ASN1V_testMessage04 244
#define ASN1V_testMessage05 245
#define ASN1V_testMessage06 246
#define ASN1V_testMessage07 247
#define ASN1V_testMessage08 248
#define ASN1V_testMessage09 249
#define ASN1V_testMessage10 250
#define ASN1V_testMessage11 251
#define ASN1V_testMessage12 252
#define ASN1V_testMessage13 253
#define ASN1V_testMessage14 254
#define ASN1V_testMessage15 255
#define ASN1V_unknownFuel 0
#define ASN1V_gasoline 1
#define ASN1V_ethanol 2
#define ASN1V_diesel 3
#define ASN1V_electric 4
#define ASN1V_hybrid 5
#define ASN1V_hydrogen 6
#define ASN1V_natGasLiquid 7
#define ASN1V_natGasComp 8
#define ASN1V_propane 9
#define ASN1V_noRegion 0
#define ASN1V_addGrpA 1
#define ASN1V_addGrpB 2
#define ASN1V_addGrpC 3

#ifdef __cplusplus
}
#endif

#endif
