/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.2.4, Date: 06-Mar-2019.
 */
#ifndef ADDGRPB_H
#define ADDGRPB_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h>
#include <stdlib.h>
#include "rtkey.h"
#include "rtpersrc/asn1per.h"

#include "DSRC.h"

/**
 * Header file for ASN.1 module AddGrpB
 */
/**************************************************************/
/*                                                            */
/*  Angle                                                     */
/*                                                            */
/**************************************************************/
/*
Angle ::= INTEGER (0..239)
    Unsigned units of 1.5 degree, in 1 octet
    the true north is 0, positive is clockwise
    the values 240 to 254 shall not be sent
    the value 255 (0xFF) indicates an invalid value

*/
typedef OSUINT8 AddGrpB_Angle;

EXTERN int asn1PE_AddGrpB_Angle (OSCTXT* pctxt, AddGrpB_Angle value);

EXTERN int asn1PD_AddGrpB_Angle (OSCTXT* pctxt, AddGrpB_Angle* pvalue);

EXTERN void asn1Print_AddGrpB_Angle (const char* name, const AddGrpB_Angle* pvalue);

EXTERN int asn1PrtToStrm_AddGrpB_Angle (OSCTXT *pctxt, 
   const char* name, const AddGrpB_Angle* pvalue);

/**************************************************************/
/*                                                            */
/*  Day                                                       */
/*                                                            */
/**************************************************************/
/*
Day ::= INTEGER (0..255)
    BCD coding of Day of Month, in 1 octet
    values with nibble values between 1010 and 1111 shall not be sent
    except that the value xxx (0xFF shall indicate an invalid value

*/
typedef OSUINT8 Day;

EXTERN int asn1PE_Day (OSCTXT* pctxt, Day value);

EXTERN int asn1PD_Day (OSCTXT* pctxt, Day* pvalue);

EXTERN void asn1Print_Day (const char* name, const Day* pvalue);

EXTERN int asn1PrtToStrm_Day (OSCTXT *pctxt, const char* name, const Day* pvalue);

/**************************************************************/
/*                                                            */
/*  DayOfWeek                                                 */
/*                                                            */
/**************************************************************/
/*
DayOfWeek ::= ENUMERATED { unknown(0), monday(1), tuesday(2), wednesday(3), thursday(4), friday(5), saturday(6), sunday(7) }
    Encoding as per above, in 3 bits
    the value 0x00 shall indicate an invalid value

*/
typedef enum {
   unknown_7 = 0,
   monday = 1,
   tuesday = 2,
   wednesday = 3,
   thursday = 4,
   friday = 5,
   saturday = 6,
   sunday = 7
} DayOfWeek_Root;

typedef OSUINT32 DayOfWeek;

EXTERN int asn1PE_DayOfWeek (OSCTXT* pctxt, DayOfWeek value);

EXTERN int asn1PD_DayOfWeek (OSCTXT* pctxt, DayOfWeek* pvalue);

EXTERN void asn1Print_DayOfWeek (const char* name, const DayOfWeek* pvalue);

EXTERN int asn1PrtToStrm_DayOfWeek (OSCTXT *pctxt, 
   const char* name, const DayOfWeek* pvalue);

EXTERN const OSUTF8CHAR* DayOfWeek_ToString (OSINT32 value);

EXTERN int DayOfWeek_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, DayOfWeek* pvalue);

EXTERN int DayOfWeek_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, DayOfWeek* pvalue);

/**************************************************************/
/*                                                            */
/*  DegreesLat                                                */
/*                                                            */
/**************************************************************/
/*
DegreesLat ::= INTEGER (-90..90)
    Signed units of degrees, in 1 octets
    the values  +91 to +126 shall not be sent
    the values -128 to  -91 shall not be sent
    the value 127 (0x7F) shall indicate an invalid value

*/
typedef OSINT8 DegreesLat;

EXTERN int asn1PE_DegreesLat (OSCTXT* pctxt, DegreesLat value);

EXTERN int asn1PD_DegreesLat (OSCTXT* pctxt, DegreesLat* pvalue);

EXTERN void asn1Print_DegreesLat (const char* name, const DegreesLat* pvalue);

EXTERN int asn1PrtToStrm_DegreesLat (OSCTXT *pctxt, 
   const char* name, const DegreesLat* pvalue);

/**************************************************************/
/*                                                            */
/*  DegreesLong                                               */
/*                                                            */
/**************************************************************/
/*
DegreesLong ::= INTEGER (-180..180)
    Signed units of degrees, in 2 octets
    the values +181 to +32766 shall not be sent
    the values -181 to -32768 shall not be sent
    the value 32767 (0x7FFF shall indicate an invalid value

*/
typedef OSINT16 DegreesLong;

EXTERN int asn1PE_DegreesLong (OSCTXT* pctxt, DegreesLong value);

EXTERN int asn1PD_DegreesLong (OSCTXT* pctxt, DegreesLong* pvalue);

EXTERN void asn1Print_DegreesLong (const char* name, const DegreesLong* pvalue);

EXTERN int asn1PrtToStrm_DegreesLong (OSCTXT *pctxt, 
   const char* name, const DegreesLong* pvalue);

/**************************************************************/
/*                                                            */
/*  Elevation                                                 */
/*                                                            */
/**************************************************************/
/*
Elevation ::= INTEGER (-32768..32767)
   Signed units of 0.1m (10cm), in 2 octets
   the value 32767 (0x7FFF) shall indicate an invalid value

*/
typedef OSINT16 AddGrpB_Elevation;

EXTERN int asn1PE_AddGrpB_Elevation (OSCTXT* pctxt, AddGrpB_Elevation value);

EXTERN int asn1PD_AddGrpB_Elevation (OSCTXT* pctxt, AddGrpB_Elevation* pvalue);

EXTERN void asn1Print_AddGrpB_Elevation 
   (const char* name, const AddGrpB_Elevation* pvalue);

EXTERN int asn1PrtToStrm_AddGrpB_Elevation (OSCTXT *pctxt, 
   const char* name, const AddGrpB_Elevation* pvalue);

/**************************************************************/
/*                                                            */
/*  Holiday                                                   */
/*                                                            */
/**************************************************************/
/*
Holiday ::= ENUMERATED { weekday(0), holiday(1) }
    Encoding as per above, in 1 bit

*/
typedef enum {
   weekday = 0,
   holiday = 1
} Holiday_Root;

typedef OSUINT32 Holiday;

EXTERN int asn1PE_Holiday (OSCTXT* pctxt, Holiday value);

EXTERN int asn1PD_Holiday (OSCTXT* pctxt, Holiday* pvalue);

EXTERN void asn1Print_Holiday (const char* name, const Holiday* pvalue);

EXTERN int asn1PrtToStrm_Holiday (OSCTXT *pctxt, 
   const char* name, const Holiday* pvalue);

EXTERN const OSUTF8CHAR* Holiday_ToString (OSINT32 value);

EXTERN int Holiday_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, Holiday* pvalue);

EXTERN int Holiday_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, Holiday* pvalue);

/**************************************************************/
/*                                                            */
/*  Hour                                                      */
/*                                                            */
/**************************************************************/
/*
Hour ::= INTEGER (0..255)
    BCD coding of Hour of a Day, in 1 octet
    values above upper nibble 0010 and lower nibble 0100 shall not be sent
    values with lower nibble values between 1010 and 1111 shall not be sent
    except that the value 255 (0xFF) shall indicate an invalid value

*/
typedef OSUINT8 Hour;

EXTERN int asn1PE_Hour (OSCTXT* pctxt, Hour value);

EXTERN int asn1PD_Hour (OSCTXT* pctxt, Hour* pvalue);

EXTERN void asn1Print_Hour (const char* name, const Hour* pvalue);

EXTERN int asn1PrtToStrm_Hour (OSCTXT *pctxt, const char* name, const Hour* pvalue);

/**************************************************************/
/*                                                            */
/*  LatitudeDMS                                               */
/*                                                            */
/**************************************************************/
/*
LatitudeDMS ::= INTEGER (-32400000..32400000)
    Signed units of 0.01 seconds of a minute of a degree of Latitude
    Providing a range of plus-minus 90 degrees
    in a 4 octet value when implicit or in BER forms
    the value 0x7FFF FFFF shall indicate an invalid value

*/
typedef OSINT32 LatitudeDMS;

EXTERN int asn1PE_LatitudeDMS (OSCTXT* pctxt, LatitudeDMS value);

EXTERN int asn1PD_LatitudeDMS (OSCTXT* pctxt, LatitudeDMS* pvalue);

EXTERN void asn1Print_LatitudeDMS (const char* name, const LatitudeDMS* pvalue);

EXTERN int asn1PrtToStrm_LatitudeDMS (OSCTXT *pctxt, 
   const char* name, const LatitudeDMS* pvalue);

/**************************************************************/
/*                                                            */
/*  LongitudeDMS                                              */
/*                                                            */
/**************************************************************/
/*
LongitudeDMS ::= INTEGER (-64800000..64800000)
    Signed units of 0.01 seconds of a minute of a degree of Longitude
    Providing a range of plus-minus 180 degrees
    in a 4 octet value when implicit or in BER forms
    the value 0x7FFF FFFF shall indicate an invalid value

*/
typedef OSINT32 LongitudeDMS;

EXTERN int asn1PE_LongitudeDMS (OSCTXT* pctxt, LongitudeDMS value);

EXTERN int asn1PD_LongitudeDMS (OSCTXT* pctxt, LongitudeDMS* pvalue);

EXTERN void asn1Print_LongitudeDMS (const char* name, const LongitudeDMS* pvalue);

EXTERN int asn1PrtToStrm_LongitudeDMS (OSCTXT *pctxt, 
   const char* name, const LongitudeDMS* pvalue);

/**************************************************************/
/*                                                            */
/*  MaxTimetoChange                                           */
/*                                                            */
/**************************************************************/
/*
MaxTimetoChange ::= INTEGER (0..2402)
    Unsigned units of 0.1 seconds, in 2 octets
    the value 2401 shall indicate 'forever'
    the values 2402 to 65534 shall not be sent
    the value 65535 (0xFFFF) shall indicate an invalid value

*/
typedef OSUINT16 MaxTimetoChange;

EXTERN int asn1PE_MaxTimetoChange (OSCTXT* pctxt, MaxTimetoChange value);

EXTERN int asn1PD_MaxTimetoChange (OSCTXT* pctxt, MaxTimetoChange* pvalue);

EXTERN void asn1Print_MaxTimetoChange 
   (const char* name, const MaxTimetoChange* pvalue);

EXTERN int asn1PrtToStrm_MaxTimetoChange (OSCTXT *pctxt, 
   const char* name, const MaxTimetoChange* pvalue);

/**************************************************************/
/*                                                            */
/*  MinTimetoChange                                           */
/*                                                            */
/**************************************************************/
/*
MinTimetoChange ::= INTEGER (0..2402)
    Unsigned units of 0.1 seconds, in 2 octets
    the value 2401 shall indicate 'forever'
    the values 2402 to 32766 shall not be sent
    the value 32767(0x7FFF) shall indicate an invalid value
    Note that:
    The MSB is used as a flag and set to one to
    indicate that the value does not count down.
    Under this condition the movement phase may end
    immediately if certain condition are meet.

*/
typedef OSUINT16 MinTimetoChange;

EXTERN int asn1PE_MinTimetoChange (OSCTXT* pctxt, MinTimetoChange value);

EXTERN int asn1PD_MinTimetoChange (OSCTXT* pctxt, MinTimetoChange* pvalue);

EXTERN void asn1Print_MinTimetoChange 
   (const char* name, const MinTimetoChange* pvalue);

EXTERN int asn1PrtToStrm_MinTimetoChange (OSCTXT *pctxt, 
   const char* name, const MinTimetoChange* pvalue);

/**************************************************************/
/*                                                            */
/*  Minute                                                    */
/*                                                            */
/**************************************************************/
/*
Minute ::= INTEGER (0..255)
    BCD coding of Minute of an Hour, in 1 octet 
    values above a combined BCD value of 59 (>59)
    (i.e. 0110 0000) shall not be sent
    except that value 255 (0xFF) shall indicate an invalid value

*/
typedef OSUINT8 Minute;

EXTERN int asn1PE_Minute (OSCTXT* pctxt, Minute value);

EXTERN int asn1PD_Minute (OSCTXT* pctxt, Minute* pvalue);

EXTERN void asn1Print_Minute (const char* name, const Minute* pvalue);

EXTERN int asn1PrtToStrm_Minute (OSCTXT *pctxt, 
   const char* name, const Minute* pvalue);

/**************************************************************/
/*                                                            */
/*  MinutesAngle                                              */
/*                                                            */
/**************************************************************/
/*
MinutesAngle ::= INTEGER (0..59)
    Unsigned units of minutes of an angle, in 1 octet 
    values above 59 shall not be sent
    except that value 255 (0xFF) shall indicate an invalid value

*/
typedef OSUINT8 MinutesAngle;

EXTERN int asn1PE_MinutesAngle (OSCTXT* pctxt, MinutesAngle value);

EXTERN int asn1PD_MinutesAngle (OSCTXT* pctxt, MinutesAngle* pvalue);

EXTERN void asn1Print_MinutesAngle (const char* name, const MinutesAngle* pvalue);

EXTERN int asn1PrtToStrm_MinutesAngle (OSCTXT *pctxt, 
   const char* name, const MinutesAngle* pvalue);

/**************************************************************/
/*                                                            */
/*  Month                                                     */
/*                                                            */
/**************************************************************/
/*
Month ::= INTEGER (1..255)
    BCD coding of Month of a year, in 1 octet
    values above a combined BCD value of 12 (>12)
    (i.e. 0001 0011) shall not be sent
    except that value 255 (0xFF) shall indicate an invalid value

*/
typedef OSUINT8 Month;

EXTERN int asn1PE_Month (OSCTXT* pctxt, Month value);

EXTERN int asn1PD_Month (OSCTXT* pctxt, Month* pvalue);

EXTERN void asn1Print_Month (const char* name, const Month* pvalue);

EXTERN int asn1PrtToStrm_Month (OSCTXT *pctxt, const char* name, const Month* pvalue);

/**************************************************************/
/*                                                            */
/*  MsgCount                                                  */
/*                                                            */
/**************************************************************/
/*
MsgCount ::= INTEGER (0..255)
    a count value which is incremented with each use
    the next value after 255 shall be one
    value 0 (0x00) shall indicate that MsgCount is not available

*/
typedef OSUINT8 AddGrpB_MsgCount;

EXTERN int asn1PE_AddGrpB_MsgCount (OSCTXT* pctxt, AddGrpB_MsgCount value);

EXTERN int asn1PD_AddGrpB_MsgCount (OSCTXT* pctxt, AddGrpB_MsgCount* pvalue);

EXTERN void asn1Print_AddGrpB_MsgCount 
   (const char* name, const AddGrpB_MsgCount* pvalue);

EXTERN int asn1PrtToStrm_AddGrpB_MsgCount (OSCTXT *pctxt, 
   const char* name, const AddGrpB_MsgCount* pvalue);

/**************************************************************/
/*                                                            */
/*  Second                                                    */
/*                                                            */
/**************************************************************/
/*
Second ::= INTEGER (0..60)
    BCD coding of a second of time, in 1 octet 
    values above a combined BCD value of 60
    (i.e. 0110 0000) shall not be sent
    except that value 255 (0xFF) shall indicate an invalid value

*/
typedef OSUINT8 Second;

EXTERN int asn1PE_Second (OSCTXT* pctxt, Second value);

EXTERN int asn1PD_Second (OSCTXT* pctxt, Second* pvalue);

EXTERN void asn1Print_Second (const char* name, const Second* pvalue);

EXTERN int asn1PrtToStrm_Second (OSCTXT *pctxt, 
   const char* name, const Second* pvalue);

/**************************************************************/
/*                                                            */
/*  SecondsAngle                                              */
/*                                                            */
/**************************************************************/
/*
SecondsAngle ::= INTEGER (0..5999)
    Unsigned units of 1/100th seconds of angle, in 2 octets
    values from 6000 to 65534 shall not be sent
    the value 65535 (0xFFFF) shall indicate an invalid value

*/
typedef OSUINT16 SecondsAngle;

EXTERN int asn1PE_SecondsAngle (OSCTXT* pctxt, SecondsAngle value);

EXTERN int asn1PD_SecondsAngle (OSCTXT* pctxt, SecondsAngle* pvalue);

EXTERN void asn1Print_SecondsAngle (const char* name, const SecondsAngle* pvalue);

EXTERN int asn1PrtToStrm_SecondsAngle (OSCTXT *pctxt, 
   const char* name, const SecondsAngle* pvalue);

/**************************************************************/
/*                                                            */
/*  SummerTime                                                */
/*                                                            */
/**************************************************************/
/*
SummerTime ::= ENUMERATED { notInSummerTime(0), inSummerTime(1) }
    Encoding as per above, in 1 bit

*/
typedef enum {
   notInSummerTime = 0,
   inSummerTime = 1
} SummerTime_Root;

typedef OSUINT32 SummerTime;

EXTERN int asn1PE_SummerTime (OSCTXT* pctxt, SummerTime value);

EXTERN int asn1PD_SummerTime (OSCTXT* pctxt, SummerTime* pvalue);

EXTERN void asn1Print_SummerTime (const char* name, const SummerTime* pvalue);

EXTERN int asn1PrtToStrm_SummerTime (OSCTXT *pctxt, 
   const char* name, const SummerTime* pvalue);

EXTERN const OSUTF8CHAR* SummerTime_ToString (OSINT32 value);

EXTERN int SummerTime_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, SummerTime* pvalue);

EXTERN int SummerTime_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, SummerTime* pvalue);

/**************************************************************/
/*                                                            */
/*  TenthSecond                                               */
/*                                                            */
/**************************************************************/
/*
TenthSecond ::= INTEGER (0..9)
    Unsigned units of 100 milliseconds, in 1 octet
    values from 10 to 254 shall not be sent
    the value 255 (0xFF) shall indicate an invalid value

*/
typedef OSUINT8 TenthSecond;

EXTERN int asn1PE_TenthSecond (OSCTXT* pctxt, TenthSecond value);

EXTERN int asn1PD_TenthSecond (OSCTXT* pctxt, TenthSecond* pvalue);

EXTERN void asn1Print_TenthSecond (const char* name, const TenthSecond* pvalue);

EXTERN int asn1PrtToStrm_TenthSecond (OSCTXT *pctxt, 
   const char* name, const TenthSecond* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeRemaining                                             */
/*                                                            */
/**************************************************************/
/*
TimeRemaining ::= INTEGER (0..9001)
     Unsigned units of 0.1 seconds, spanning 15 minutes, in 2 octets
     the value 9001 shall indicate 'forever'
     values from 9002 to 65534 shall not be sent
     the value 65535 (0xFFFF) shall indicate an invalid value

*/
typedef OSUINT16 TimeRemaining;

EXTERN int asn1PE_TimeRemaining (OSCTXT* pctxt, TimeRemaining value);

EXTERN int asn1PD_TimeRemaining (OSCTXT* pctxt, TimeRemaining* pvalue);

EXTERN void asn1Print_TimeRemaining (const char* name, const TimeRemaining* pvalue);

EXTERN int asn1PrtToStrm_TimeRemaining (OSCTXT *pctxt, 
   const char* name, const TimeRemaining* pvalue);

/**************************************************************/
/*                                                            */
/*  Year                                                      */
/*                                                            */
/**************************************************************/
/*
Year ::= INTEGER (1..65535)
    BCD coding of four digits of the year A.D. in 2 octets 
    values with nibble values between 1010 and 1111 shall not be sent
    except that the value 65535 (0xFFFF) shall indicate an invalid value

*/
typedef OSUINT16 Year;

EXTERN int asn1PE_Year (OSCTXT* pctxt, Year value);

EXTERN int asn1PD_Year (OSCTXT* pctxt, Year* pvalue);

EXTERN void asn1Print_Year (const char* name, const Year* pvalue);

EXTERN int asn1PrtToStrm_Year (OSCTXT *pctxt, const char* name, const Year* pvalue);

/**************************************************************/
/*                                                            */
/*  LatitudeDMS2                                              */
/*                                                            */
/**************************************************************/
/*
LatitudeDMS2 ::= SEQUENCE {
   d [0] DegreesLat, -- units of degrees
   m [1] MinutesAngle, -- units of minutes
   s [2] SecondsAngle -- units of 1/100th seconds
}
      total size of 4 octets (32 bits) when implicit encoding is used

*/
typedef struct EXTERN LatitudeDMS2 {
   DegreesLat d;
   MinutesAngle m_;
   SecondsAngle s;
} LatitudeDMS2;

EXTERN int asn1PE_LatitudeDMS2 (OSCTXT* pctxt, LatitudeDMS2* pvalue);

EXTERN int asn1PD_LatitudeDMS2 (OSCTXT* pctxt, LatitudeDMS2* pvalue);

EXTERN void asn1Print_LatitudeDMS2 (const char* name, const LatitudeDMS2* pvalue);

EXTERN int asn1PrtToStrm_LatitudeDMS2 (OSCTXT *pctxt, 
   const char* name, const LatitudeDMS2* pvalue);

/**************************************************************/
/*                                                            */
/*  LongitudeDMS2                                             */
/*                                                            */
/**************************************************************/
/*
LongitudeDMS2 ::= SEQUENCE {
   d [0] DegreesLong, -- units of degrees
   m [1] MinutesAngle, -- units of minutes
   s [2] SecondsAngle -- units of 1/100th seconds
}
      total size of 5 octets (40 bits) when implicit encoding is used

*/
typedef struct EXTERN LongitudeDMS2 {
   DegreesLong d;
   MinutesAngle m_;
   SecondsAngle s;
} LongitudeDMS2;

EXTERN int asn1PE_LongitudeDMS2 (OSCTXT* pctxt, LongitudeDMS2* pvalue);

EXTERN int asn1PD_LongitudeDMS2 (OSCTXT* pctxt, LongitudeDMS2* pvalue);

EXTERN void asn1Print_LongitudeDMS2 (const char* name, const LongitudeDMS2* pvalue);

EXTERN int asn1PrtToStrm_LongitudeDMS2 (OSCTXT *pctxt, 
   const char* name, const LongitudeDMS2* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LLdms_48b                                            */
/*                                                            */
/**************************************************************/
/*
Node-LLdms-48b ::= SEQUENCE {
   lon [0] LongitudeDMS,
   lat [1] LatitudeDMS
}
*/
typedef struct EXTERN Node_LLdms_48b {
   LongitudeDMS lon;
   LatitudeDMS lat;
} Node_LLdms_48b;

EXTERN int asn1PE_Node_LLdms_48b (OSCTXT* pctxt, Node_LLdms_48b* pvalue);

EXTERN int asn1PD_Node_LLdms_48b (OSCTXT* pctxt, Node_LLdms_48b* pvalue);

EXTERN void asn1Print_Node_LLdms_48b (const char* name, const Node_LLdms_48b* pvalue);

EXTERN int asn1PrtToStrm_Node_LLdms_48b (OSCTXT *pctxt, 
   const char* name, const Node_LLdms_48b* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LLdms_80b                                            */
/*                                                            */
/**************************************************************/
/*
Node-LLdms-80b ::= SEQUENCE {
   lon [0] LongitudeDMS2,
   lat [1] LatitudeDMS2
}
*/
typedef struct EXTERN Node_LLdms_80b {
   LongitudeDMS2 lon;
   LatitudeDMS2 lat;
} Node_LLdms_80b;

EXTERN int asn1PE_Node_LLdms_80b (OSCTXT* pctxt, Node_LLdms_80b* pvalue);

EXTERN int asn1PD_Node_LLdms_80b (OSCTXT* pctxt, Node_LLdms_80b* pvalue);

EXTERN void asn1Print_Node_LLdms_80b (const char* name, const Node_LLdms_80b* pvalue);

EXTERN int asn1PrtToStrm_Node_LLdms_80b (OSCTXT *pctxt, 
   const char* name, const Node_LLdms_80b* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneDataAttribute_addGrpB                                 */
/*                                                            */
/**************************************************************/
/*
LaneDataAttribute-addGrpB ::= SEQUENCE {

   ...
}
*/
typedef struct EXTERN LaneDataAttribute_addGrpB {
   OSRTDList extElem1;
} LaneDataAttribute_addGrpB;

EXTERN int asn1PE_LaneDataAttribute_addGrpB (OSCTXT* pctxt, LaneDataAttribute_addGrpB* pvalue);

EXTERN int asn1PD_LaneDataAttribute_addGrpB (OSCTXT* pctxt, LaneDataAttribute_addGrpB* pvalue);

EXTERN void asn1Print_LaneDataAttribute_addGrpB 
   (const char* name, const LaneDataAttribute_addGrpB* pvalue);

EXTERN int asn1PrtToStrm_LaneDataAttribute_addGrpB (OSCTXT *pctxt, 
   const char* name, const LaneDataAttribute_addGrpB* pvalue);

EXTERN int asn1Init_LaneDataAttribute_addGrpB (LaneDataAttribute_addGrpB* pvalue);

EXTERN void asn1Free_LaneDataAttribute_addGrpB (OSCTXT *pctxt, 
   LaneDataAttribute_addGrpB* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementEvent_addGrpB                                     */
/*                                                            */
/**************************************************************/
/*
MovementEvent-addGrpB ::= SEQUENCE {
   -- A set of countdown style time-to-change values
   -- all in units of 0.1 seconds and following
   -- the naming of the base DSRC standard
   startTime [0] TimeRemaining OPTIONAL,
               -- When this phase 1st started
   minEndTime [1] MinTimetoChange,
               -- Expected shortest end time
   maxEndTime [2] MaxTimetoChange OPTIONAL,
               -- Expected longest end time
   likelyTime [3] TimeRemaining OPTIONAL,
               -- Best predicted value based on other data             
   confidence [4] TimeIntervalConfidence OPTIONAL,
               -- Applies to above time element only
   nextTime [5] TimeRemaining OPTIONAL,
   ...
}
*/
typedef struct EXTERN MovementEvent_addGrpB {
   struct {
      unsigned startTimePresent : 1;
      unsigned maxEndTimePresent : 1;
      unsigned likelyTimePresent : 1;
      unsigned confidencePresent : 1;
      unsigned nextTimePresent : 1;
   } m;
   TimeRemaining startTime;
   MinTimetoChange minEndTime;
   MaxTimetoChange maxEndTime;
   TimeRemaining likelyTime;
   TimeIntervalConfidence confidence;
   TimeRemaining nextTime;
   OSRTDList extElem1;
} MovementEvent_addGrpB;

EXTERN int asn1PE_MovementEvent_addGrpB (OSCTXT* pctxt, MovementEvent_addGrpB* pvalue);

EXTERN int asn1PD_MovementEvent_addGrpB (OSCTXT* pctxt, MovementEvent_addGrpB* pvalue);

EXTERN void asn1Print_MovementEvent_addGrpB 
   (const char* name, const MovementEvent_addGrpB* pvalue);

EXTERN int asn1PrtToStrm_MovementEvent_addGrpB (OSCTXT *pctxt, 
   const char* name, const MovementEvent_addGrpB* pvalue);

EXTERN int asn1Init_MovementEvent_addGrpB (MovementEvent_addGrpB* pvalue);

EXTERN void asn1Free_MovementEvent_addGrpB (OSCTXT *pctxt, 
   MovementEvent_addGrpB* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeOffsetPointXY_addGrpB                                 */
/*                                                            */
/**************************************************************/
/*
NodeOffsetPointXY-addGrpB ::= CHOICE {
   -- Full position expressed in units of 0.01 seconds
   posA [0] Node-LLdms-48b,
   -- Full position expressed in multiple elements in
   -- an DD.MM.SS.sss style format
   posB [1] Node-LLdms-80b,
   ...
}
*/
/* Choice tag constants */

#define T_NodeOffsetPointXY_addGrpB_posA 1
#define T_NodeOffsetPointXY_addGrpB_posB 2
#define T_NodeOffsetPointXY_addGrpB_extElem1 3

typedef struct EXTERN NodeOffsetPointXY_addGrpB {
   OSINT32 t;
   union {
      /* t = 1 */
      Node_LLdms_48b *posA;
      /* t = 2 */
      Node_LLdms_80b *posB;
      /* t = 3 */
      ASN1OpenType *extElem1;
   } u;
} NodeOffsetPointXY_addGrpB;

EXTERN int asn1PE_NodeOffsetPointXY_addGrpB (OSCTXT* pctxt, NodeOffsetPointXY_addGrpB* pvalue);

EXTERN int asn1PD_NodeOffsetPointXY_addGrpB (OSCTXT* pctxt, NodeOffsetPointXY_addGrpB* pvalue);

EXTERN void asn1Print_NodeOffsetPointXY_addGrpB 
   (const char* name, const NodeOffsetPointXY_addGrpB* pvalue);

EXTERN int asn1PrtToStrm_NodeOffsetPointXY_addGrpB (OSCTXT *pctxt, 
   const char* name, const NodeOffsetPointXY_addGrpB* pvalue);

EXTERN int asn1Init_NodeOffsetPointXY_addGrpB (NodeOffsetPointXY_addGrpB* pvalue);

EXTERN void asn1Free_NodeOffsetPointXY_addGrpB (OSCTXT *pctxt, 
   NodeOffsetPointXY_addGrpB* pvalue);

/**************************************************************/
/*                                                            */
/*  Position3D_addGrpB                                        */
/*                                                            */
/**************************************************************/
/*
Position3D-addGrpB ::= SEQUENCE {
   latitude [0] LatitudeDMS2,
   longitude [1] LongitudeDMS2,
   elevation [2] Elevation,
   ...
}
*/
typedef struct EXTERN Position3D_addGrpB {
   LatitudeDMS2 latitude;
   LongitudeDMS2 longitude;
   AddGrpB_Elevation elevation;
   OSRTDList extElem1;
} Position3D_addGrpB;

EXTERN int asn1PE_Position3D_addGrpB (OSCTXT* pctxt, Position3D_addGrpB* pvalue);

EXTERN int asn1PD_Position3D_addGrpB (OSCTXT* pctxt, Position3D_addGrpB* pvalue);

EXTERN void asn1Print_Position3D_addGrpB 
   (const char* name, const Position3D_addGrpB* pvalue);

EXTERN int asn1PrtToStrm_Position3D_addGrpB (OSCTXT *pctxt, 
   const char* name, const Position3D_addGrpB* pvalue);

EXTERN int asn1Init_Position3D_addGrpB (Position3D_addGrpB* pvalue);

EXTERN void asn1Free_Position3D_addGrpB (OSCTXT *pctxt, Position3D_addGrpB* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeMark                                                  */
/*                                                            */
/**************************************************************/
/*
TimeMark ::= SEQUENCE {
   year [0] Year, -- BCD coding of A.D.    2 octets
   month [1] Month, -- BCD coding of Month,  1 octet
   day [2] Day, -- BCD coding of Day,    1 octet
   summerTime [3] SummerTime,
   holiday [4] Holiday,
   dayofWeek [5] DayOfWeek,
   hour [6] Hour, -- BCD coding of Hour,   1 octet
   minute [7] Minute, -- BCD coding of Minute, 1 octet
   second [8] Second, -- BCD coding of Second, 1 octet
   tenthSecond [9] TenthSecond -- units of 100 millisecond, 1 octet
}
*/
typedef struct EXTERN AddGrpB_TimeMark {
   Year year;
   Month month;
   Day day;
   SummerTime summerTime;
   Holiday holiday;
   DayOfWeek dayofWeek;
   Hour hour;
   Minute minute;
   Second second;
   TenthSecond tenthSecond;
} AddGrpB_TimeMark;

EXTERN int asn1PE_AddGrpB_TimeMark (OSCTXT* pctxt, AddGrpB_TimeMark* pvalue);

EXTERN int asn1PD_AddGrpB_TimeMark (OSCTXT* pctxt, AddGrpB_TimeMark* pvalue);

EXTERN void asn1Print_AddGrpB_TimeMark 
   (const char* name, const AddGrpB_TimeMark* pvalue);

EXTERN int asn1PrtToStrm_AddGrpB_TimeMark (OSCTXT *pctxt, 
   const char* name, const AddGrpB_TimeMark* pvalue);

#ifdef __cplusplus
}
#endif

#endif
