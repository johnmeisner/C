/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.7.0, Date: 25-May-2023.
 *
 * Command:  asn1c CooperativeControlMsg-v1-ph.asn J2735-AddGrpB.asn J2735-AddGrpC.asn J2735-BasicSafetyMessage-v4.asn J2735-CommonSafetyRequest.asn J2735-Common-v7.asn J2735-EmergencyVehicleAlert.asn J2735-IntersectionCollision.asn J2735-ITIS.asn J2735-MapData-v1.asn J2735-MessageFrame-v5.asn J2735-NMEAcorrections.asn J2735-NTCIP.asn J2735-PersonalSafetyMessage.asn J2735-ProbeDataManagement.asn J2735-ProbeVehicleData.asn J2735-REGION.asn J2735-RoadSideAlert.asn J2735-RTCMcorrections.asn J2735-SignalRequestMessage.asn J2735-SignalStatusMessage.asn J2735-SPAT-v2.asn J2735-TestMessage00.asn J2735-TestMessage01.asn J2735-TestMessage02.asn J2735-TestMessage03.asn J2735-TestMessage04.asn J2735-TestMessage05.asn J2735-TestMessage06.asn J2735-TestMessage07.asn J2735-TestMessage08.asn J2735-TestMessage09.asn J2735-TestMessage10.asn J2735-TestMessage11.asn J2735-TestMessage12.asn J2735-TestMessage13.asn J2735-TestMessage14.asn J2735-TestMessage15.asn J2735-TravelerInformation-v2.asn MnvrSharingCoordMsg-v1-ph.asn PersonalSafetyMsg2-v1-ph.asn ProbeDataConfig-v0.30.asn ProbeDataReport-v0.30.asn RoadGeoAttributes-v2-ph.asn RoadSafetyMsg-v1-ph.asn RoadWeatherMessage.asn SensorDataSharingMsg-v1-ph.asn SignalControlAndPrioritizationRequest-v1-ph.asn SignalControlAndPrioritizationStatus-v1-ph.asn TollAdvertisementMsg-v0.10-ph.asn TollUsageAckMsg-v0.10-ph.asn TollUsageMsg-v0.10-ph.asn TrafficSignalPhaseAndTiming-v1-ph.asn -c -per -compact
 */
#ifndef PROBEVEHICLEDATA_H
#define PROBEVEHICLEDATA_H

#ifdef __cplusplus
extern "C" {
#endif

#include "rtkey.h"
#include "rtpersrc/asn1per.h"

#include "NTCIP.h"
#include "ITIS.h"

/**
 * Header file for ASN.1 module ProbeVehicleData
 */
#include "rtxsrc/rtxEnum.h"
/**************************************************************/
/*                                                            */
/*  AccelerationConfidence                                    */
/*                                                            */
/**************************************************************/
/*
AccelerationConfidence ::= ENUMERATED { unavailable(0), accl-100-00(1), accl-010-00(2), accl-005-00(3), accl-001-00(4), accl-000-10(5), accl-000-05(6), accl-000-01(7) }
      Encoded as a 3 bit value

*/
typedef enum {
   unavailable_25 = 0,
   accl_100_00 = 1,
   accl_010_00 = 2,
   accl_005_00 = 3,
   accl_001_00 = 4,
   accl_000_10 = 5,
   accl_000_05 = 6,
   accl_000_01 = 7
} AccelerationConfidence_Root;

typedef OSUINT8 AccelerationConfidence;

EXTERN int asn1PE_AccelerationConfidence (OSCTXT* pctxt, AccelerationConfidence value);

EXTERN int asn1PD_AccelerationConfidence (OSCTXT* pctxt, AccelerationConfidence* pvalue);

EXTERN extern const OSEnumItem AccelerationConfidence_ENUMTAB[];
#define AccelerationConfidence_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* AccelerationConfidence_ToString (OSINT32 value);

EXTERN int AccelerationConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, AccelerationConfidence* pvalue);

EXTERN int AccelerationConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, AccelerationConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  BrakeAppliedPressure                                      */
/*                                                            */
/**************************************************************/
/*
BrakeAppliedPressure ::= ENUMERATED { unavailable(0), minPressure(1), bkLvl-2(2), bkLvl-3(3), bkLvl-4(4), bkLvl-5(5), bkLvl-6(6), bkLvl-7(7), bkLvl-8(8), bkLvl-9(9), bkLvl-10(10), bkLvl-11(11), bkLvl-12(12), bkLvl-13(13), bkLvl-14(14), maxPressure(15) }
       Encoded as a 4 bit value

*/
typedef enum {
   unavailable_26 = 0,
   minPressure = 1,
   bkLvl_2 = 2,
   bkLvl_3 = 3,
   bkLvl_4 = 4,
   bkLvl_5 = 5,
   bkLvl_6 = 6,
   bkLvl_7 = 7,
   bkLvl_8 = 8,
   bkLvl_9 = 9,
   bkLvl_10 = 10,
   bkLvl_11 = 11,
   bkLvl_12 = 12,
   bkLvl_13 = 13,
   bkLvl_14 = 14,
   maxPressure = 15
} BrakeAppliedPressure_Root;

typedef OSUINT8 BrakeAppliedPressure;

EXTERN int asn1PE_BrakeAppliedPressure (OSCTXT* pctxt, BrakeAppliedPressure value);

EXTERN int asn1PD_BrakeAppliedPressure (OSCTXT* pctxt, BrakeAppliedPressure* pvalue);

EXTERN extern const OSEnumItem BrakeAppliedPressure_ENUMTAB[];
#define BrakeAppliedPressure_ENUMTABSIZE 16

EXTERN const OSUTF8CHAR* BrakeAppliedPressure_ToString (OSINT32 value);

EXTERN int BrakeAppliedPressure_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, BrakeAppliedPressure* pvalue);

EXTERN int BrakeAppliedPressure_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, BrakeAppliedPressure* pvalue);

/**************************************************************/
/*                                                            */
/*  DrivingWheelAngle                                         */
/*                                                            */
/**************************************************************/
/*
DrivingWheelAngle ::= INTEGER (-128..127)
    LSB units of 0.3333 degrees.
    a range of 42.33 degrees each way

*/
typedef OSINT8 DrivingWheelAngle;

EXTERN int asn1PE_DrivingWheelAngle (OSCTXT* pctxt, DrivingWheelAngle value);

EXTERN int asn1PD_DrivingWheelAngle (OSCTXT* pctxt, DrivingWheelAngle* pvalue);

/**************************************************************/
/*                                                            */
/*  AxleLocation                                              */
/*                                                            */
/**************************************************************/
/*
AxleLocation ::= INTEGER (0..255)
*/
typedef OSUINT8 AxleLocation;

EXTERN int asn1PE_AxleLocation (OSCTXT* pctxt, AxleLocation value);

EXTERN int asn1PD_AxleLocation (OSCTXT* pctxt, AxleLocation* pvalue);

/**************************************************************/
/*                                                            */
/*  AxleWeight                                                */
/*                                                            */
/**************************************************************/
/*
AxleWeight ::= INTEGER (0..64255)
*/
typedef OSUINT16 AxleWeight;

EXTERN int asn1PE_AxleWeight (OSCTXT* pctxt, AxleWeight value);

EXTERN int asn1PD_AxleWeight (OSCTXT* pctxt, AxleWeight* pvalue);

/**************************************************************/
/*                                                            */
/*  CargoWeight                                               */
/*                                                            */
/**************************************************************/
/*
CargoWeight ::= INTEGER (0..64255)
*/
typedef OSUINT16 CargoWeight;

EXTERN int asn1PE_CargoWeight (OSCTXT* pctxt, CargoWeight value);

EXTERN int asn1PD_CargoWeight (OSCTXT* pctxt, CargoWeight* pvalue);

/**************************************************************/
/*                                                            */
/*  DriveAxleLiftAirPressure                                  */
/*                                                            */
/**************************************************************/
/*
DriveAxleLiftAirPressure ::= INTEGER (0..1000)
*/
typedef OSUINT16 DriveAxleLiftAirPressure;

EXTERN int asn1PE_DriveAxleLiftAirPressure (OSCTXT* pctxt, DriveAxleLiftAirPressure value);

EXTERN int asn1PD_DriveAxleLiftAirPressure (OSCTXT* pctxt, DriveAxleLiftAirPressure* pvalue);

/**************************************************************/
/*                                                            */
/*  DriveAxleLocation                                         */
/*                                                            */
/**************************************************************/
/*
DriveAxleLocation ::= INTEGER (0..255)
*/
typedef OSUINT8 DriveAxleLocation;

EXTERN int asn1PE_DriveAxleLocation (OSCTXT* pctxt, DriveAxleLocation value);

EXTERN int asn1PD_DriveAxleLocation (OSCTXT* pctxt, DriveAxleLocation* pvalue);

/**************************************************************/
/*                                                            */
/*  DriveAxleLubePressure                                     */
/*                                                            */
/**************************************************************/
/*
DriveAxleLubePressure ::= INTEGER (0..250)
*/
typedef OSUINT8 DriveAxleLubePressure;

EXTERN int asn1PE_DriveAxleLubePressure (OSCTXT* pctxt, DriveAxleLubePressure value);

EXTERN int asn1PD_DriveAxleLubePressure (OSCTXT* pctxt, DriveAxleLubePressure* pvalue);

/**************************************************************/
/*                                                            */
/*  DriveAxleTemperature                                      */
/*                                                            */
/**************************************************************/
/*
DriveAxleTemperature ::= INTEGER (-40..210)
*/
typedef OSINT16 DriveAxleTemperature;

EXTERN int asn1PE_DriveAxleTemperature (OSCTXT* pctxt, DriveAxleTemperature value);

EXTERN int asn1PD_DriveAxleTemperature (OSCTXT* pctxt, DriveAxleTemperature* pvalue);

/**************************************************************/
/*                                                            */
/*  SteeringAxleLubePressure                                  */
/*                                                            */
/**************************************************************/
/*
SteeringAxleLubePressure ::= INTEGER (0..250)
*/
typedef OSUINT8 SteeringAxleLubePressure;

EXTERN int asn1PE_SteeringAxleLubePressure (OSCTXT* pctxt, SteeringAxleLubePressure value);

EXTERN int asn1PD_SteeringAxleLubePressure (OSCTXT* pctxt, SteeringAxleLubePressure* pvalue);

/**************************************************************/
/*                                                            */
/*  SteeringAxleTemperature                                   */
/*                                                            */
/**************************************************************/
/*
SteeringAxleTemperature ::= INTEGER (-40..210)
*/
typedef OSINT16 SteeringAxleTemperature;

EXTERN int asn1PE_SteeringAxleTemperature (OSCTXT* pctxt, SteeringAxleTemperature value);

EXTERN int asn1PD_SteeringAxleTemperature (OSCTXT* pctxt, SteeringAxleTemperature* pvalue);

/**************************************************************/
/*                                                            */
/*  TireLeakageRate                                           */
/*                                                            */
/**************************************************************/
/*
TireLeakageRate ::= INTEGER (0..64255)
*/
typedef OSUINT16 TireLeakageRate;

EXTERN int asn1PE_TireLeakageRate (OSCTXT* pctxt, TireLeakageRate value);

EXTERN int asn1PD_TireLeakageRate (OSCTXT* pctxt, TireLeakageRate* pvalue);

/**************************************************************/
/*                                                            */
/*  TireLocation                                              */
/*                                                            */
/**************************************************************/
/*
TireLocation ::= INTEGER (0..255)
*/
typedef OSUINT8 TireLocation;

EXTERN int asn1PE_TireLocation (OSCTXT* pctxt, TireLocation value);

EXTERN int asn1PD_TireLocation (OSCTXT* pctxt, TireLocation* pvalue);

/**************************************************************/
/*                                                            */
/*  TirePressureThresholdDetection                            */
/*                                                            */
/**************************************************************/
/*
TirePressureThresholdDetection ::= ENUMERATED { noData(0), overPressure(1), noWarningPressure(2), underPressure(3), extremeUnderPressure(4), undefined(5), errorIndicator(6), notAvailable(7) }
       Encoded as a 3 bit value

*/
typedef enum {
   noData = 0,
   overPressure = 1,
   noWarningPressure = 2,
   underPressure = 3,
   extremeUnderPressure = 4,
   undefined = 5,
   errorIndicator = 6,
   notAvailable = 7
} TirePressureThresholdDetection_Root;

typedef OSUINT8 TirePressureThresholdDetection;

EXTERN int asn1PE_TirePressureThresholdDetection (OSCTXT* pctxt, TirePressureThresholdDetection value);

EXTERN int asn1PD_TirePressureThresholdDetection (OSCTXT* pctxt, TirePressureThresholdDetection* pvalue);

EXTERN extern const OSEnumItem TirePressureThresholdDetection_ENUMTAB[];
#define TirePressureThresholdDetection_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* TirePressureThresholdDetection_ToString (OSINT32 value);

EXTERN int TirePressureThresholdDetection_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, TirePressureThresholdDetection* pvalue);

EXTERN int TirePressureThresholdDetection_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      TirePressureThresholdDetection* pvalue);

/**************************************************************/
/*                                                            */
/*  TirePressure                                              */
/*                                                            */
/**************************************************************/
/*
TirePressure ::= INTEGER (0..250)
*/
typedef OSUINT8 TirePressure;

EXTERN int asn1PE_TirePressure (OSCTXT* pctxt, TirePressure value);

EXTERN int asn1PD_TirePressure (OSCTXT* pctxt, TirePressure* pvalue);

/**************************************************************/
/*                                                            */
/*  TireTemp                                                  */
/*                                                            */
/**************************************************************/
/*
TireTemp ::= INTEGER (-8736..55519)
*/
typedef OSINT32 TireTemp;

EXTERN int asn1PE_TireTemp (OSCTXT* pctxt, TireTemp value);

EXTERN int asn1PD_TireTemp (OSCTXT* pctxt, TireTemp* pvalue);

/**************************************************************/
/*                                                            */
/*  WheelEndElectFault                                        */
/*                                                            */
/**************************************************************/
/*
WheelEndElectFault ::= ENUMERATED { isOk(0), isNotDefined(1), isError(2), isNotSupported(3) }
*/
typedef enum {
   isOk = 0,
   isNotDefined = 1,
   isError = 2,
   isNotSupported = 3
} WheelEndElectFault_Root;

typedef OSUINT8 WheelEndElectFault;

EXTERN int asn1PE_WheelEndElectFault (OSCTXT* pctxt, WheelEndElectFault value);

EXTERN int asn1PD_WheelEndElectFault (OSCTXT* pctxt, WheelEndElectFault* pvalue);

EXTERN extern const OSEnumItem WheelEndElectFault_ENUMTAB[];
#define WheelEndElectFault_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* WheelEndElectFault_ToString (OSINT32 value);

EXTERN int WheelEndElectFault_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, WheelEndElectFault* pvalue);

EXTERN int WheelEndElectFault_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, WheelEndElectFault* pvalue);

/**************************************************************/
/*                                                            */
/*  WheelSensorStatus                                         */
/*                                                            */
/**************************************************************/
/*
WheelSensorStatus ::= ENUMERATED { off(0), on(1), notDefined(2), notSupported(3) }
*/
typedef enum {
   off_6 = 0,
   on_5 = 1,
   notDefined = 2,
   notSupported = 3
} WheelSensorStatus_Root;

typedef OSUINT8 WheelSensorStatus;

EXTERN int asn1PE_WheelSensorStatus (OSCTXT* pctxt, WheelSensorStatus value);

EXTERN int asn1PD_WheelSensorStatus (OSCTXT* pctxt, WheelSensorStatus* pvalue);

EXTERN extern const OSEnumItem WheelSensorStatus_ENUMTAB[];
#define WheelSensorStatus_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* WheelSensorStatus_ToString (OSINT32 value);

EXTERN int WheelSensorStatus_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, WheelSensorStatus* pvalue);

EXTERN int WheelSensorStatus_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, WheelSensorStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeSegmentNumber                                        */
/*                                                            */
/**************************************************************/
/*
ProbeSegmentNumber ::= INTEGER (0..32767)
    value determined by local device
    as per standard

*/
typedef OSUINT16 ProbeSegmentNumber;

EXTERN int asn1PE_ProbeSegmentNumber (OSCTXT* pctxt, ProbeSegmentNumber value);

EXTERN int asn1PD_ProbeSegmentNumber (OSCTXT* pctxt, ProbeSegmentNumber* pvalue);

/**************************************************************/
/*                                                            */
/*  RainSensor                                                */
/*                                                            */
/**************************************************************/
/*
RainSensor ::= ENUMERATED { none(0), lightMist(1), heavyMist(2), lightRainOrDrizzle(3), rain(4), moderateRain(5), heavyRain(6), heavyDownpour(7) }
*/
typedef enum {
   none_3 = 0,
   lightMist = 1,
   heavyMist = 2,
   lightRainOrDrizzle = 3,
   rain = 4,
   moderateRain = 5,
   heavyRain = 6,
   heavyDownpour = 7
} RainSensor_Root;

typedef OSUINT8 RainSensor;

EXTERN int asn1PE_RainSensor (OSCTXT* pctxt, RainSensor value);

EXTERN int asn1PD_RainSensor (OSCTXT* pctxt, RainSensor* pvalue);

EXTERN extern const OSEnumItem RainSensor_ENUMTAB[];
#define RainSensor_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* RainSensor_ToString (OSINT32 value);

EXTERN int RainSensor_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, RainSensor* pvalue);

EXTERN int RainSensor_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, RainSensor* pvalue);

/**************************************************************/
/*                                                            */
/*  SteeringWheelAngleConfidence                              */
/*                                                            */
/**************************************************************/
/*
SteeringWheelAngleConfidence ::= ENUMERATED { unavailable(0), prec2deg(1), prec1deg(2), prec0-02deg(3) }
*/
typedef enum {
   unavailable_27 = 0,
   prec2deg = 1,
   prec1deg = 2,
   prec0_02deg = 3
} SteeringWheelAngleConfidence_Root;

typedef OSUINT8 SteeringWheelAngleConfidence;

EXTERN int asn1PE_SteeringWheelAngleConfidence (OSCTXT* pctxt, SteeringWheelAngleConfidence value);

EXTERN int asn1PD_SteeringWheelAngleConfidence (OSCTXT* pctxt, SteeringWheelAngleConfidence* pvalue);

EXTERN extern const OSEnumItem SteeringWheelAngleConfidence_ENUMTAB[];
#define SteeringWheelAngleConfidence_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* SteeringWheelAngleConfidence_ToString (OSINT32 value);

EXTERN int SteeringWheelAngleConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, SteeringWheelAngleConfidence* pvalue);

EXTERN int SteeringWheelAngleConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      SteeringWheelAngleConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  SteeringWheelAngleRateOfChange                            */
/*                                                            */
/**************************************************************/
/*
SteeringWheelAngleRateOfChange ::= INTEGER (-127..127)
    LSB is 3 degrees per second

*/
typedef OSINT8 SteeringWheelAngleRateOfChange;

EXTERN int asn1PE_SteeringWheelAngleRateOfChange (OSCTXT* pctxt, SteeringWheelAngleRateOfChange value);

EXTERN int asn1PD_SteeringWheelAngleRateOfChange (OSCTXT* pctxt, SteeringWheelAngleRateOfChange* pvalue);

/**************************************************************/
/*                                                            */
/*  SunSensor                                                 */
/*                                                            */
/**************************************************************/
/*
SunSensor ::= INTEGER (0..1000)
    units of watts / m2

*/
typedef OSUINT16 SunSensor;

EXTERN int asn1PE_SunSensor (OSCTXT* pctxt, SunSensor value);

EXTERN int asn1PD_SunSensor (OSCTXT* pctxt, SunSensor* pvalue);

/**************************************************************/
/*                                                            */
/*  ThrottlePosition                                          */
/*                                                            */
/**************************************************************/
/*
ThrottlePosition ::= INTEGER (0..200)
                                       LSB units are 0.5 percent

*/
typedef OSUINT8 ThrottlePosition;

EXTERN int asn1PE_ThrottlePosition (OSCTXT* pctxt, ThrottlePosition value);

EXTERN int asn1PD_ThrottlePosition (OSCTXT* pctxt, ThrottlePosition* pvalue);

/**************************************************************/
/*                                                            */
/*  VINstring                                                 */
/*                                                            */
/**************************************************************/
/*
VINstring ::= OCTET STRING (SIZE (1..17))
    A legal VIN or a shorter value
    to provide an ident of the vehicle
    If a VIN is sent, then IA5 encoding
    shall be used

*/
typedef struct EXTERN VINstring {
   OSUINT32 numocts;
   OSOCTET data[17];
} VINstring;

EXTERN int asn1PE_VINstring (OSCTXT* pctxt, VINstring* pvalue);

EXTERN int asn1PD_VINstring (OSCTXT* pctxt, VINstring* pvalue);

EXTERN int asn1Init_VINstring (VINstring* pvalue);

/**************************************************************/
/*                                                            */
/*  YawRateConfidence                                         */
/*                                                            */
/**************************************************************/
/*
YawRateConfidence ::= ENUMERATED { unavailable(0), degSec-100-00(1), degSec-010-00(2), degSec-005-00(3), degSec-001-00(4), degSec-000-10(5), degSec-000-05(6), degSec-000-01(7) }
    Encoded as a 3 bit value

*/
typedef enum {
   unavailable_28 = 0,
   degSec_100_00 = 1,
   degSec_010_00 = 2,
   degSec_005_00 = 3,
   degSec_001_00 = 4,
   degSec_000_10 = 5,
   degSec_000_05 = 6,
   degSec_000_01 = 7
} YawRateConfidence_Root;

typedef OSUINT8 YawRateConfidence;

EXTERN int asn1PE_YawRateConfidence (OSCTXT* pctxt, YawRateConfidence value);

EXTERN int asn1PD_YawRateConfidence (OSCTXT* pctxt, YawRateConfidence* pvalue);

EXTERN extern const OSEnumItem YawRateConfidence_ENUMTAB[];
#define YawRateConfidence_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* YawRateConfidence_ToString (OSINT32 value);

EXTERN int YawRateConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, YawRateConfidence* pvalue);

EXTERN int YawRateConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, YawRateConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleIdent_vehicleClass                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleIdent'
*/
/* Choice tag constants */

#define T_VehicleIdent_vehicleClass_vGroup 1
#define T_VehicleIdent_vehicleClass_rGroup 2
#define T_VehicleIdent_vehicleClass_rEquip 3

typedef struct EXTERN VehicleIdent_vehicleClass {
   OSINT32 t;
   union {
      /* t = 1 */
      VehicleGroupAffected vGroup;
      /* t = 2 */
      ResponderGroupAffected rGroup;
      /* t = 3 */
      IncidentResponseEquipment rEquip;
   } u;
} VehicleIdent_vehicleClass;

EXTERN int asn1PE_VehicleIdent_vehicleClass (OSCTXT* pctxt, VehicleIdent_vehicleClass* pvalue);

EXTERN int asn1PD_VehicleIdent_vehicleClass (OSCTXT* pctxt, VehicleIdent_vehicleClass* pvalue);

EXTERN int asn1Init_VehicleIdent_vehicleClass (VehicleIdent_vehicleClass* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleIdent                                              */
/*                                                            */
/**************************************************************/
/*
VehicleIdent ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
                  -- a human readable name for debugging use
   vin [1] VINstring OPTIONAL,
                  -- vehicle VIN value
   ownerCode [2] IA5String (SIZE (1..32)) OPTIONAL,
                  -- vehicle owner code
   id [3] EXPLICIT VehicleID OPTIONAL,
                  -- same value used in the BSM
   vehicleType [4] VehicleType OPTIONAL,
   vehicleClass [5] EXPLICIT CHOICE {
      vGroup [0] VehicleGroupAffected,
      rGroup [1] ResponderGroupAffected,
      rEquip [2] IncidentResponseEquipment
   } OPTIONAL,
   ...
}
*/
typedef struct EXTERN VehicleIdent {
   struct {
      OSUINT8 namePresent : 1;
      OSUINT8 vinPresent : 1;
      OSUINT8 ownerCodePresent : 1;
      OSUINT8 idPresent : 1;
      OSUINT8 vehicleTypePresent : 1;
      OSUINT8 vehicleClassPresent : 1;
   } m;
   const char* name;
   VINstring vin;
   const char* ownerCode;
   struct VehicleID *id;
   OSUINT8 vehicleType;
   VehicleIdent_vehicleClass vehicleClass;
   OSRTDList extElem1;
} VehicleIdent;

EXTERN int asn1PE_VehicleIdent (OSCTXT* pctxt, VehicleIdent* pvalue);

EXTERN int asn1PD_VehicleIdent (OSCTXT* pctxt, VehicleIdent* pvalue);

EXTERN int asn1Init_VehicleIdent (VehicleIdent* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_steering                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
typedef struct EXTERN VehicleStatus_steering {
   struct {
      OSUINT8 confidencePresent : 1;
      OSUINT8 ratePresent : 1;
      OSUINT8 wheelsPresent : 1;
   } m;
   OSINT8 angle;
   SteeringWheelAngleConfidence confidence;
   SteeringWheelAngleRateOfChange rate;
   DrivingWheelAngle wheels;
} VehicleStatus_steering;

EXTERN int asn1PE_VehicleStatus_steering (OSCTXT* pctxt, VehicleStatus_steering* pvalue);

EXTERN int asn1PD_VehicleStatus_steering (OSCTXT* pctxt, VehicleStatus_steering* pvalue);

EXTERN int asn1Init_VehicleStatus_steering (VehicleStatus_steering* pvalue);

/**************************************************************/
/*                                                            */
/*  AccelSteerYawRateConfidence                               */
/*                                                            */
/**************************************************************/
/*
AccelSteerYawRateConfidence ::= SEQUENCE {
   yawRate [0] YawRateConfidence,
   acceleration [1] AccelerationConfidence,
   steeringWheelAngle [2] SteeringWheelAngleConfidence
}
*/
typedef struct EXTERN AccelSteerYawRateConfidence {
   YawRateConfidence yawRate;
   AccelerationConfidence acceleration;
   SteeringWheelAngleConfidence steeringWheelAngle;
} AccelSteerYawRateConfidence;

EXTERN int asn1PE_AccelSteerYawRateConfidence (OSCTXT* pctxt, AccelSteerYawRateConfidence* pvalue);

EXTERN int asn1PD_AccelSteerYawRateConfidence (OSCTXT* pctxt, AccelSteerYawRateConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  ConfidenceSet                                             */
/*                                                            */
/**************************************************************/
/*
ConfidenceSet ::= SEQUENCE {
   accelConfidence [0] AccelSteerYawRateConfidence OPTIONAL,
   speedConfidence [1] SpeedandHeadingandThrottleConfidence OPTIONAL,
   timeConfidence [2] TimeConfidence OPTIONAL,
   posConfidence [3] PositionConfidenceSet OPTIONAL,
   steerConfidence [4] SteeringWheelAngleConfidence OPTIONAL,
   headingConfidence [5] HeadingConfidence OPTIONAL,
   throttleConfidence [6] ThrottleConfidence OPTIONAL,
   ...
}
*/
typedef struct EXTERN ConfidenceSet {
   struct {
      OSUINT8 accelConfidencePresent : 1;
      OSUINT8 speedConfidencePresent : 1;
      OSUINT8 timeConfidencePresent : 1;
      OSUINT8 posConfidencePresent : 1;
      OSUINT8 steerConfidencePresent : 1;
      OSUINT8 headingConfidencePresent : 1;
      OSUINT8 throttleConfidencePresent : 1;
   } m;
   AccelSteerYawRateConfidence accelConfidence;
   struct SpeedandHeadingandThrottleConfidence *speedConfidence;
   OSUINT8 timeConfidence;
   struct PositionConfidenceSet *posConfidence;
   SteeringWheelAngleConfidence steerConfidence;
   OSUINT8 headingConfidence;
   OSUINT8 throttleConfidence;
   OSRTDList extElem1;
} ConfidenceSet;

EXTERN int asn1PE_ConfidenceSet (OSCTXT* pctxt, ConfidenceSet* pvalue);

EXTERN int asn1PD_ConfidenceSet (OSCTXT* pctxt, ConfidenceSet* pvalue);

EXTERN int asn1Init_ConfidenceSet (ConfidenceSet* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_accelSets                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
typedef struct EXTERN VehicleStatus_accelSets {
   struct {
      OSUINT8 accel4wayPresent : 1;
      OSUINT8 vertAccelThresPresent : 1;
      OSUINT8 yawRateConPresent : 1;
      OSUINT8 hozAccelConPresent : 1;
      OSUINT8 confidenceSetPresent : 1;
   } m;
   struct AccelerationSet4Way *accel4way;
   struct VerticalAccelerationThreshold *vertAccelThres;
   YawRateConfidence yawRateCon;
   AccelerationConfidence hozAccelCon;
   ConfidenceSet confidenceSet;
} VehicleStatus_accelSets;

EXTERN int asn1PE_VehicleStatus_accelSets (OSCTXT* pctxt, VehicleStatus_accelSets* pvalue);

EXTERN int asn1PD_VehicleStatus_accelSets (OSCTXT* pctxt, VehicleStatus_accelSets* pvalue);

EXTERN int asn1Init_VehicleStatus_accelSets (VehicleStatus_accelSets* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_object                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
typedef struct EXTERN VehicleStatus_object {
   OSUINT16 obDist;
   OSUINT16 obDirect;
   struct DDateTime *dateTime;
} VehicleStatus_object;

EXTERN int asn1PE_VehicleStatus_object (OSCTXT* pctxt, VehicleStatus_object* pvalue);

EXTERN int asn1PD_VehicleStatus_object (OSCTXT* pctxt, VehicleStatus_object* pvalue);

EXTERN int asn1Init_VehicleStatus_object (VehicleStatus_object* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_vehicleData                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
typedef struct EXTERN VehicleStatus_vehicleData {
   OSUINT8 height;
   struct BumperHeights *bumpers;
   OSUINT8 mass;
   OSUINT16 trailerWeight;
   OSUINT8 type;
} VehicleStatus_vehicleData;

EXTERN int asn1PE_VehicleStatus_vehicleData (OSCTXT* pctxt, VehicleStatus_vehicleData* pvalue);

EXTERN int asn1PD_VehicleStatus_vehicleData (OSCTXT* pctxt, VehicleStatus_vehicleData* pvalue);

EXTERN int asn1Init_VehicleStatus_vehicleData (VehicleStatus_vehicleData* pvalue);

/**************************************************************/
/*                                                            */
/*  TireData                                                  */
/*                                                            */
/**************************************************************/
/*
TireData ::= SEQUENCE {
   location [0] TireLocation OPTIONAL,
   pressure [1] TirePressure OPTIONAL,
   temp [2] TireTemp OPTIONAL,
   wheelSensorStatus [3] WheelSensorStatus OPTIONAL,
   wheelEndElectFault [4] WheelEndElectFault OPTIONAL,
   leakageRate [5] TireLeakageRate OPTIONAL,
   detection [6] TirePressureThresholdDetection OPTIONAL,
   ...
}
*/
typedef struct EXTERN TireData {
   struct {
      OSUINT8 locationPresent : 1;
      OSUINT8 pressurePresent : 1;
      OSUINT8 tempPresent : 1;
      OSUINT8 wheelSensorStatusPresent : 1;
      OSUINT8 wheelEndElectFaultPresent : 1;
      OSUINT8 leakageRatePresent : 1;
      OSUINT8 detectionPresent : 1;
   } m;
   TireLocation location;
   TirePressure pressure;
   TireTemp temp;
   WheelSensorStatus wheelSensorStatus;
   WheelEndElectFault wheelEndElectFault;
   TireLeakageRate leakageRate;
   TirePressureThresholdDetection detection;
   OSRTDList extElem1;
} TireData;

EXTERN int asn1PE_TireData (OSCTXT* pctxt, TireData* pvalue);

EXTERN int asn1PD_TireData (OSCTXT* pctxt, TireData* pvalue);

EXTERN int asn1Init_TireData (TireData* pvalue);

/**************************************************************/
/*                                                            */
/*  TireDataList                                              */
/*                                                            */
/**************************************************************/
/*
TireDataList ::= SEQUENCE (SIZE (1..16)) OF TireData
*/
/* List of TireData */
typedef OSRTDList TireDataList;

EXTERN int asn1PE_TireDataList (OSCTXT* pctxt, TireDataList* pvalue);

EXTERN int asn1PD_TireDataList (OSCTXT* pctxt, TireDataList* pvalue);

EXTERN int asn1Init_TireDataList (TireDataList* pvalue);

/**************************************************************/
/*                                                            */
/*  AxleWeightSet                                             */
/*                                                            */
/**************************************************************/
/*
AxleWeightSet ::= SEQUENCE {
   location [0] AxleLocation OPTIONAL,
   weight [1] AxleWeight OPTIONAL,
   ...
}
*/
typedef struct EXTERN AxleWeightSet {
   struct {
      OSUINT8 locationPresent : 1;
      OSUINT8 weightPresent : 1;
   } m;
   AxleLocation location;
   AxleWeight weight;
   OSRTDList extElem1;
} AxleWeightSet;

EXTERN int asn1PE_AxleWeightSet (OSCTXT* pctxt, AxleWeightSet* pvalue);

EXTERN int asn1PD_AxleWeightSet (OSCTXT* pctxt, AxleWeightSet* pvalue);

EXTERN int asn1Init_AxleWeightSet (AxleWeightSet* pvalue);

/**************************************************************/
/*                                                            */
/*  AxleWeightList                                            */
/*                                                            */
/**************************************************************/
/*
AxleWeightList ::= SEQUENCE (SIZE (1..16)) OF AxleWeightSet
*/
/* List of AxleWeightSet */
typedef OSRTDList AxleWeightList;

EXTERN int asn1PE_AxleWeightList (OSCTXT* pctxt, AxleWeightList* pvalue);

EXTERN int asn1PD_AxleWeightList (OSCTXT* pctxt, AxleWeightList* pvalue);

EXTERN int asn1Init_AxleWeightList (AxleWeightList* pvalue);

/**************************************************************/
/*                                                            */
/*  J1939data                                                 */
/*                                                            */
/**************************************************************/
/*
J1939data ::= SEQUENCE {
   -- Tire conditions by tire
   tires [0] TireDataList OPTIONAL,
   -- Vehicle Weights by axle
   axles [1] AxleWeightList OPTIONAL,
   trailerWeight [2] TrailerWeight OPTIONAL,
   cargoWeight [3] CargoWeight OPTIONAL,
   steeringAxleTemperature [4] SteeringAxleTemperature OPTIONAL,
   driveAxleLocation [5] DriveAxleLocation OPTIONAL,
   driveAxleLiftAirPressure [6] DriveAxleLiftAirPressure OPTIONAL,
   driveAxleTemperature [7] DriveAxleTemperature OPTIONAL,
   driveAxleLubePressure [8] DriveAxleLubePressure OPTIONAL,
   steeringAxleLubePressure [9] SteeringAxleLubePressure OPTIONAL,
   ...
}
*/
typedef struct EXTERN J1939data {
   struct {
      OSUINT8 tiresPresent : 1;
      OSUINT8 axlesPresent : 1;
      OSUINT8 trailerWeightPresent : 1;
      OSUINT8 cargoWeightPresent : 1;
      OSUINT8 steeringAxleTemperaturePresent : 1;
      OSUINT8 driveAxleLocationPresent : 1;
      OSUINT8 driveAxleLiftAirPressurePresent : 1;
      OSUINT8 driveAxleTemperaturePresent : 1;
      OSUINT8 driveAxleLubePressurePresent : 1;
      OSUINT8 steeringAxleLubePressurePresent : 1;
   } m;
   TireDataList tires;
   AxleWeightList axles;
   OSUINT16 trailerWeight;
   CargoWeight cargoWeight;
   SteeringAxleTemperature steeringAxleTemperature;
   DriveAxleLocation driveAxleLocation;
   DriveAxleLiftAirPressure driveAxleLiftAirPressure;
   DriveAxleTemperature driveAxleTemperature;
   DriveAxleLubePressure driveAxleLubePressure;
   SteeringAxleLubePressure steeringAxleLubePressure;
   OSRTDList extElem1;
} J1939data;

EXTERN int asn1PE_J1939data (OSCTXT* pctxt, J1939data* pvalue);

EXTERN int asn1PD_J1939data (OSCTXT* pctxt, J1939data* pvalue);

EXTERN int asn1Init_J1939data (J1939data* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus_weatherReport                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'VehicleStatus'
*/
typedef struct EXTERN VehicleStatus_weatherReport {
   struct {
      OSUINT8 rainRatePresent : 1;
      OSUINT8 precipSituationPresent : 1;
      OSUINT8 solarRadiationPresent : 1;
      OSUINT8 frictionPresent : 1;
   } m;
   EssPrecipYesNo isRaining;
   EssPrecipRate rainRate;
   EssPrecipSituation precipSituation;
   EssSolarRadiation solarRadiation;
   EssMobileFriction friction;
} VehicleStatus_weatherReport;

EXTERN int asn1PE_VehicleStatus_weatherReport (OSCTXT* pctxt, VehicleStatus_weatherReport* pvalue);

EXTERN int asn1PD_VehicleStatus_weatherReport (OSCTXT* pctxt, VehicleStatus_weatherReport* pvalue);

EXTERN int asn1Init_VehicleStatus_weatherReport (VehicleStatus_weatherReport* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleStatus                                             */
/*                                                            */
/**************************************************************/
/*
VehicleStatus ::= SEQUENCE {
   lights [0] ExteriorLights OPTIONAL, -- Exterior Lights
   lightBar [1] LightbarInUse OPTIONAL, -- PS Lights
   wipers [2] WiperSet OPTIONAL, -- Wipers
   brakeStatus [3] BrakeSystemStatus OPTIONAL,
                                                            -- Braking Data
   brakePressure [4] BrakeAppliedPressure OPTIONAL, -- Braking Pressure
   roadFriction [5] CoefficientOfFriction OPTIONAL, -- Roadway Friction
   sunData [6] SunSensor OPTIONAL, -- Sun Sensor
   rainData [7] RainSensor OPTIONAL, -- Rain Sensor
   airTemp [8] AmbientAirTemperature OPTIONAL, -- Air Temperature
   airPres [9] AmbientAirPressure OPTIONAL, -- Air Pressure
   steering [10] SEQUENCE {
      angle [0] SteeringWheelAngle,
      confidence [1] SteeringWheelAngleConfidence OPTIONAL,
      rate [2] SteeringWheelAngleRateOfChange OPTIONAL,
      wheels [3] DrivingWheelAngle OPTIONAL
   } OPTIONAL, -- steering data
   accelSets [11] SEQUENCE {
      accel4way [0] AccelerationSet4Way OPTIONAL,
      vertAccelThres [1] VerticalAccelerationThreshold OPTIONAL,
                                                      -- Wheel which has
                                                      -- exceeded acceleration point
      yawRateCon [2] YawRateConfidence OPTIONAL,
                                                      -- Yaw Rate Confidence
      hozAccelCon [3] AccelerationConfidence OPTIONAL,
                                                      -- Acceleration Confidence
      confidenceSet [4] ConfidenceSet OPTIONAL
                                                      -- general ConfidenceSet
   } OPTIONAL,
   object [12] SEQUENCE {
      obDist [0] ObstacleDistance, -- Obstacle Distance
      obDirect [1] Angle, -- Obstacle Direction
      dateTime [2] DDateTime -- time detected
   } OPTIONAL, -- detected Obstacle data
   fullPos [13] FullPositionVector OPTIONAL, -- complete set of time and
                                                    -- position, speed, heading
   throttlePos [14] ThrottlePosition OPTIONAL,
   speedHeadC [15] SpeedandHeadingandThrottleConfidence OPTIONAL,
   speedC [16] SpeedConfidence OPTIONAL,
   vehicleData [17] SEQUENCE {
      height [0] VehicleHeight,
      bumpers [1] BumperHeights,
      mass [2] VehicleMass,
      trailerWeight [3] TrailerWeight,
      type [4] VehicleType
   } OPTIONAL, -- vehicle data
   vehicleIdent [18] VehicleIdent OPTIONAL, -- common vehicle identity data
   j1939data [19] J1939data OPTIONAL, -- Various SAE J1938 data items
   weatherReport [20] SEQUENCE {
      isRaining [0] EssPrecipYesNo,
      rainRate [1] EssPrecipRate OPTIONAL,
      precipSituation [2] EssPrecipSituation OPTIONAL,
      solarRadiation [3] EssSolarRadiation OPTIONAL,
      friction [4] EssMobileFriction OPTIONAL
   } OPTIONAL, -- local weather data
   gnssStatus [21] GNSSstatus OPTIONAL,
   ...
}
*/
typedef struct EXTERN VehicleStatus {
   struct {
      OSUINT8 lightsPresent : 1;
      OSUINT8 lightBarPresent : 1;
      OSUINT8 wipersPresent : 1;
      OSUINT8 brakeStatusPresent : 1;
      OSUINT8 brakePressurePresent : 1;
      OSUINT8 roadFrictionPresent : 1;
      OSUINT8 sunDataPresent : 1;
      OSUINT8 rainDataPresent : 1;
      OSUINT8 airTempPresent : 1;
      OSUINT8 airPresPresent : 1;
      OSUINT8 steeringPresent : 1;
      OSUINT8 accelSetsPresent : 1;
      OSUINT8 objectPresent : 1;
      OSUINT8 fullPosPresent : 1;
      OSUINT8 throttlePosPresent : 1;
      OSUINT8 speedHeadCPresent : 1;
      OSUINT8 speedCPresent : 1;
      OSUINT8 vehicleDataPresent : 1;
      OSUINT8 vehicleIdentPresent : 1;
      OSUINT8 j1939dataPresent : 1;
      OSUINT8 weatherReportPresent : 1;
      OSUINT8 gnssStatusPresent : 1;
   } m;
   struct ExteriorLights *lights;
   OSUINT8 lightBar;
   struct WiperSet *wipers;
   struct BrakeSystemStatus *brakeStatus;
   BrakeAppliedPressure brakePressure;
   OSUINT8 roadFriction;
   SunSensor sunData;
   RainSensor rainData;
   OSUINT8 airTemp;
   OSUINT8 airPres;
   VehicleStatus_steering steering;
   VehicleStatus_accelSets accelSets;
   VehicleStatus_object object;
   struct FullPositionVector *fullPos;
   ThrottlePosition throttlePos;
   struct SpeedandHeadingandThrottleConfidence *speedHeadC;
   OSUINT8 speedC;
   VehicleStatus_vehicleData vehicleData;
   VehicleIdent vehicleIdent;
   J1939data j1939data;
   VehicleStatus_weatherReport weatherReport;
   struct GNSSstatus *gnssStatus;
   OSRTDList extElem1;
} VehicleStatus;

EXTERN int asn1PE_VehicleStatus (OSCTXT* pctxt, VehicleStatus* pvalue);

EXTERN int asn1PD_VehicleStatus (OSCTXT* pctxt, VehicleStatus* pvalue);

EXTERN int asn1Init_VehicleStatus (VehicleStatus* pvalue);

/**************************************************************/
/*                                                            */
/*  Snapshot                                                  */
/*                                                            */
/**************************************************************/
/*
Snapshot ::= SEQUENCE {
   thePosition [0] FullPositionVector,
                -- data of the position and speed,
   safetyExt [1] VehicleSafetyExtensions OPTIONAL,
   dataSet [2] VehicleStatus OPTIONAL,
   ...
}
*/
typedef struct EXTERN Snapshot {
   struct {
      OSUINT8 safetyExtPresent : 1;
      OSUINT8 dataSetPresent : 1;
   } m;
   struct FullPositionVector *thePosition;
   struct VehicleSafetyExtensions *safetyExt;
   VehicleStatus dataSet;
   OSRTDList extElem1;
} Snapshot;

EXTERN int asn1PE_Snapshot (OSCTXT* pctxt, Snapshot* pvalue);

EXTERN int asn1PD_Snapshot (OSCTXT* pctxt, Snapshot* pvalue);

EXTERN int asn1Init_Snapshot (Snapshot* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData_snapshots                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeVehicleData'
*/
/* List of Snapshot */
typedef OSRTDList ProbeVehicleData_snapshots;

EXTERN int asn1PE_ProbeVehicleData_snapshots (OSCTXT* pctxt, ProbeVehicleData_snapshots* pvalue);

EXTERN int asn1PD_ProbeVehicleData_snapshots (OSCTXT* pctxt, ProbeVehicleData_snapshots* pvalue);

EXTERN int asn1Init_ProbeVehicleData_snapshots (ProbeVehicleData_snapshots* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData_regional                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ProbeVehicleData'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList ProbeVehicleData_regional;

EXTERN int asn1PE_ProbeVehicleData_regional (OSCTXT* pctxt, ProbeVehicleData_regional* pvalue);

EXTERN int asn1PD_ProbeVehicleData_regional (OSCTXT* pctxt, ProbeVehicleData_regional* pvalue);

EXTERN int asn1Init_ProbeVehicleData_regional (ProbeVehicleData_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  ProbeVehicleData                                          */
/*                                                            */
/**************************************************************/
/*
ProbeVehicleData ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   segNum [1] ProbeSegmentNumber OPTIONAL,
                                         -- a short term Ident value
                                         -- not used when ident is used
   probeID [2] VehicleIdent OPTIONAL,
                                         -- identity data for selected
                                         -- types of vehicles
   startVector [3] FullPositionVector, -- the space and time of
                                         -- transmission to the RSU
   vehicleType [4] VehicleClassification, -- type of vehicle,
   snapshots [5] SEQUENCE (SIZE (1..32)) OF Snapshot,
                                         -- a seq of name-value pairs
                                         -- along with the space and time
                                         -- of the first measurement set
   regional [6] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN ProbeVehicleData {
   struct {
      OSUINT8 timeStampPresent : 1;
      OSUINT8 segNumPresent : 1;
      OSUINT8 probeIDPresent : 1;
      OSUINT8 regionalPresent : 1;
   } m;
   OSUINT32 timeStamp;
   ProbeSegmentNumber segNum;
   VehicleIdent probeID;
   struct FullPositionVector *startVector;
   struct VehicleClassification *vehicleType;
   ProbeVehicleData_snapshots snapshots;
   ProbeVehicleData_regional regional;
   OSRTDList extElem1;
} ProbeVehicleData;

EXTERN int asn1PE_ProbeVehicleData (OSCTXT* pctxt, ProbeVehicleData* pvalue);

EXTERN int asn1PD_ProbeVehicleData (OSCTXT* pctxt, ProbeVehicleData* pvalue);

EXTERN int asn1Init_ProbeVehicleData (ProbeVehicleData* pvalue);

#ifdef __cplusplus
}
#endif

#endif
