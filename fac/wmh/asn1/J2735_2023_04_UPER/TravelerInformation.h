/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.7.0, Date: 25-May-2023.
 *
 * Command:  asn1c CooperativeControlMsg-v1-ph.asn J2735-AddGrpB.asn J2735-AddGrpC.asn J2735-BasicSafetyMessage-v4.asn J2735-CommonSafetyRequest.asn J2735-Common-v7.asn J2735-EmergencyVehicleAlert.asn J2735-IntersectionCollision.asn J2735-ITIS.asn J2735-MapData-v1.asn J2735-MessageFrame-v5.asn J2735-NMEAcorrections.asn J2735-NTCIP.asn J2735-PersonalSafetyMessage.asn J2735-ProbeDataManagement.asn J2735-ProbeVehicleData.asn J2735-REGION.asn J2735-RoadSideAlert.asn J2735-RTCMcorrections.asn J2735-SignalRequestMessage.asn J2735-SignalStatusMessage.asn J2735-SPAT-v2.asn J2735-TestMessage00.asn J2735-TestMessage01.asn J2735-TestMessage02.asn J2735-TestMessage03.asn J2735-TestMessage04.asn J2735-TestMessage05.asn J2735-TestMessage06.asn J2735-TestMessage07.asn J2735-TestMessage08.asn J2735-TestMessage09.asn J2735-TestMessage10.asn J2735-TestMessage11.asn J2735-TestMessage12.asn J2735-TestMessage13.asn J2735-TestMessage14.asn J2735-TestMessage15.asn J2735-TravelerInformation-v2.asn MnvrSharingCoordMsg-v1-ph.asn PersonalSafetyMsg2-v1-ph.asn ProbeDataConfig-v0.30.asn ProbeDataReport-v0.30.asn RoadGeoAttributes-v2-ph.asn RoadSafetyMsg-v1-ph.asn RoadWeatherMessage.asn SensorDataSharingMsg-v1-ph.asn SignalControlAndPrioritizationRequest-v1-ph.asn SignalControlAndPrioritizationStatus-v1-ph.asn TollAdvertisementMsg-v0.10-ph.asn TollUsageAckMsg-v0.10-ph.asn TollUsageMsg-v0.10-ph.asn TrafficSignalPhaseAndTiming-v1-ph.asn -c -per -compact
 */
#ifndef TRAVELERINFORMATION_H
#define TRAVELERINFORMATION_H

#ifdef __cplusplus
extern "C" {
#endif

#include "rtkey.h"
#include "rtpersrc/asn1per.h"

#include "ITIS.h"

/**
 * Header file for ASN.1 module TravelerInformation
 */
#include "rtxsrc/rtxEnum.h"
/**************************************************************/
/*                                                            */
/*  DirectionOfUse                                            */
/*                                                            */
/**************************************************************/
/*
DirectionOfUse ::= ENUMERATED { unavailable(0), forward(1), reverse(2), both(3) }
*/
typedef enum {
   unavailable_30 = 0,
   forward = 1,
   reverse = 2,
   both = 3
} DirectionOfUse_Root;

typedef OSUINT8 DirectionOfUse;

EXTERN int asn1PE_DirectionOfUse (OSCTXT* pctxt, DirectionOfUse value);

EXTERN int asn1PD_DirectionOfUse (OSCTXT* pctxt, DirectionOfUse* pvalue);

EXTERN extern const OSEnumItem DirectionOfUse_ENUMTAB[];
#define DirectionOfUse_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* DirectionOfUse_ToString (OSINT32 value);

EXTERN int DirectionOfUse_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, DirectionOfUse* pvalue);

EXTERN int DirectionOfUse_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, DirectionOfUse* pvalue);

/**************************************************************/
/*                                                            */
/*  DistanceUnits                                             */
/*                                                            */
/**************************************************************/
/*
DistanceUnits ::= ENUMERATED { centimeter(0), cm2-5(1), decimeter(2), meter(3), kilometer(4), foot(5), yard(6), mile(7) }
*/
typedef enum {
   centimeter = 0,
   cm2_5 = 1,
   decimeter = 2,
   meter = 3,
   kilometer = 4,
   foot = 5,
   yard = 6,
   mile = 7
} DistanceUnits_Root;

typedef OSUINT8 DistanceUnits;

EXTERN int asn1PE_DistanceUnits (OSCTXT* pctxt, DistanceUnits value);

EXTERN int asn1PD_DistanceUnits (OSCTXT* pctxt, DistanceUnits* pvalue);

EXTERN extern const OSEnumItem DistanceUnits_ENUMTAB[];
#define DistanceUnits_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* DistanceUnits_ToString (OSINT32 value);

EXTERN int DistanceUnits_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, DistanceUnits* pvalue);

EXTERN int DistanceUnits_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, DistanceUnits* pvalue);

/**************************************************************/
/*                                                            */
/*  ITIStextPhrase                                            */
/*                                                            */
/**************************************************************/
/*
ITIStextPhrase ::= IA5String (SIZE (1..16))
*/
typedef const char* ITIStextPhrase;

EXTERN int asn1PE_ITIStextPhrase (OSCTXT* pctxt, ITIStextPhrase value);

EXTERN int asn1PD_ITIStextPhrase (OSCTXT* pctxt, ITIStextPhrase* pvalue);

/**************************************************************/
/*                                                            */
/*  MinutesDuration                                           */
/*                                                            */
/**************************************************************/
/*
MinutesDuration ::= INTEGER (0..32000)
                                        units of minutes

*/
typedef OSUINT16 MinutesDuration;

EXTERN int asn1PE_MinutesDuration (OSCTXT* pctxt, MinutesDuration value);

EXTERN int asn1PD_MinutesDuration (OSCTXT* pctxt, MinutesDuration* pvalue);

/**************************************************************/
/*                                                            */
/*  MsgCRC                                                    */
/*                                                            */
/**************************************************************/
/*
MsgCRC ::= OCTET STRING (SIZE (2))
                                   created with the CRC-CCITT polynomial

*/
typedef struct EXTERN MsgCRC {
   OSUINT32 numocts;
   OSOCTET data[2];
} MsgCRC;

EXTERN int asn1PE_MsgCRC (OSCTXT* pctxt, MsgCRC* pvalue);

EXTERN int asn1PD_MsgCRC (OSCTXT* pctxt, MsgCRC* pvalue);

EXTERN int asn1Init_MsgCRC (MsgCRC* pvalue);

/**************************************************************/
/*                                                            */
/*  MUTCDCode                                                 */
/*                                                            */
/**************************************************************/
/*
MUTCDCode ::= ENUMERATED { none(0), regulatory(1), warning(2), maintenance(3), motoristService(4), guide(5), rec(6), ... }
*/
typedef enum {
   none_5 = 0,
   regulatory = 1,
   warning = 2,
   maintenance = 3,
   motoristService = 4,
   guide = 5,
   rec = 6
} MUTCDCode_Root;

typedef OSUINT8 MUTCDCode;

EXTERN int asn1PE_MUTCDCode (OSCTXT* pctxt, MUTCDCode value);

EXTERN int asn1PD_MUTCDCode (OSCTXT* pctxt, MUTCDCode* pvalue);

EXTERN extern const OSEnumItem MUTCDCode_ENUMTAB[];
#define MUTCDCode_ENUMTABSIZE 7

EXTERN const OSUTF8CHAR* MUTCDCode_ToString (OSINT32 value);

EXTERN int MUTCDCode_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, MUTCDCode* pvalue);

EXTERN int MUTCDCode_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, MUTCDCode* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeLL                                           */
/*                                                            */
/**************************************************************/
/*
NodeAttributeLL ::= ENUMERATED { reserved(0), stopLine(1), roundedCapStyleA(2), roundedCapStyleB(3), mergePoint(4), divergePoint(5), downstreamStopLine(6), downstreamStartNode(7), closedToTraffic(8), safeIsland(9), curbPresentAtStepOff(10), hydrantPresent(11), ... }
*/
typedef enum {
   reserved_8 = 0,
   stopLine_1 = 1,
   roundedCapStyleA_1 = 2,
   roundedCapStyleB_1 = 3,
   mergePoint_1 = 4,
   divergePoint_1 = 5,
   downstreamStopLine_1 = 6,
   downstreamStartNode_1 = 7,
   closedToTraffic_1 = 8,
   safeIsland_2 = 9,
   curbPresentAtStepOff_1 = 10,
   hydrantPresent_1 = 11
} NodeAttributeLL_Root;

typedef OSUINT8 NodeAttributeLL;

EXTERN int asn1PE_NodeAttributeLL (OSCTXT* pctxt, NodeAttributeLL value);

EXTERN int asn1PD_NodeAttributeLL (OSCTXT* pctxt, NodeAttributeLL* pvalue);

EXTERN extern const OSEnumItem NodeAttributeLL_ENUMTAB[];
#define NodeAttributeLL_ENUMTABSIZE 12

EXTERN const OSUTF8CHAR* NodeAttributeLL_ToString (OSINT32 value);

EXTERN int NodeAttributeLL_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, NodeAttributeLL* pvalue);

EXTERN int NodeAttributeLL_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, NodeAttributeLL* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B12                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B12 ::= INTEGER (-2048..2047)
    A range of +- 0.0002047 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT16 OffsetLL_B12;

EXTERN int asn1PE_OffsetLL_B12 (OSCTXT* pctxt, OffsetLL_B12 value);

EXTERN int asn1PD_OffsetLL_B12 (OSCTXT* pctxt, OffsetLL_B12* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B14                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B14 ::= INTEGER (-8192..8191)
    A range of +- 0.0008191 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT16 OffsetLL_B14;

EXTERN int asn1PE_OffsetLL_B14 (OSCTXT* pctxt, OffsetLL_B14 value);

EXTERN int asn1PD_OffsetLL_B14 (OSCTXT* pctxt, OffsetLL_B14* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B16                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B16 ::= INTEGER (-32768..32767)
    A range of +- 0.0032767 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT16 OffsetLL_B16;

EXTERN int asn1PE_OffsetLL_B16 (OSCTXT* pctxt, OffsetLL_B16 value);

EXTERN int asn1PD_OffsetLL_B16 (OSCTXT* pctxt, OffsetLL_B16* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B22                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B22 ::= INTEGER (-2097152..2097151)
    A range of +- 0.2097151 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT32 OffsetLL_B22;

EXTERN int asn1PE_OffsetLL_B22 (OSCTXT* pctxt, OffsetLL_B22 value);

EXTERN int asn1PD_OffsetLL_B22 (OSCTXT* pctxt, OffsetLL_B22* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetLL_B24                                              */
/*                                                            */
/**************************************************************/
/*
OffsetLL-B24 ::= INTEGER (-8388608..8388607)
    A range of +- 0.8388607 degrees
    In LSB units of 0.1 microdegrees (unless a zoom is employed)

*/
typedef OSINT32 OffsetLL_B24;

EXTERN int asn1PE_OffsetLL_B24 (OSCTXT* pctxt, OffsetLL_B24 value);

EXTERN int asn1PD_OffsetLL_B24 (OSCTXT* pctxt, OffsetLL_B24* pvalue);

/**************************************************************/
/*                                                            */
/*  Radius_B12                                                */
/*                                                            */
/**************************************************************/
/*
Radius-B12 ::= INTEGER (0..4095)
    with the LSB unit value determined elsewhere
    the value 4095 shall be used for unknown

*/
typedef OSUINT16 Radius_B12;

EXTERN int asn1PE_Radius_B12 (OSCTXT* pctxt, Radius_B12 value);

EXTERN int asn1PD_Radius_B12 (OSCTXT* pctxt, Radius_B12* pvalue);

/**************************************************************/
/*                                                            */
/*  SegmentAttributeLL                                        */
/*                                                            */
/**************************************************************/
/*
SegmentAttributeLL ::= ENUMERATED { reserved(0), doNotBlock(1), whiteLine(2), mergingLaneLeft(3), mergingLaneRight(4), curbOnLeft(5), curbOnRight(6), loadingzoneOnLeft(7), loadingzoneOnRight(8), turnOutPointOnLeft(9), turnOutPointOnRight(10), adjacentParkingOnLeft(11), adjacentParkingOnRight(12), adjacentBikeLaneOnLeft(13), adjacentBikeLaneOnRight(14), sharedBikeLane(15), bikeBoxInFront(16), transitStopOnLeft(17), transitStopOnRight(18), transitStopInLane(19), sharedWithTrackedVehicle(20), safeIsland(21), lowCurbsPresent(22), rumbleStripPresent(23), audibleSignalingPresent(24), adaptiveTimingPresent(25), rfSignalRequestPresent(26), partialCurbIntrusion(27), taperToLeft(28), taperToRight(29), taperToCenterLine(30), parallelParking(31), headInParking(32), freeParking(33), timeRestrictionsOnParking(34), costToPark(35), midBlockCurbPresent(36), unEvenPavementPresent(37), ... }
*/
typedef enum {
   reserved_9 = 0,
   doNotBlock_1 = 1,
   whiteLine_1 = 2,
   mergingLaneLeft_1 = 3,
   mergingLaneRight_1 = 4,
   curbOnLeft_1 = 5,
   curbOnRight_1 = 6,
   loadingzoneOnLeft_1 = 7,
   loadingzoneOnRight_1 = 8,
   turnOutPointOnLeft_1 = 9,
   turnOutPointOnRight_1 = 10,
   adjacentParkingOnLeft_1 = 11,
   adjacentParkingOnRight_1 = 12,
   adjacentBikeLaneOnLeft_1 = 13,
   adjacentBikeLaneOnRight_1 = 14,
   sharedBikeLane_1 = 15,
   bikeBoxInFront_1 = 16,
   transitStopOnLeft_1 = 17,
   transitStopOnRight_1 = 18,
   transitStopInLane_1 = 19,
   sharedWithTrackedVehicle_1 = 20,
   safeIsland_3 = 21,
   lowCurbsPresent_1 = 22,
   rumbleStripPresent_1 = 23,
   audibleSignalingPresent_1 = 24,
   adaptiveTimingPresent_1 = 25,
   rfSignalRequestPresent_1 = 26,
   partialCurbIntrusion_1 = 27,
   taperToLeft_1 = 28,
   taperToRight_1 = 29,
   taperToCenterLine_1 = 30,
   parallelParking_1 = 31,
   headInParking_1 = 32,
   freeParking_1 = 33,
   timeRestrictionsOnParking_1 = 34,
   costToPark_1 = 35,
   midBlockCurbPresent_1 = 36,
   unEvenPavementPresent_1 = 37
} SegmentAttributeLL_Root;

typedef OSUINT8 SegmentAttributeLL;

EXTERN int asn1PE_SegmentAttributeLL (OSCTXT* pctxt, SegmentAttributeLL value);

EXTERN int asn1PD_SegmentAttributeLL (OSCTXT* pctxt, SegmentAttributeLL* pvalue);

EXTERN extern const OSEnumItem SegmentAttributeLL_ENUMTAB[];
#define SegmentAttributeLL_ENUMTABSIZE 38

EXTERN const OSUTF8CHAR* SegmentAttributeLL_ToString (OSINT32 value);

EXTERN int SegmentAttributeLL_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, SegmentAttributeLL* pvalue);

EXTERN int SegmentAttributeLL_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, SegmentAttributeLL* pvalue);

/**************************************************************/
/*                                                            */
/*  SignPrority                                               */
/*                                                            */
/**************************************************************/
/*
SignPrority ::= INTEGER (0..7)
    0 as least, 7 as most

*/
typedef OSUINT8 SignPrority;

EXTERN int asn1PE_SignPrority (OSCTXT* pctxt, SignPrority value);

EXTERN int asn1PD_SignPrority (OSCTXT* pctxt, SignPrority* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInfoType                                          */
/*                                                            */
/**************************************************************/
/*
TravelerInfoType ::= ENUMERATED { unknown(0), advisory(1), roadSignage(2), commercialSignage(3), ... }
*/
typedef enum {
   unknown_8 = 0,
   advisory = 1,
   roadSignage = 2,
   commercialSignage = 3
} TravelerInfoType_Root;

typedef OSUINT8 TravelerInfoType;

EXTERN int asn1PE_TravelerInfoType (OSCTXT* pctxt, TravelerInfoType value);

EXTERN int asn1PD_TravelerInfoType (OSCTXT* pctxt, TravelerInfoType* pvalue);

EXTERN extern const OSEnumItem TravelerInfoType_ENUMTAB[];
#define TravelerInfoType_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* TravelerInfoType_ToString (OSINT32 value);

EXTERN int TravelerInfoType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, TravelerInfoType* pvalue);

EXTERN int TravelerInfoType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, TravelerInfoType* pvalue);

/**************************************************************/
/*                                                            */
/*  UniqueMSGID                                               */
/*                                                            */
/**************************************************************/
/*
UniqueMSGID ::= OCTET STRING (SIZE (9))
*/
typedef struct EXTERN UniqueMSGID {
   OSUINT32 numocts;
   OSOCTET data[9];
} UniqueMSGID;

EXTERN int asn1PE_UniqueMSGID (OSCTXT* pctxt, UniqueMSGID* pvalue);

EXTERN int asn1PD_UniqueMSGID (OSCTXT* pctxt, UniqueMSGID* pvalue);

EXTERN int asn1Init_UniqueMSGID (UniqueMSGID* pvalue);

/**************************************************************/
/*                                                            */
/*  URL_Base                                                  */
/*                                                            */
/**************************************************************/
/*
URL-Base ::= IA5String (SIZE (1..45))
*/
typedef const char* URL_Base;

EXTERN int asn1PE_URL_Base (OSCTXT* pctxt, URL_Base value);

EXTERN int asn1PD_URL_Base (OSCTXT* pctxt, URL_Base* pvalue);

/**************************************************************/
/*                                                            */
/*  URL_Short                                                 */
/*                                                            */
/**************************************************************/
/*
URL-Short ::= IA5String (SIZE (1..15))
*/
typedef const char* URL_Short;

EXTERN int asn1PE_URL_Short (OSCTXT* pctxt, URL_Short value);

EXTERN int asn1PD_URL_Short (OSCTXT* pctxt, URL_Short* pvalue);

/**************************************************************/
/*                                                            */
/*  Zoom                                                      */
/*                                                            */
/**************************************************************/
/*
Zoom ::= INTEGER (0..15)
    A zoom scale applied in units of 2^N
    A value of 0 is a 1:1 zoom (no zoom)
    A value of 1 is a 2:1 zoom
    A value of 2 is a 4:1 zoom, etc.
    The zoom value is applied to one or more offsets
    increase the span or range while reducing its precision
    The absence of a zoom, any offset element in a data
    frame implies a 1:1 zoom

*/
typedef OSUINT8 Zoom;

EXTERN int asn1PE_Zoom (OSCTXT* pctxt, Zoom value);

EXTERN int asn1PD_Zoom (OSCTXT* pctxt, Zoom* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSignID                                                */
/*                                                            */
/**************************************************************/
/*
RoadSignID ::= SEQUENCE {
   position [0] Position3D,
                   -- Location of sign
   viewAngle [1] HeadingSlice,
                   -- Vehicle direction of travel while
                   -- facing active side of sign
   mutcdCode [2] MUTCDCode OPTIONAL,
                   -- Tag for MUTCD code or "generic sign"
   crc [3] MsgCRC OPTIONAL
                   -- Used to provide a check sum
}
*/
typedef struct EXTERN RoadSignID {
   struct {
      OSUINT8 mutcdCodePresent : 1;
      OSUINT8 crcPresent : 1;
   } m;
   struct Position3D *position;
   struct HeadingSlice *viewAngle;
   MUTCDCode mutcdCode;
   MsgCRC crc;
} RoadSignID;

EXTERN int asn1PE_RoadSignID (OSCTXT* pctxt, RoadSignID* pvalue);

EXTERN int asn1PD_RoadSignID (OSCTXT* pctxt, RoadSignID* pvalue);

EXTERN int asn1Init_RoadSignID (RoadSignID* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame_msgId                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerDataFrame'
*/
/* Choice tag constants */

#define T_TravelerDataFrame_msgId_furtherInfoID 1
#define T_TravelerDataFrame_msgId_roadSignID 2

typedef struct EXTERN TravelerDataFrame_msgId {
   OSINT32 t;
   union {
      /* t = 1 */
      struct FurtherInfoID *furtherInfoID;
      /* t = 2 */
      RoadSignID *roadSignID;
   } u;
} TravelerDataFrame_msgId;

EXTERN int asn1PE_TravelerDataFrame_msgId (OSCTXT* pctxt, TravelerDataFrame_msgId* pvalue);

EXTERN int asn1PD_TravelerDataFrame_msgId (OSCTXT* pctxt, TravelerDataFrame_msgId* pvalue);

EXTERN int asn1Init_TravelerDataFrame_msgId (TravelerDataFrame_msgId* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LL_24B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-24B ::= SEQUENCE {
   -- ranges of +- 0.0002047 degrees
   -- ranges of +- 22.634554 meters at the equator
   lon [0] OffsetLL-B12,
   lat [1] OffsetLL-B12
}
*/
typedef struct EXTERN Node_LL_24B {
   OffsetLL_B12 lon;
   OffsetLL_B12 lat;
} Node_LL_24B;

EXTERN int asn1PE_Node_LL_24B (OSCTXT* pctxt, Node_LL_24B* pvalue);

EXTERN int asn1PD_Node_LL_24B (OSCTXT* pctxt, Node_LL_24B* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LL_28B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-28B ::= SEQUENCE {
   -- ranges of +- 0.0008191 degrees
   -- ranges of +- 90.571389 meters at the equator
   lon [0] OffsetLL-B14,
   lat [1] OffsetLL-B14
}
*/
typedef struct EXTERN Node_LL_28B {
   OffsetLL_B14 lon;
   OffsetLL_B14 lat;
} Node_LL_28B;

EXTERN int asn1PE_Node_LL_28B (OSCTXT* pctxt, Node_LL_28B* pvalue);

EXTERN int asn1PD_Node_LL_28B (OSCTXT* pctxt, Node_LL_28B* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LL_32B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-32B ::= SEQUENCE {
   -- ranges of +- 0.0032767 degrees
   -- ranges of +- 362.31873 meters at the equator
   lon [0] OffsetLL-B16,
   lat [1] OffsetLL-B16
}
*/
typedef struct EXTERN Node_LL_32B {
   OffsetLL_B16 lon;
   OffsetLL_B16 lat;
} Node_LL_32B;

EXTERN int asn1PE_Node_LL_32B (OSCTXT* pctxt, Node_LL_32B* pvalue);

EXTERN int asn1PD_Node_LL_32B (OSCTXT* pctxt, Node_LL_32B* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LL_36B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-36B ::= SEQUENCE {
   -- ranges of +- 0.0131071 degrees
   -- ranges of +- 01.449308 Kmeters at the equator
   lon [0] OffsetLL-B18,
   lat [1] OffsetLL-B18
}
*/
typedef struct EXTERN Node_LL_36B {
   OSINT32 lon;
   OSINT32 lat;
} Node_LL_36B;

EXTERN int asn1PE_Node_LL_36B (OSCTXT* pctxt, Node_LL_36B* pvalue);

EXTERN int asn1PD_Node_LL_36B (OSCTXT* pctxt, Node_LL_36B* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LL_44B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-44B ::= SEQUENCE {
   -- ranges of +- 0.2097151 degrees
   -- ranges of +- 23.189096 Kmeters at the equator
   lon [0] OffsetLL-B22,
   lat [1] OffsetLL-B22
}
*/
typedef struct EXTERN Node_LL_44B {
   OffsetLL_B22 lon;
   OffsetLL_B22 lat;
} Node_LL_44B;

EXTERN int asn1PE_Node_LL_44B (OSCTXT* pctxt, Node_LL_44B* pvalue);

EXTERN int asn1PD_Node_LL_44B (OSCTXT* pctxt, Node_LL_44B* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LL_48B                                               */
/*                                                            */
/**************************************************************/
/*
Node-LL-48B ::= SEQUENCE {
   -- ranges of +- 0.8388607 degrees
   -- ranges of +- 92.756481 Kmeters at the equator
   lon [0] OffsetLL-B24,
   lat [1] OffsetLL-B24
}
*/
typedef struct EXTERN Node_LL_48B {
   OffsetLL_B24 lon;
   OffsetLL_B24 lat;
} Node_LL_48B;

EXTERN int asn1PE_Node_LL_48B (OSCTXT* pctxt, Node_LL_48B* pvalue);

EXTERN int asn1PD_Node_LL_48B (OSCTXT* pctxt, Node_LL_48B* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeOffsetPointLL                                         */
/*                                                            */
/**************************************************************/
/*
NodeOffsetPointLL ::= CHOICE {
   -- Nodes with LL content         Span at the equator when using a zoom of one:
   node-LL1 [0] Node-LL-24B, -- within +- 22.634554  meters of last node
   node-LL2 [1] Node-LL-28B, -- within +- 90.571389  meters of last node
   node-LL3 [2] Node-LL-32B, -- within +- 362.31873  meters of last node
   node-LL4 [3] Node-LL-36B, -- within +- 01.449308 Kmeters of last node
   node-LL5 [4] Node-LL-44B, -- within +- 23.189096 Kmeters of last node
   node-LL6 [5] Node-LL-48B, -- within +- 92.756481 Kmeters of last node
   node-LatLon [6] Node-LLmD-64b, -- node is a full 32b Lat/Lon range
   regional [7] RegionalExtension
}
*/
/* Choice tag constants */

#define T_NodeOffsetPointLL_node_LL1    1
#define T_NodeOffsetPointLL_node_LL2    2
#define T_NodeOffsetPointLL_node_LL3    3
#define T_NodeOffsetPointLL_node_LL4    4
#define T_NodeOffsetPointLL_node_LL5    5
#define T_NodeOffsetPointLL_node_LL6    6
#define T_NodeOffsetPointLL_node_LatLon 7
#define T_NodeOffsetPointLL_regional    8

typedef struct EXTERN NodeOffsetPointLL {
   OSINT32 t;
   union {
      /* t = 1 */
      Node_LL_24B *node_LL1;
      /* t = 2 */
      Node_LL_28B *node_LL2;
      /* t = 3 */
      Node_LL_32B *node_LL3;
      /* t = 4 */
      Node_LL_36B *node_LL4;
      /* t = 5 */
      Node_LL_44B *node_LL5;
      /* t = 6 */
      Node_LL_48B *node_LL6;
      /* t = 7 */
      struct Node_LLmD_64b *node_LatLon;
      /* t = 8 */
      struct RegionalExtension *regional;
   } u;
} NodeOffsetPointLL;

EXTERN int asn1PE_NodeOffsetPointLL (OSCTXT* pctxt, NodeOffsetPointLL* pvalue);

EXTERN int asn1PD_NodeOffsetPointLL (OSCTXT* pctxt, NodeOffsetPointLL* pvalue);

EXTERN int asn1Init_NodeOffsetPointLL (NodeOffsetPointLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeLLList                                       */
/*                                                            */
/**************************************************************/
/*
NodeAttributeLLList ::= SEQUENCE (SIZE (1..8)) OF NodeAttributeLL
*/
typedef struct EXTERN NodeAttributeLLList {
   OSSIZE n;
   NodeAttributeLL elem[8];
} NodeAttributeLLList;

EXTERN int asn1PE_NodeAttributeLLList (OSCTXT* pctxt, NodeAttributeLLList* pvalue);

EXTERN int asn1PD_NodeAttributeLLList (OSCTXT* pctxt, NodeAttributeLLList* pvalue);

EXTERN int asn1Init_NodeAttributeLLList (NodeAttributeLLList* pvalue);

/**************************************************************/
/*                                                            */
/*  SegmentAttributeLLList                                    */
/*                                                            */
/**************************************************************/
/*
SegmentAttributeLLList ::= SEQUENCE (SIZE (1..8)) OF SegmentAttributeLL
*/
typedef struct EXTERN SegmentAttributeLLList {
   OSSIZE n;
   SegmentAttributeLL elem[8];
} SegmentAttributeLLList;

EXTERN int asn1PE_SegmentAttributeLLList (OSCTXT* pctxt, SegmentAttributeLLList* pvalue);

EXTERN int asn1PD_SegmentAttributeLLList (OSCTXT* pctxt, SegmentAttributeLLList* pvalue);

EXTERN int asn1Init_SegmentAttributeLLList (SegmentAttributeLLList* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetLL_regional                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'NodeAttributeSetLL'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList NodeAttributeSetLL_regional;

EXTERN int asn1PE_NodeAttributeSetLL_regional (OSCTXT* pctxt, NodeAttributeSetLL_regional* pvalue);

EXTERN int asn1PD_NodeAttributeSetLL_regional (OSCTXT* pctxt, NodeAttributeSetLL_regional* pvalue);

EXTERN int asn1Init_NodeAttributeSetLL_regional (NodeAttributeSetLL_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeAttributeSetLL                                        */
/*                                                            */
/**************************************************************/
/*
NodeAttributeSetLL ::= SEQUENCE {
   localNode [0] NodeAttributeLLList OPTIONAL,
                -- Attribute states which pertain to this node point
   disabled [1] SegmentAttributeLLList OPTIONAL,
                -- Attribute states which are disabled at this node point
   enabled [2] SegmentAttributeLLList OPTIONAL,
                -- Attribute states which are enabled at this node point
                -- and which remain enabled until disabled or the lane ends
   data [3] LaneDataAttributeList OPTIONAL,
                -- Attributes which require an additional data values
                -- some of these are local to the node point, while others
                -- persist with the provided values until changed
                -- and this is indicated in each entry
   dWidth [4] Offset-B10 OPTIONAL,
                -- A value added to the current lane width
                -- at this node and from this node onwards, in 1cm steps
                -- lane width between nodes are a linear taper between pts
                -- the value of zero shall not be sent here
   dElevation [5] Offset-B10 OPTIONAL,
                -- A value added to the current Elevation
                -- at this node from this node onwards, in 1 cm steps
                -- elevations between nodes are a linear taper between pts
                -- the value of zero shall not be sent here
   regional [6] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN NodeAttributeSetLL {
   struct {
      OSUINT8 localNodePresent : 1;
      OSUINT8 disabledPresent : 1;
      OSUINT8 enabledPresent : 1;
      OSUINT8 dataPresent : 1;
      OSUINT8 dWidthPresent : 1;
      OSUINT8 dElevationPresent : 1;
      OSUINT8 regionalPresent : 1;
   } m;
   NodeAttributeLLList localNode;
   SegmentAttributeLLList disabled;
   SegmentAttributeLLList enabled;
   OSRTDList data;
   OSINT16 dWidth;
   OSINT16 dElevation;
   NodeAttributeSetLL_regional regional;
   OSRTDList extElem1;
} NodeAttributeSetLL;

EXTERN int asn1PE_NodeAttributeSetLL (OSCTXT* pctxt, NodeAttributeSetLL* pvalue);

EXTERN int asn1PD_NodeAttributeSetLL (OSCTXT* pctxt, NodeAttributeSetLL* pvalue);

EXTERN int asn1Init_NodeAttributeSetLL (NodeAttributeSetLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeLL                                                    */
/*                                                            */
/**************************************************************/
/*
NodeLL ::= SEQUENCE {
   delta [0] EXPLICIT NodeOffsetPointLL,
               -- A choice of which Lat,Lon offset value to use
               -- this includes various delta values as well a regional choices
   attributes [1] NodeAttributeSetLL OPTIONAL,
   ...
}
*/
typedef struct EXTERN NodeLL {
   struct {
      OSUINT8 attributesPresent : 1;
   } m;
   NodeOffsetPointLL delta;
   NodeAttributeSetLL attributes;
   OSRTDList extElem1;
} NodeLL;

EXTERN int asn1PE_NodeLL (OSCTXT* pctxt, NodeLL* pvalue);

EXTERN int asn1PD_NodeLL (OSCTXT* pctxt, NodeLL* pvalue);

EXTERN int asn1Init_NodeLL (NodeLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeSetLL                                                 */
/*                                                            */
/**************************************************************/
/*
NodeSetLL ::= SEQUENCE (SIZE (2..63)) OF NodeLL
*/
/* List of NodeLL */
typedef OSRTDList NodeSetLL;

EXTERN int asn1PE_NodeSetLL (OSCTXT* pctxt, NodeSetLL* pvalue);

EXTERN int asn1PD_NodeSetLL (OSCTXT* pctxt, NodeSetLL* pvalue);

EXTERN int asn1Init_NodeSetLL (NodeSetLL* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeListLL                                                */
/*                                                            */
/**************************************************************/
/*
NodeListLL ::= CHOICE {
   nodes [0] NodeSetLL,
   ...
}
*/
/* Choice tag constants */

#define T_NodeListLL_nodes              1
#define T_NodeListLL_extElem1           2

typedef struct EXTERN NodeListLL {
   OSINT32 t;
   union {
      /* t = 1 */
      NodeSetLL *nodes;
      /* t = 2 */
      ASN1OpenType *extElem1;
   } u;
} NodeListLL;

EXTERN int asn1PE_NodeListLL (OSCTXT* pctxt, NodeListLL* pvalue);

EXTERN int asn1PD_NodeListLL (OSCTXT* pctxt, NodeListLL* pvalue);

EXTERN int asn1Init_NodeListLL (NodeListLL* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetSystem_offset                                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'OffsetSystem'
*/
/* Choice tag constants */

#define T_OffsetSystem_offset_xy        1
#define T_OffsetSystem_offset_ll        2

typedef struct EXTERN OffsetSystem_offset {
   OSINT32 t;
   union {
      /* t = 1 */
      struct NodeListXY *xy;
      /* t = 2 */
      NodeListLL *ll;
   } u;
} OffsetSystem_offset;

EXTERN int asn1PE_OffsetSystem_offset (OSCTXT* pctxt, OffsetSystem_offset* pvalue);

EXTERN int asn1PD_OffsetSystem_offset (OSCTXT* pctxt, OffsetSystem_offset* pvalue);

EXTERN int asn1Init_OffsetSystem_offset (OffsetSystem_offset* pvalue);

/**************************************************************/
/*                                                            */
/*  OffsetSystem                                              */
/*                                                            */
/**************************************************************/
/*
OffsetSystem ::= SEQUENCE {
   scale [0] Zoom OPTIONAL,
   offset [1] EXPLICIT CHOICE {
      xy [0] EXPLICIT NodeListXY, -- offsets of 1.0 centimeters
      ll [1] EXPLICIT NodeListLL
   }
}
*/
typedef struct EXTERN OffsetSystem {
   struct {
      OSUINT8 scalePresent : 1;
   } m;
   Zoom scale;
   OffsetSystem_offset offset;
} OffsetSystem;

EXTERN int asn1PE_OffsetSystem (OSCTXT* pctxt, OffsetSystem* pvalue);

EXTERN int asn1PD_OffsetSystem (OSCTXT* pctxt, OffsetSystem* pvalue);

EXTERN int asn1Init_OffsetSystem (OffsetSystem* pvalue);

/**************************************************************/
/*                                                            */
/*  Circle                                                    */
/*                                                            */
/**************************************************************/
/*
Circle ::= SEQUENCE {
   center [0] Position3D,
   radius [1] Radius-B12,
   units [2] DistanceUnits
}
*/
typedef struct EXTERN Circle {
   struct Position3D *center;
   Radius_B12 radius;
   DistanceUnits units;
} Circle;

EXTERN int asn1PE_Circle (OSCTXT* pctxt, Circle* pvalue);

EXTERN int asn1PD_Circle (OSCTXT* pctxt, Circle* pvalue);

EXTERN int asn1Init_Circle (Circle* pvalue);

/**************************************************************/
/*                                                            */
/*  GeometricProjection_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeometricProjection'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList GeometricProjection_regional;

EXTERN int asn1PE_GeometricProjection_regional (OSCTXT* pctxt, GeometricProjection_regional* pvalue);

EXTERN int asn1PD_GeometricProjection_regional (OSCTXT* pctxt, GeometricProjection_regional* pvalue);

EXTERN int asn1Init_GeometricProjection_regional (
   GeometricProjection_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  GeometricProjection                                       */
/*                                                            */
/**************************************************************/
/*
GeometricProjection ::= SEQUENCE {
   direction [0] HeadingSlice,
                    -- field of view over which this applies,
   extent [1] Extent OPTIONAL,
                    -- the spatial distance over which this
                    -- message applies and should be presented
   laneWidth [2] LaneWidth OPTIONAL, -- used when a width is needed
   circle [3] Circle, -- A point and radius
   regional [4] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN GeometricProjection {
   struct {
      OSUINT8 extentPresent : 1;
      OSUINT8 laneWidthPresent : 1;
      OSUINT8 regionalPresent : 1;
   } m;
   struct HeadingSlice *direction;
   OSUINT8 extent;
   OSUINT16 laneWidth;
   Circle circle;
   GeometricProjection_regional regional;
   OSRTDList extElem1;
} GeometricProjection;

EXTERN int asn1PE_GeometricProjection (OSCTXT* pctxt, GeometricProjection* pvalue);

EXTERN int asn1PD_GeometricProjection (OSCTXT* pctxt, GeometricProjection* pvalue);

EXTERN int asn1Init_GeometricProjection (GeometricProjection* pvalue);

/**************************************************************/
/*                                                            */
/*  ShapePointSet                                             */
/*                                                            */
/**************************************************************/
/*
ShapePointSet ::= SEQUENCE {
   anchor [0] Position3D OPTIONAL,
   laneWidth [1] LaneWidth OPTIONAL,
   directionality [2] DirectionOfUse OPTIONAL,
   nodeList [3] EXPLICIT NodeListXY,
   ...
}
*/
typedef struct EXTERN ShapePointSet {
   struct {
      OSUINT8 anchorPresent : 1;
      OSUINT8 laneWidthPresent : 1;
      OSUINT8 directionalityPresent : 1;
   } m;
   struct Position3D *anchor;
   OSUINT16 laneWidth;
   DirectionOfUse directionality;
   struct NodeListXY *nodeList;
   OSRTDList extElem1;
} ShapePointSet;

EXTERN int asn1PE_ShapePointSet (OSCTXT* pctxt, ShapePointSet* pvalue);

EXTERN int asn1PD_ShapePointSet (OSCTXT* pctxt, ShapePointSet* pvalue);

EXTERN int asn1Init_ShapePointSet (ShapePointSet* pvalue);

/**************************************************************/
/*                                                            */
/*  RegionOffsets                                             */
/*                                                            */
/**************************************************************/
/*
RegionOffsets ::= SEQUENCE {
   xOffset [0] OffsetLL-B16,
   yOffset [1] OffsetLL-B16,
   zOffset [2] OffsetLL-B16 OPTIONAL
            -- all in signed values where
            -- the LSB is in units of 1 meter
}
*/
typedef struct EXTERN RegionOffsets {
   struct {
      OSUINT8 zOffsetPresent : 1;
   } m;
   OffsetLL_B16 xOffset;
   OffsetLL_B16 yOffset;
   OffsetLL_B16 zOffset;
} RegionOffsets;

EXTERN int asn1PE_RegionOffsets (OSCTXT* pctxt, RegionOffsets* pvalue);

EXTERN int asn1PD_RegionOffsets (OSCTXT* pctxt, RegionOffsets* pvalue);

EXTERN int asn1Init_RegionOffsets (RegionOffsets* pvalue);

/**************************************************************/
/*                                                            */
/*  RegionList                                                */
/*                                                            */
/**************************************************************/
/*
RegionList ::= SEQUENCE (SIZE (1..64)) OF RegionOffsets
    the Position3D ref point (starting point or anchor)
    is found in the outer object.

*/
/* List of RegionOffsets */
typedef OSRTDList RegionList;

EXTERN int asn1PE_RegionList (OSCTXT* pctxt, RegionList* pvalue);

EXTERN int asn1PD_RegionList (OSCTXT* pctxt, RegionList* pvalue);

EXTERN int asn1Init_RegionList (RegionList* pvalue);

/**************************************************************/
/*                                                            */
/*  RegionPointSet                                            */
/*                                                            */
/**************************************************************/
/*
RegionPointSet ::= SEQUENCE {
   anchor [0] Position3D OPTIONAL,
   scale [1] Zoom OPTIONAL,
   nodeList [2] RegionList,
   ...
}
*/
typedef struct EXTERN RegionPointSet {
   struct {
      OSUINT8 anchorPresent : 1;
      OSUINT8 scalePresent : 1;
   } m;
   struct Position3D *anchor;
   Zoom scale;
   RegionList nodeList;
   OSRTDList extElem1;
} RegionPointSet;

EXTERN int asn1PE_RegionPointSet (OSCTXT* pctxt, RegionPointSet* pvalue);

EXTERN int asn1PD_RegionPointSet (OSCTXT* pctxt, RegionPointSet* pvalue);

EXTERN int asn1Init_RegionPointSet (RegionPointSet* pvalue);

/**************************************************************/
/*                                                            */
/*  ValidRegion_area                                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ValidRegion'
*/
/* Choice tag constants */

#define T_ValidRegion_area_shapePointSet 1
#define T_ValidRegion_area_circle       2
#define T_ValidRegion_area_regionPointSet 3

typedef struct EXTERN ValidRegion_area {
   OSINT32 t;
   union {
      /* t = 1 */
      ShapePointSet *shapePointSet;
      /* t = 2 */
      Circle *circle;
      /* t = 3 */
      RegionPointSet *regionPointSet;
   } u;
} ValidRegion_area;

EXTERN int asn1PE_ValidRegion_area (OSCTXT* pctxt, ValidRegion_area* pvalue);

EXTERN int asn1PD_ValidRegion_area (OSCTXT* pctxt, ValidRegion_area* pvalue);

EXTERN int asn1Init_ValidRegion_area (ValidRegion_area* pvalue);

/**************************************************************/
/*                                                            */
/*  ValidRegion                                               */
/*                                                            */
/**************************************************************/
/*
ValidRegion ::= SEQUENCE {
   direction [0] HeadingSlice,
                     -- field of view over which this applies,
   extent [1] Extent OPTIONAL,
                     -- the spatial distance over which this
                     -- message applies and should be presented
                     -- to the driver
   area [2] EXPLICIT CHOICE {
      shapePointSet [0] ShapePointSet,
                     -- A short road segment
      circle [1] Circle,
                     -- A point and radius
      regionPointSet [2] RegionPointSet
   }
}
*/
typedef struct EXTERN ValidRegion {
   struct {
      OSUINT8 extentPresent : 1;
   } m;
   struct HeadingSlice *direction;
   OSUINT8 extent;
   ValidRegion_area area;
} ValidRegion;

EXTERN int asn1PE_ValidRegion (OSCTXT* pctxt, ValidRegion* pvalue);

EXTERN int asn1PD_ValidRegion (OSCTXT* pctxt, ValidRegion* pvalue);

EXTERN int asn1Init_ValidRegion (ValidRegion* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath_description                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeographicalPath'
*/
/* Choice tag constants */

#define T_GeographicalPath_description_path 1
#define T_GeographicalPath_description_geometry 2
#define T_GeographicalPath_description_oldRegion 3
#define T_GeographicalPath_description_extElem1 4

typedef struct EXTERN GeographicalPath_description {
   OSINT32 t;
   union {
      /* t = 1 */
      OffsetSystem *path;
      /* t = 2 */
      GeometricProjection *geometry;
      /* t = 3 */
      ValidRegion *oldRegion;
      /* t = 4 */
      ASN1OpenType *extElem1;
   } u;
} GeographicalPath_description;

EXTERN int asn1PE_GeographicalPath_description (OSCTXT* pctxt, GeographicalPath_description* pvalue);

EXTERN int asn1PD_GeographicalPath_description (OSCTXT* pctxt, GeographicalPath_description* pvalue);

EXTERN int asn1Init_GeographicalPath_description (
   GeographicalPath_description* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath_regional                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GeographicalPath'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList GeographicalPath_regional;

EXTERN int asn1PE_GeographicalPath_regional (OSCTXT* pctxt, GeographicalPath_regional* pvalue);

EXTERN int asn1PD_GeographicalPath_regional (OSCTXT* pctxt, GeographicalPath_regional* pvalue);

EXTERN int asn1Init_GeographicalPath_regional (GeographicalPath_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  GeographicalPath                                          */
/*                                                            */
/**************************************************************/
/*
GeographicalPath ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
   id [1] RoadSegmentReferenceID OPTIONAL,
   anchor [2] Position3D OPTIONAL,
   laneWidth [3] LaneWidth OPTIONAL,
   directionality [4] DirectionOfUse OPTIONAL,
   closedPath [5] BOOLEAN OPTIONAL,
                    -- when true, last point closes to first
   direction [6] HeadingSlice OPTIONAL,
                    -- field of view over which this applies
   description [7] EXPLICIT CHOICE {
      path [0] OffsetSystem,
                   -- The XYZ and LLH system of paths
      geometry [1] GeometricProjection,
                   -- A projected circle from a point
      oldRegion [2] ValidRegion,
      ...
   } OPTIONAL,
   regional [8] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN GeographicalPath {
   struct {
      OSUINT8 namePresent : 1;
      OSUINT8 idPresent : 1;
      OSUINT8 anchorPresent : 1;
      OSUINT8 laneWidthPresent : 1;
      OSUINT8 directionalityPresent : 1;
      OSUINT8 closedPathPresent : 1;
      OSUINT8 directionPresent : 1;
      OSUINT8 descriptionPresent : 1;
      OSUINT8 regionalPresent : 1;
   } m;
   const char* name;
   struct RoadSegmentReferenceID *id;
   struct Position3D *anchor;
   OSUINT16 laneWidth;
   DirectionOfUse directionality;
   OSBOOL closedPath;
   struct HeadingSlice *direction;
   GeographicalPath_description description;
   GeographicalPath_regional regional;
   OSRTDList extElem1;
} GeographicalPath;

EXTERN int asn1PE_GeographicalPath (OSCTXT* pctxt, GeographicalPath* pvalue);

EXTERN int asn1PD_GeographicalPath (OSCTXT* pctxt, GeographicalPath* pvalue);

EXTERN int asn1Init_GeographicalPath (GeographicalPath* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame_regions                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerDataFrame'
*/
/* List of GeographicalPath */
typedef OSRTDList TravelerDataFrame_regions;

EXTERN int asn1PE_TravelerDataFrame_regions (OSCTXT* pctxt, TravelerDataFrame_regions* pvalue);

EXTERN int asn1PD_TravelerDataFrame_regions (OSCTXT* pctxt, TravelerDataFrame_regions* pvalue);

EXTERN int asn1Init_TravelerDataFrame_regions (TravelerDataFrame_regions* pvalue);

/**************************************************************/
/*                                                            */
/*  WorkZone_element_item                                     */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'WorkZone'
*/
/* Choice tag constants */

#define T_WorkZone_element_item_itis    1
#define T_WorkZone_element_item_text    2

typedef struct EXTERN WorkZone_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ITIScodes itis;
      /* t = 2 */
      ITIStextPhrase text;
   } u;
} WorkZone_element_item;

EXTERN int asn1PE_WorkZone_element_item (OSCTXT* pctxt, WorkZone_element_item* pvalue);

EXTERN int asn1PD_WorkZone_element_item (OSCTXT* pctxt, WorkZone_element_item* pvalue);

EXTERN int asn1Init_WorkZone_element_item (WorkZone_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  WorkZone_element                                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'WorkZone'
*/
typedef struct EXTERN WorkZone_element {
   WorkZone_element_item item;
} WorkZone_element;

EXTERN int asn1PE_WorkZone_element (OSCTXT* pctxt, WorkZone_element* pvalue);

EXTERN int asn1PD_WorkZone_element (OSCTXT* pctxt, WorkZone_element* pvalue);

EXTERN int asn1Init_WorkZone_element (WorkZone_element* pvalue);

/**************************************************************/
/*                                                            */
/*  WorkZone                                                  */
/*                                                            */
/**************************************************************/
/*
WorkZone ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] EXPLICIT CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of WorkZone_element */
typedef OSRTDList WorkZone;

EXTERN int asn1PE_WorkZone (OSCTXT* pctxt, WorkZone* pvalue);

EXTERN int asn1PD_WorkZone (OSCTXT* pctxt, WorkZone* pvalue);

EXTERN int asn1Init_WorkZone (WorkZone* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericSignage_element_item                               */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericSignage'
*/
/* Choice tag constants */

#define T_GenericSignage_element_item_itis 1
#define T_GenericSignage_element_item_text 2

typedef struct EXTERN GenericSignage_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ITIScodes itis;
      /* t = 2 */
      ITIStextPhrase text;
   } u;
} GenericSignage_element_item;

EXTERN int asn1PE_GenericSignage_element_item (OSCTXT* pctxt, GenericSignage_element_item* pvalue);

EXTERN int asn1PD_GenericSignage_element_item (OSCTXT* pctxt, GenericSignage_element_item* pvalue);

EXTERN int asn1Init_GenericSignage_element_item (GenericSignage_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericSignage_element                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericSignage'
*/
typedef struct EXTERN GenericSignage_element {
   GenericSignage_element_item item;
} GenericSignage_element;

EXTERN int asn1PE_GenericSignage_element (OSCTXT* pctxt, GenericSignage_element* pvalue);

EXTERN int asn1PD_GenericSignage_element (OSCTXT* pctxt, GenericSignage_element* pvalue);

EXTERN int asn1Init_GenericSignage_element (GenericSignage_element* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericSignage                                            */
/*                                                            */
/**************************************************************/
/*
GenericSignage ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] EXPLICIT CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of GenericSignage_element */
typedef OSRTDList GenericSignage;

EXTERN int asn1PE_GenericSignage (OSCTXT* pctxt, GenericSignage* pvalue);

EXTERN int asn1PD_GenericSignage (OSCTXT* pctxt, GenericSignage* pvalue);

EXTERN int asn1Init_GenericSignage (GenericSignage* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimit_element_item                                   */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SpeedLimit'
*/
/* Choice tag constants */

#define T_SpeedLimit_element_item_itis  1
#define T_SpeedLimit_element_item_text  2

typedef struct EXTERN SpeedLimit_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ITIScodes itis;
      /* t = 2 */
      ITIStextPhrase text;
   } u;
} SpeedLimit_element_item;

EXTERN int asn1PE_SpeedLimit_element_item (OSCTXT* pctxt, SpeedLimit_element_item* pvalue);

EXTERN int asn1PD_SpeedLimit_element_item (OSCTXT* pctxt, SpeedLimit_element_item* pvalue);

EXTERN int asn1Init_SpeedLimit_element_item (SpeedLimit_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimit_element                                        */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SpeedLimit'
*/
typedef struct EXTERN SpeedLimit_element {
   SpeedLimit_element_item item;
} SpeedLimit_element;

EXTERN int asn1PE_SpeedLimit_element (OSCTXT* pctxt, SpeedLimit_element* pvalue);

EXTERN int asn1PD_SpeedLimit_element (OSCTXT* pctxt, SpeedLimit_element* pvalue);

EXTERN int asn1Init_SpeedLimit_element (SpeedLimit_element* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedLimit                                                */
/*                                                            */
/**************************************************************/
/*
SpeedLimit ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] EXPLICIT CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of SpeedLimit_element */
typedef OSRTDList SpeedLimit;

EXTERN int asn1PE_SpeedLimit (OSCTXT* pctxt, SpeedLimit* pvalue);

EXTERN int asn1PD_SpeedLimit (OSCTXT* pctxt, SpeedLimit* pvalue);

EXTERN int asn1Init_SpeedLimit (SpeedLimit* pvalue);

/**************************************************************/
/*                                                            */
/*  ExitService_element_item                                  */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ExitService'
*/
/* Choice tag constants */

#define T_ExitService_element_item_itis 1
#define T_ExitService_element_item_text 2

typedef struct EXTERN ExitService_element_item {
   OSINT32 t;
   union {
      /* t = 1 */
      ITIScodes itis;
      /* t = 2 */
      ITIStextPhrase text;
   } u;
} ExitService_element_item;

EXTERN int asn1PE_ExitService_element_item (OSCTXT* pctxt, ExitService_element_item* pvalue);

EXTERN int asn1PD_ExitService_element_item (OSCTXT* pctxt, ExitService_element_item* pvalue);

EXTERN int asn1Init_ExitService_element_item (ExitService_element_item* pvalue);

/**************************************************************/
/*                                                            */
/*  ExitService_element                                       */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ExitService'
*/
typedef struct EXTERN ExitService_element {
   ExitService_element_item item;
} ExitService_element;

EXTERN int asn1PE_ExitService_element (OSCTXT* pctxt, ExitService_element* pvalue);

EXTERN int asn1PD_ExitService_element (OSCTXT* pctxt, ExitService_element* pvalue);

EXTERN int asn1Init_ExitService_element (ExitService_element* pvalue);

/**************************************************************/
/*                                                            */
/*  ExitService                                               */
/*                                                            */
/**************************************************************/
/*
ExitService ::= SEQUENCE (SIZE (1..16)) OF SEQUENCE {
   item [0] EXPLICIT CHOICE {
      itis [0] ITIScodes,
      text [1] ITIStextPhrase
   }
}
*/
/* List of ExitService_element */
typedef OSRTDList ExitService;

EXTERN int asn1PE_ExitService (OSCTXT* pctxt, ExitService* pvalue);

EXTERN int asn1PD_ExitService (OSCTXT* pctxt, ExitService* pvalue);

EXTERN int asn1Init_ExitService (ExitService* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame_content                                 */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerDataFrame'
*/
/* Choice tag constants */

#define T_TravelerDataFrame_content_advisory 1
#define T_TravelerDataFrame_content_workZone 2
#define T_TravelerDataFrame_content_genericSign 3
#define T_TravelerDataFrame_content_speedLimit 4
#define T_TravelerDataFrame_content_exitService 5

typedef struct EXTERN TravelerDataFrame_content {
   OSINT32 t;
   union {
      /* t = 1 */
      ITIScodesAndText *advisory;
      /* t = 2 */
      WorkZone *workZone;
      /* t = 3 */
      GenericSignage *genericSign;
      /* t = 4 */
      SpeedLimit *speedLimit;
      /* t = 5 */
      ExitService *exitService;
   } u;
} TravelerDataFrame_content;

EXTERN int asn1PE_TravelerDataFrame_content (OSCTXT* pctxt, TravelerDataFrame_content* pvalue);

EXTERN int asn1PD_TravelerDataFrame_content (OSCTXT* pctxt, TravelerDataFrame_content* pvalue);

EXTERN int asn1Init_TravelerDataFrame_content (TravelerDataFrame_content* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrameNewPartIIIContent                        */
/*                                                            */
/**************************************************************/
/*
TravelerDataFrameNewPartIIIContent ::= CHOICE {
   -- Add new content types for future revisions here
   frictionInfo [0] FrictionInformation,
   ...
}
*/
/* Choice tag constants */

#define T_TravelerDataFrameNewPartIIIContent_frictionInfo 1
#define T_TravelerDataFrameNewPartIIIContent_extElem1 2

typedef struct EXTERN TravelerDataFrameNewPartIIIContent {
   OSINT32 t;
   union {
      /* t = 1 */
      struct FrictionInformation *frictionInfo;
      /* t = 2 */
      ASN1OpenType *extElem1;
   } u;
} TravelerDataFrameNewPartIIIContent;

EXTERN int asn1PE_TravelerDataFrameNewPartIIIContent (OSCTXT* pctxt, TravelerDataFrameNewPartIIIContent* pvalue);

EXTERN int asn1PD_TravelerDataFrameNewPartIIIContent (OSCTXT* pctxt, TravelerDataFrameNewPartIIIContent* pvalue);

EXTERN int asn1Init_TravelerDataFrameNewPartIIIContent (
   TravelerDataFrameNewPartIIIContent* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrame                                         */
/*                                                            */
/**************************************************************/
/*
TravelerDataFrame ::= SEQUENCE {
   -- Part I, Frame header
   notUsed [0] SSPindex,
        -- always set to 0 and carries no meaning;
        -- legacy field maintained for backward compatibility
   frameType [1] TravelerInfoType, -- (enum, advisory or road sign)
   msgId [2] EXPLICIT CHOICE {
      furtherInfoID [0] FurtherInfoID, -- links to ATIS msg
      roadSignID [1] RoadSignID
   },
   startYear [3] DYear OPTIONAL, -- only if needed
   startTime [4] MinuteOfTheYear,
   durationTime [5] MinutesDuration,
   priority [6] SignPrority,
   -- Part II, Applicable Regions of Use
   notUsed1 [7] SSPindex, -- set to 0
   regions [8] SEQUENCE (SIZE (1..16)) OF GeographicalPath,
   -- Part III, Content
   notUsed2 [9] SSPindex, -- set to 0
   notUsed3 [10] SSPindex, -- set to 0
   content [11] EXPLICIT CHOICE {
      advisory [0] ITIScodesAndText,
                               -- typical ITIS warnings
      workZone [1] WorkZone,
                               -- work zone signs and directions
      genericSign [2] GenericSignage,
                               -- MUTCD signs and directions
      speedLimit [3] SpeedLimit,
                               -- speed limits and cautions
      exitService [4] ExitService
   },
   url [12] URL-Short OPTIONAL,
   -- New Part III content
   ...,
   contentNew [13] EXPLICIT TravelerDataFrameNewPartIIIContent
}
*/
typedef struct EXTERN TravelerDataFrame {
   struct {
      OSUINT8 startYearPresent : 1;
      OSUINT8 urlPresent : 1;
      OSUINT8 contentNewPresent : 1;
   } m;
   OSUINT8 notUsed;
   TravelerInfoType frameType;
   TravelerDataFrame_msgId msgId;
   OSUINT16 startYear;
   OSUINT32 startTime;
   MinutesDuration durationTime;
   SignPrority priority;
   OSUINT8 notUsed1;
   TravelerDataFrame_regions regions;
   OSUINT8 notUsed2;
   OSUINT8 notUsed3;
   TravelerDataFrame_content content;
   URL_Short url;
   TravelerDataFrameNewPartIIIContent contentNew;
   OSRTDList extElem1;
} TravelerDataFrame;

EXTERN int asn1PE_TravelerDataFrame (OSCTXT* pctxt, TravelerDataFrame* pvalue);

EXTERN int asn1PD_TravelerDataFrame (OSCTXT* pctxt, TravelerDataFrame* pvalue);

EXTERN int asn1Init_TravelerDataFrame (TravelerDataFrame* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerDataFrameList                                     */
/*                                                            */
/**************************************************************/
/*
TravelerDataFrameList ::= SEQUENCE (SIZE (1..8)) OF TravelerDataFrame
*/
/* List of TravelerDataFrame */
typedef OSRTDList TravelerDataFrameList;

EXTERN int asn1PE_TravelerDataFrameList (OSCTXT* pctxt, TravelerDataFrameList* pvalue);

EXTERN int asn1PD_TravelerDataFrameList (OSCTXT* pctxt, TravelerDataFrameList* pvalue);

EXTERN int asn1Init_TravelerDataFrameList (TravelerDataFrameList* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInformation_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'TravelerInformation'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList TravelerInformation_regional;

EXTERN int asn1PE_TravelerInformation_regional (OSCTXT* pctxt, TravelerInformation_regional* pvalue);

EXTERN int asn1PD_TravelerInformation_regional (OSCTXT* pctxt, TravelerInformation_regional* pvalue);

EXTERN int asn1Init_TravelerInformation_regional (
   TravelerInformation_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  TravelerInformation                                       */
/*                                                            */
/**************************************************************/
/*
TravelerInformation ::= SEQUENCE {
   msgCnt [0] MsgCount,
   timeStamp [1] MinuteOfTheYear OPTIONAL,
   packetID [2] UniqueMSGID OPTIONAL,
   urlB [3] URL-Base OPTIONAL,
   -- A set of one or more self contained
   -- traveler information messages (frames)
   dataFrames [4] TravelerDataFrameList,
   regional [5] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN TravelerInformation {
   struct {
      OSUINT8 timeStampPresent : 1;
      OSUINT8 packetIDPresent : 1;
      OSUINT8 urlBPresent : 1;
      OSUINT8 regionalPresent : 1;
   } m;
   OSUINT8 msgCnt;
   OSUINT32 timeStamp;
   UniqueMSGID packetID;
   URL_Base urlB;
   TravelerDataFrameList dataFrames;
   TravelerInformation_regional regional;
   OSRTDList extElem1;
} TravelerInformation;

EXTERN int asn1PE_TravelerInformation (OSCTXT* pctxt, TravelerInformation* pvalue);

EXTERN int asn1PD_TravelerInformation (OSCTXT* pctxt, TravelerInformation* pvalue);

EXTERN int asn1Init_TravelerInformation (TravelerInformation* pvalue);

#ifdef __cplusplus
}
#endif

#endif
