/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.7.0, Date: 25-May-2023.
 *
 * Command:  asn1c CooperativeControlMsg-v1-ph.asn J2735-AddGrpB.asn J2735-AddGrpC.asn J2735-BasicSafetyMessage-v4.asn J2735-CommonSafetyRequest.asn J2735-Common-v7.asn J2735-EmergencyVehicleAlert.asn J2735-IntersectionCollision.asn J2735-ITIS.asn J2735-MapData-v1.asn J2735-MessageFrame-v5.asn J2735-NMEAcorrections.asn J2735-NTCIP.asn J2735-PersonalSafetyMessage.asn J2735-ProbeDataManagement.asn J2735-ProbeVehicleData.asn J2735-REGION.asn J2735-RoadSideAlert.asn J2735-RTCMcorrections.asn J2735-SignalRequestMessage.asn J2735-SignalStatusMessage.asn J2735-SPAT-v2.asn J2735-TestMessage00.asn J2735-TestMessage01.asn J2735-TestMessage02.asn J2735-TestMessage03.asn J2735-TestMessage04.asn J2735-TestMessage05.asn J2735-TestMessage06.asn J2735-TestMessage07.asn J2735-TestMessage08.asn J2735-TestMessage09.asn J2735-TestMessage10.asn J2735-TestMessage11.asn J2735-TestMessage12.asn J2735-TestMessage13.asn J2735-TestMessage14.asn J2735-TestMessage15.asn J2735-TravelerInformation-v2.asn MnvrSharingCoordMsg-v1-ph.asn PersonalSafetyMsg2-v1-ph.asn ProbeDataConfig-v0.30.asn ProbeDataReport-v0.30.asn RoadGeoAttributes-v2-ph.asn RoadSafetyMsg-v1-ph.asn RoadWeatherMessage.asn SensorDataSharingMsg-v1-ph.asn SignalControlAndPrioritizationRequest-v1-ph.asn SignalControlAndPrioritizationStatus-v1-ph.asn TollAdvertisementMsg-v0.10-ph.asn TollUsageAckMsg-v0.10-ph.asn TollUsageMsg-v0.10-ph.asn TrafficSignalPhaseAndTiming-v1-ph.asn -c -per -compact
 */
#ifndef ADDGRPB_H
#define ADDGRPB_H

#ifdef __cplusplus
extern "C" {
#endif

#include "rtkey.h"
#include "rtpersrc/asn1per.h"

/**
 * Header file for ASN.1 module AddGrpB
 */
/**************************************************************/
/*                                                            */
/*  Angle                                                     */
/*                                                            */
/**************************************************************/
/*
Angle ::= INTEGER (0..239)
    Unsigned units of 1.5 degree, in 1 octet
    the true north is 0, positive is clockwise
    the values 240 to 254 shall not be sent
    the value 255 (0xFF) indicates an invalid value

*/
typedef OSUINT8 Angle;

EXTERN int asn1PE_Angle (OSCTXT* pctxt, Angle value);

EXTERN int asn1PD_Angle (OSCTXT* pctxt, Angle* pvalue);

/**************************************************************/
/*                                                            */
/*  Day                                                       */
/*                                                            */
/**************************************************************/
/*
Day ::= INTEGER (0..255)
    BCD coding of Day of Month, in 1 octet
    values with nibble values between 1010 and 1111 shall not be sent
    except that the value xxx (0xFF shall indicate an invalid value

*/
typedef OSUINT8 Day;

EXTERN int asn1PE_Day (OSCTXT* pctxt, Day value);

EXTERN int asn1PD_Day (OSCTXT* pctxt, Day* pvalue);

#include "rtxsrc/rtxEnum.h"
/**************************************************************/
/*                                                            */
/*  DayOfWeek                                                 */
/*                                                            */
/**************************************************************/
/*
DayOfWeek ::= ENUMERATED { unknown(0), monday(1), tuesday(2), wednesday(3), thursday(4), friday(5), saturday(6), sunday(7) }
    Encoding as per above, in 3 bits
    the value 0x00 shall indicate an invalid value

*/
typedef enum {
   unknown = 0,
   monday = 1,
   tuesday = 2,
   wednesday = 3,
   thursday = 4,
   friday = 5,
   saturday = 6,
   sunday = 7
} DayOfWeek_Root;

typedef OSUINT8 DayOfWeek;

EXTERN int asn1PE_DayOfWeek (OSCTXT* pctxt, DayOfWeek value);

EXTERN int asn1PD_DayOfWeek (OSCTXT* pctxt, DayOfWeek* pvalue);

EXTERN extern const OSEnumItem DayOfWeek_ENUMTAB[];
#define DayOfWeek_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* DayOfWeek_ToString (OSINT32 value);

EXTERN int DayOfWeek_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, DayOfWeek* pvalue);

EXTERN int DayOfWeek_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, DayOfWeek* pvalue);

/**************************************************************/
/*                                                            */
/*  DegreesLat                                                */
/*                                                            */
/**************************************************************/
/*
DegreesLat ::= INTEGER (-90..90)
    Signed units of degrees, in 1 octets
    the values  +91 to +126 shall not be sent
    the values -128 to  -91 shall not be sent
    the value 127 (0x7F) shall indicate an invalid value

*/
typedef OSINT8 DegreesLat;

EXTERN int asn1PE_DegreesLat (OSCTXT* pctxt, DegreesLat value);

EXTERN int asn1PD_DegreesLat (OSCTXT* pctxt, DegreesLat* pvalue);

/**************************************************************/
/*                                                            */
/*  DegreesLong                                               */
/*                                                            */
/**************************************************************/
/*
DegreesLong ::= INTEGER (-180..180)
    Signed units of degrees, in 2 octets
    the values +181 to +32766 shall not be sent
    the values -181 to -32768 shall not be sent
    the value 32767 (0x7FFF shall indicate an invalid value

*/
typedef OSINT16 DegreesLong;

EXTERN int asn1PE_DegreesLong (OSCTXT* pctxt, DegreesLong value);

EXTERN int asn1PD_DegreesLong (OSCTXT* pctxt, DegreesLong* pvalue);

/**************************************************************/
/*                                                            */
/*  Elevation                                                 */
/*                                                            */
/**************************************************************/
/*
Elevation ::= INTEGER (-32768..32767)
   Signed units of 0.1m (10cm), in 2 octets
   the value 32767 (0x7FFF) shall indicate an invalid value

*/
typedef OSINT16 Elevation;

EXTERN int asn1PE_Elevation (OSCTXT* pctxt, Elevation value);

EXTERN int asn1PD_Elevation (OSCTXT* pctxt, Elevation* pvalue);

/**************************************************************/
/*                                                            */
/*  Holiday                                                   */
/*                                                            */
/**************************************************************/
/*
Holiday ::= ENUMERATED { weekday(0), holiday(1) }
    Encoding as per above, in 1 bit

*/
typedef enum {
   weekday = 0,
   holiday = 1
} Holiday_Root;

typedef OSUINT8 Holiday;

EXTERN int asn1PE_Holiday (OSCTXT* pctxt, Holiday value);

EXTERN int asn1PD_Holiday (OSCTXT* pctxt, Holiday* pvalue);

EXTERN extern const OSEnumItem Holiday_ENUMTAB[];
#define Holiday_ENUMTABSIZE 2

EXTERN const OSUTF8CHAR* Holiday_ToString (OSINT32 value);

EXTERN int Holiday_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, Holiday* pvalue);

EXTERN int Holiday_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, Holiday* pvalue);

/**************************************************************/
/*                                                            */
/*  Hour                                                      */
/*                                                            */
/**************************************************************/
/*
Hour ::= INTEGER (0..255)
    BCD coding of Hour of a Day, in 1 octet
    values above upper nibble 0010 and lower nibble 0100 shall not be sent
    values with lower nibble values between 1010 and 1111 shall not be sent
    except that the value 255 (0xFF) shall indicate an invalid value

*/
typedef OSUINT8 Hour;

EXTERN int asn1PE_Hour (OSCTXT* pctxt, Hour value);

EXTERN int asn1PD_Hour (OSCTXT* pctxt, Hour* pvalue);

/**************************************************************/
/*                                                            */
/*  LatitudeDMS                                               */
/*                                                            */
/**************************************************************/
/*
LatitudeDMS ::= INTEGER (-32400000..32400000)
    Signed units of 0.01 seconds of a minute of a degree of Latitude
    Providing a range of plus-minus 90 degrees
    in a 4 octet value when implicit or in BER forms
    the value 0x7FFF FFFF shall indicate an invalid value

*/
typedef OSINT32 LatitudeDMS;

EXTERN int asn1PE_LatitudeDMS (OSCTXT* pctxt, LatitudeDMS value);

EXTERN int asn1PD_LatitudeDMS (OSCTXT* pctxt, LatitudeDMS* pvalue);

/**************************************************************/
/*                                                            */
/*  LongitudeDMS                                              */
/*                                                            */
/**************************************************************/
/*
LongitudeDMS ::= INTEGER (-64800000..64800000)
    Signed units of 0.01 seconds of a minute of a degree of Longitude
    Providing a range of plus-minus 180 degrees
    in a 4 octet value when implicit or in BER forms
    the value 0x7FFF FFFF shall indicate an invalid value

*/
typedef OSINT32 LongitudeDMS;

EXTERN int asn1PE_LongitudeDMS (OSCTXT* pctxt, LongitudeDMS value);

EXTERN int asn1PD_LongitudeDMS (OSCTXT* pctxt, LongitudeDMS* pvalue);

/**************************************************************/
/*                                                            */
/*  MaxTimetoChange                                           */
/*                                                            */
/**************************************************************/
/*
MaxTimetoChange ::= INTEGER (0..2402)
    Unsigned units of 0.1 seconds, in 2 octets
    the value 2401 shall indicate 'forever'
    the values 2402 to 65534 shall not be sent
    the value 65535 (0xFFFF) shall indicate an invalid value

*/
typedef OSUINT16 MaxTimetoChange;

EXTERN int asn1PE_MaxTimetoChange (OSCTXT* pctxt, MaxTimetoChange value);

EXTERN int asn1PD_MaxTimetoChange (OSCTXT* pctxt, MaxTimetoChange* pvalue);

/**************************************************************/
/*                                                            */
/*  MinTimetoChange                                           */
/*                                                            */
/**************************************************************/
/*
MinTimetoChange ::= INTEGER (0..2402)
    Unsigned units of 0.1 seconds, in 2 octets
    the value 2401 shall indicate 'forever'
    the values 2402 to 32766 shall not be sent
    the value 32767(0x7FFF) shall indicate an invalid value
    Note that:
    The MSB is used as a flag and set to one to
    indicate that the value does not count down.
    Under this condition the movement phase may end
    immediately if certain condition are meet.

*/
typedef OSUINT16 MinTimetoChange;

EXTERN int asn1PE_MinTimetoChange (OSCTXT* pctxt, MinTimetoChange value);

EXTERN int asn1PD_MinTimetoChange (OSCTXT* pctxt, MinTimetoChange* pvalue);

/**************************************************************/
/*                                                            */
/*  Minute                                                    */
/*                                                            */
/**************************************************************/
/*
Minute ::= INTEGER (0..255)
    BCD coding of Minute of an Hour, in 1 octet
    values above a combined BCD value of 59 (>59)
    (i.e., 0110 0000) shall not be sent
    except that value 255 (0xFF) shall indicate an invalid value

*/
typedef OSUINT8 Minute;

EXTERN int asn1PE_Minute (OSCTXT* pctxt, Minute value);

EXTERN int asn1PD_Minute (OSCTXT* pctxt, Minute* pvalue);

/**************************************************************/
/*                                                            */
/*  MinutesAngle                                              */
/*                                                            */
/**************************************************************/
/*
MinutesAngle ::= INTEGER (0..59)
    Unsigned units of minutes of an angle, in 1 octet
    values above 59 shall not be sent
    except that value 255 (0xFF) shall indicate an invalid value

*/
typedef OSUINT8 MinutesAngle;

EXTERN int asn1PE_MinutesAngle (OSCTXT* pctxt, MinutesAngle value);

EXTERN int asn1PD_MinutesAngle (OSCTXT* pctxt, MinutesAngle* pvalue);

/**************************************************************/
/*                                                            */
/*  Month                                                     */
/*                                                            */
/**************************************************************/
/*
Month ::= INTEGER (1..255)
    BCD coding of Month of a year, in 1 octet
    values above a combined BCD value of 12 (>12)
    (i.e., 0001 0011) shall not be sent
    except that value 255 (0xFF) shall indicate an invalid value

*/
typedef OSUINT8 Month;

EXTERN int asn1PE_Month (OSCTXT* pctxt, Month value);

EXTERN int asn1PD_Month (OSCTXT* pctxt, Month* pvalue);

/**************************************************************/
/*                                                            */
/*  MsgCount                                                  */
/*                                                            */
/**************************************************************/
/*
MsgCount ::= INTEGER (0..255)
    a count value which is incremented with each use
    the next value after 255 shall be one
    value 0 (0x00) shall indicate that MsgCount is not available

*/
typedef OSUINT8 MsgCount;

EXTERN int asn1PE_MsgCount (OSCTXT* pctxt, MsgCount value);

EXTERN int asn1PD_MsgCount (OSCTXT* pctxt, MsgCount* pvalue);

/**************************************************************/
/*                                                            */
/*  Second                                                    */
/*                                                            */
/**************************************************************/
/*
Second ::= INTEGER (0..60)
    BCD coding of a second of time, in 1 octet
    values above a combined BCD value of 60
    (i.e., 0110 0000) shall not be sent
    except that value 255 (0xFF) shall indicate an invalid value

*/
typedef OSUINT8 Second;

EXTERN int asn1PE_Second (OSCTXT* pctxt, Second value);

EXTERN int asn1PD_Second (OSCTXT* pctxt, Second* pvalue);

/**************************************************************/
/*                                                            */
/*  SecondsAngle                                              */
/*                                                            */
/**************************************************************/
/*
SecondsAngle ::= INTEGER (0..5999)
    Unsigned units of 1/100th seconds of angle, in 2 octets
    values from 6000 to 65534 shall not be sent
    the value 65535 (0xFFFF) shall indicate an invalid value

*/
typedef OSUINT16 SecondsAngle;

EXTERN int asn1PE_SecondsAngle (OSCTXT* pctxt, SecondsAngle value);

EXTERN int asn1PD_SecondsAngle (OSCTXT* pctxt, SecondsAngle* pvalue);

/**************************************************************/
/*                                                            */
/*  SummerTime                                                */
/*                                                            */
/**************************************************************/
/*
SummerTime ::= ENUMERATED { notInSummerTime(0), inSummerTime(1) }
    Encoding as per above, in 1 bit

*/
typedef enum {
   notInSummerTime = 0,
   inSummerTime = 1
} SummerTime_Root;

typedef OSUINT8 SummerTime;

EXTERN int asn1PE_SummerTime (OSCTXT* pctxt, SummerTime value);

EXTERN int asn1PD_SummerTime (OSCTXT* pctxt, SummerTime* pvalue);

EXTERN extern const OSEnumItem SummerTime_ENUMTAB[];
#define SummerTime_ENUMTABSIZE 2

EXTERN const OSUTF8CHAR* SummerTime_ToString (OSINT32 value);

EXTERN int SummerTime_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, SummerTime* pvalue);

EXTERN int SummerTime_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, SummerTime* pvalue);

/**************************************************************/
/*                                                            */
/*  TenthSecond                                               */
/*                                                            */
/**************************************************************/
/*
TenthSecond ::= INTEGER (0..9)
    Unsigned units of 100 milliseconds, in 1 octet
    values from 10 to 254 shall not be sent
    the value 255 (0xFF) shall indicate an invalid value

*/
typedef OSUINT8 TenthSecond;

EXTERN int asn1PE_TenthSecond (OSCTXT* pctxt, TenthSecond value);

EXTERN int asn1PD_TenthSecond (OSCTXT* pctxt, TenthSecond* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeRemaining                                             */
/*                                                            */
/**************************************************************/
/*
TimeRemaining ::= INTEGER (0..9001)
     Unsigned units of 0.1 seconds, spanning 15 minutes, in 2 octets
     the value 9001 shall indicate 'forever'
     values from 9002 to 65534 shall not be sent
     the value 65535 (0xFFFF) shall indicate an invalid value

*/
typedef OSUINT16 TimeRemaining;

EXTERN int asn1PE_TimeRemaining (OSCTXT* pctxt, TimeRemaining value);

EXTERN int asn1PD_TimeRemaining (OSCTXT* pctxt, TimeRemaining* pvalue);

/**************************************************************/
/*                                                            */
/*  Year                                                      */
/*                                                            */
/**************************************************************/
/*
Year ::= INTEGER (1..65535)
    BCD coding of four digits of the year A.D. in 2 octets
    values with nibble values between 1010 and 1111 shall not be sent
    except that the value 65535 (0xFFFF) shall indicate an invalid value

*/
typedef OSUINT16 Year;

EXTERN int asn1PE_Year (OSCTXT* pctxt, Year value);

EXTERN int asn1PD_Year (OSCTXT* pctxt, Year* pvalue);

/**************************************************************/
/*                                                            */
/*  LatitudeDMS2                                              */
/*                                                            */
/**************************************************************/
/*
LatitudeDMS2 ::= SEQUENCE {
   d [0] DegreesLat, -- units of degrees
   m [1] MinutesAngle, -- units of minutes
   s [2] SecondsAngle -- units of 1/100th seconds
}
      total size of 4 octets (32 bits) when implicit encoding is used

*/
typedef struct EXTERN LatitudeDMS2 {
   DegreesLat d;
   MinutesAngle m_;
   SecondsAngle s;
} LatitudeDMS2;

EXTERN int asn1PE_LatitudeDMS2 (OSCTXT* pctxt, LatitudeDMS2* pvalue);

EXTERN int asn1PD_LatitudeDMS2 (OSCTXT* pctxt, LatitudeDMS2* pvalue);

/**************************************************************/
/*                                                            */
/*  LongitudeDMS2                                             */
/*                                                            */
/**************************************************************/
/*
LongitudeDMS2 ::= SEQUENCE {
   d [0] DegreesLong, -- units of degrees
   m [1] MinutesAngle, -- units of minutes
   s [2] SecondsAngle -- units of 1/100th seconds
}
      total size of 5 octets (40 bits) when implicit encoding is used

*/
typedef struct EXTERN LongitudeDMS2 {
   DegreesLong d;
   MinutesAngle m_;
   SecondsAngle s;
} LongitudeDMS2;

EXTERN int asn1PE_LongitudeDMS2 (OSCTXT* pctxt, LongitudeDMS2* pvalue);

EXTERN int asn1PD_LongitudeDMS2 (OSCTXT* pctxt, LongitudeDMS2* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LLdms_48b                                            */
/*                                                            */
/**************************************************************/
/*
Node-LLdms-48b ::= SEQUENCE {
   lon [0] LongitudeDMS,
   lat [1] LatitudeDMS
}
*/
typedef struct EXTERN Node_LLdms_48b {
   LongitudeDMS lon;
   LatitudeDMS lat;
} Node_LLdms_48b;

EXTERN int asn1PE_Node_LLdms_48b (OSCTXT* pctxt, Node_LLdms_48b* pvalue);

EXTERN int asn1PD_Node_LLdms_48b (OSCTXT* pctxt, Node_LLdms_48b* pvalue);

/**************************************************************/
/*                                                            */
/*  Node_LLdms_80b                                            */
/*                                                            */
/**************************************************************/
/*
Node-LLdms-80b ::= SEQUENCE {
   lon [0] LongitudeDMS2,
   lat [1] LatitudeDMS2
}
*/
typedef struct EXTERN Node_LLdms_80b {
   LongitudeDMS2 lon;
   LatitudeDMS2 lat;
} Node_LLdms_80b;

EXTERN int asn1PE_Node_LLdms_80b (OSCTXT* pctxt, Node_LLdms_80b* pvalue);

EXTERN int asn1PD_Node_LLdms_80b (OSCTXT* pctxt, Node_LLdms_80b* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneDataAttribute_addGrpB                                 */
/*                                                            */
/**************************************************************/
/*
LaneDataAttribute-addGrpB ::= SEQUENCE {

   ...
}
*/
typedef struct EXTERN LaneDataAttribute_addGrpB {
   OSRTDList extElem1;
} LaneDataAttribute_addGrpB;

EXTERN int asn1PE_LaneDataAttribute_addGrpB (OSCTXT* pctxt, LaneDataAttribute_addGrpB* pvalue);

EXTERN int asn1PD_LaneDataAttribute_addGrpB (OSCTXT* pctxt, LaneDataAttribute_addGrpB* pvalue);

EXTERN int asn1Init_LaneDataAttribute_addGrpB (LaneDataAttribute_addGrpB* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementEvent_addGrpB                                     */
/*                                                            */
/**************************************************************/
/*
MovementEvent-addGrpB ::= SEQUENCE {
   -- A set of countdown style time-to-change values
   -- all in units of 0.1 seconds and following
   -- the naming of the base V2X standard
   startTime [0] TimeRemaining OPTIONAL,
               -- When this phase 1st started
   minEndTime [1] MinTimetoChange,
               -- Expected shortest end time
   maxEndTime [2] MaxTimetoChange OPTIONAL,
               -- Expected longest end time
   likelyTime [3] TimeRemaining OPTIONAL,
               -- Best predicted value based on other data
   confidence [4] TimeIntervalConfidence OPTIONAL,
               -- Applies to above time element only
   nextTime [5] TimeRemaining OPTIONAL,
   ...
}
*/
typedef struct EXTERN MovementEvent_addGrpB {
   struct {
      OSUINT8 startTimePresent : 1;
      OSUINT8 maxEndTimePresent : 1;
      OSUINT8 likelyTimePresent : 1;
      OSUINT8 confidencePresent : 1;
      OSUINT8 nextTimePresent : 1;
   } m;
   TimeRemaining startTime;
   MinTimetoChange minEndTime;
   MaxTimetoChange maxEndTime;
   TimeRemaining likelyTime;
   OSUINT8 confidence;
   TimeRemaining nextTime;
   OSRTDList extElem1;
} MovementEvent_addGrpB;

EXTERN int asn1PE_MovementEvent_addGrpB (OSCTXT* pctxt, MovementEvent_addGrpB* pvalue);

EXTERN int asn1PD_MovementEvent_addGrpB (OSCTXT* pctxt, MovementEvent_addGrpB* pvalue);

EXTERN int asn1Init_MovementEvent_addGrpB (MovementEvent_addGrpB* pvalue);

/**************************************************************/
/*                                                            */
/*  NodeOffsetPointXY_addGrpB                                 */
/*                                                            */
/**************************************************************/
/*
NodeOffsetPointXY-addGrpB ::= CHOICE {
   -- Full position expressed in units of 0.01 seconds
   posA [0] Node-LLdms-48b,
   -- Full position expressed in multiple elements in
   -- an DD.MM.SS.sss style format
   posB [1] Node-LLdms-80b,
   ...
}
*/
/* Choice tag constants */

#define T_NodeOffsetPointXY_addGrpB_posA 1
#define T_NodeOffsetPointXY_addGrpB_posB 2
#define T_NodeOffsetPointXY_addGrpB_extElem1 3

typedef struct EXTERN NodeOffsetPointXY_addGrpB {
   OSINT32 t;
   union {
      /* t = 1 */
      Node_LLdms_48b *posA;
      /* t = 2 */
      Node_LLdms_80b *posB;
      /* t = 3 */
      ASN1OpenType *extElem1;
   } u;
} NodeOffsetPointXY_addGrpB;

EXTERN int asn1PE_NodeOffsetPointXY_addGrpB (OSCTXT* pctxt, NodeOffsetPointXY_addGrpB* pvalue);

EXTERN int asn1PD_NodeOffsetPointXY_addGrpB (OSCTXT* pctxt, NodeOffsetPointXY_addGrpB* pvalue);

EXTERN int asn1Init_NodeOffsetPointXY_addGrpB (NodeOffsetPointXY_addGrpB* pvalue);

/**************************************************************/
/*                                                            */
/*  Position3D_addGrpB                                        */
/*                                                            */
/**************************************************************/
/*
Position3D-addGrpB ::= SEQUENCE {
   latitude [0] LatitudeDMS2,
   longitude [1] LongitudeDMS2,
   elevation [2] Elevation,
   ...
}
*/
typedef struct EXTERN Position3D_addGrpB {
   LatitudeDMS2 latitude;
   LongitudeDMS2 longitude;
   Elevation elevation;
   OSRTDList extElem1;
} Position3D_addGrpB;

EXTERN int asn1PE_Position3D_addGrpB (OSCTXT* pctxt, Position3D_addGrpB* pvalue);

EXTERN int asn1PD_Position3D_addGrpB (OSCTXT* pctxt, Position3D_addGrpB* pvalue);

EXTERN int asn1Init_Position3D_addGrpB (Position3D_addGrpB* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeMark                                                  */
/*                                                            */
/**************************************************************/
/*
TimeMark ::= SEQUENCE {
   year [0] Year, -- BCD coding of A.D.    2 octets
   month [1] Month, -- BCD coding of Month,  1 octet
   day [2] Day, -- BCD coding of Day,    1 octet
   summerTime [3] SummerTime,
   holiday [4] Holiday,
   dayofWeek [5] DayOfWeek,
   hour [6] Hour, -- BCD coding of Hour,   1 octet
   minute [7] Minute, -- BCD coding of Minute, 1 octet
   second [8] Second, -- BCD coding of Second, 1 octet
   tenthSecond [9] TenthSecond -- units of 100 millisecond, 1 octet
}
*/
typedef struct EXTERN TimeMark {
   Year year;
   Month month;
   Day day;
   SummerTime summerTime;
   Holiday holiday;
   DayOfWeek dayofWeek;
   Hour hour;
   Minute minute;
   Second second;
   TenthSecond tenthSecond;
} TimeMark;

EXTERN int asn1PE_TimeMark (OSCTXT* pctxt, TimeMark* pvalue);

EXTERN int asn1PD_TimeMark (OSCTXT* pctxt, TimeMark* pvalue);

#ifdef __cplusplus
}
#endif

#endif
