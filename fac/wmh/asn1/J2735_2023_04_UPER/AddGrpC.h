/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.7.0, Date: 25-May-2023.
 *
 * Command:  asn1c CooperativeControlMsg-v1-ph.asn J2735-AddGrpB.asn J2735-AddGrpC.asn J2735-BasicSafetyMessage-v4.asn J2735-CommonSafetyRequest.asn J2735-Common-v7.asn J2735-EmergencyVehicleAlert.asn J2735-IntersectionCollision.asn J2735-ITIS.asn J2735-MapData-v1.asn J2735-MessageFrame-v5.asn J2735-NMEAcorrections.asn J2735-NTCIP.asn J2735-PersonalSafetyMessage.asn J2735-ProbeDataManagement.asn J2735-ProbeVehicleData.asn J2735-REGION.asn J2735-RoadSideAlert.asn J2735-RTCMcorrections.asn J2735-SignalRequestMessage.asn J2735-SignalStatusMessage.asn J2735-SPAT-v2.asn J2735-TestMessage00.asn J2735-TestMessage01.asn J2735-TestMessage02.asn J2735-TestMessage03.asn J2735-TestMessage04.asn J2735-TestMessage05.asn J2735-TestMessage06.asn J2735-TestMessage07.asn J2735-TestMessage08.asn J2735-TestMessage09.asn J2735-TestMessage10.asn J2735-TestMessage11.asn J2735-TestMessage12.asn J2735-TestMessage13.asn J2735-TestMessage14.asn J2735-TestMessage15.asn J2735-TravelerInformation-v2.asn MnvrSharingCoordMsg-v1-ph.asn PersonalSafetyMsg2-v1-ph.asn ProbeDataConfig-v0.30.asn ProbeDataReport-v0.30.asn RoadGeoAttributes-v2-ph.asn RoadSafetyMsg-v1-ph.asn RoadWeatherMessage.asn SensorDataSharingMsg-v1-ph.asn SignalControlAndPrioritizationRequest-v1-ph.asn SignalControlAndPrioritizationStatus-v1-ph.asn TollAdvertisementMsg-v0.10-ph.asn TollUsageAckMsg-v0.10-ph.asn TollUsageMsg-v0.10-ph.asn TrafficSignalPhaseAndTiming-v1-ph.asn -c -per -compact
 */
#ifndef ADDGRPC_H
#define ADDGRPC_H

#ifdef __cplusplus
extern "C" {
#endif

#include "rtkey.h"
#include "rtpersrc/asn1per.h"

/**
 * Header file for ASN.1 module AddGrpC
 */
#include "rtxsrc/rtxEnum.h"
/**************************************************************/
/*                                                            */
/*  AltitudeConfidence                                        */
/*                                                            */
/**************************************************************/
/*
AltitudeConfidence ::= ENUMERATED { alt-000-01(0), alt-000-02(1), alt-000-05(2), alt-000-10(3), alt-000-20(4), alt-000-50(5), alt-001-00(6), alt-002-00(7), alt-005-00(8), alt-010-00(9), alt-020-00(10), alt-050-00(11), alt-100-00(12), alt-200-00(13), outOfRange(14), unavailable(15) }
*/
typedef enum {
   alt_000_01 = 0,
   alt_000_02 = 1,
   alt_000_05 = 2,
   alt_000_10 = 3,
   alt_000_20 = 4,
   alt_000_50 = 5,
   alt_001_00 = 6,
   alt_002_00 = 7,
   alt_005_00 = 8,
   alt_010_00 = 9,
   alt_020_00 = 10,
   alt_050_00 = 11,
   alt_100_00 = 12,
   alt_200_00 = 13,
   outOfRange = 14,
   unavailable = 15
} AltitudeConfidence_Root;

typedef OSUINT8 AltitudeConfidence;

EXTERN int asn1PE_AltitudeConfidence (OSCTXT* pctxt, AltitudeConfidence value);

EXTERN int asn1PD_AltitudeConfidence (OSCTXT* pctxt, AltitudeConfidence* pvalue);

EXTERN extern const OSEnumItem AltitudeConfidence_ENUMTAB[];
#define AltitudeConfidence_ENUMTABSIZE 16

EXTERN const OSUTF8CHAR* AltitudeConfidence_ToString (OSINT32 value);

EXTERN int AltitudeConfidence_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, AltitudeConfidence* pvalue);

EXTERN int AltitudeConfidence_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, AltitudeConfidence* pvalue);

/**************************************************************/
/*                                                            */
/*  AltitudeValue                                             */
/*                                                            */
/**************************************************************/
/*
AltitudeValue ::= INTEGER (-100000..800001)
                                              units of  0.01 meter
    Where:
    seaLevel(0),
    oneCentimeter(1),
    unavailable(800001)

*/
typedef OSINT32 AltitudeValue;

EXTERN int asn1PE_AltitudeValue (OSCTXT* pctxt, AltitudeValue value);

EXTERN int asn1PD_AltitudeValue (OSCTXT* pctxt, AltitudeValue* pvalue);

/**************************************************************/
/*                                                            */
/*  EmissionType                                              */
/*                                                            */
/**************************************************************/
/*
EmissionType ::= ENUMERATED { typeA(0), typeB(1), typeC(2), typeD(3), typeE(4), ... }
*/
typedef enum {
   typeA = 0,
   typeB = 1,
   typeC = 2,
   typeD = 3,
   typeE = 4
} EmissionType_Root;

typedef OSUINT8 EmissionType;

EXTERN int asn1PE_EmissionType (OSCTXT* pctxt, EmissionType value);

EXTERN int asn1PD_EmissionType (OSCTXT* pctxt, EmissionType* pvalue);

EXTERN extern const OSEnumItem EmissionType_ENUMTAB[];
#define EmissionType_ENUMTABSIZE 5

EXTERN const OSUTF8CHAR* EmissionType_ToString (OSINT32 value);

EXTERN int EmissionType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, EmissionType* pvalue);

EXTERN int EmissionType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, EmissionType* pvalue);

/**************************************************************/
/*                                                            */
/*  Altitude                                                  */
/*                                                            */
/**************************************************************/
/*
Altitude ::= SEQUENCE {
   value [0] AltitudeValue,
   confidence [1] AltitudeConfidence
}
*/
typedef struct EXTERN Altitude {
   AltitudeValue value;
   AltitudeConfidence confidence;
} Altitude;

EXTERN int asn1PE_Altitude (OSCTXT* pctxt, Altitude* pvalue);

EXTERN int asn1PD_Altitude (OSCTXT* pctxt, Altitude* pvalue);

/**************************************************************/
/*                                                            */
/*  PrioritizationResponse                                    */
/*                                                            */
/**************************************************************/
/*
PrioritizationResponse ::= SEQUENCE {
   stationID [0] StationID,
                  -- Id of requesting vehicle
                  -- Note that the stationID has to remain unchanged
                  -- during the whole prioritizationprocess
   priorState [1] PrioritizationResponseStatus,
                  -- State of prioritization request
   signalGroup [2] SignalGroupID,
   ...
}
*/
typedef struct EXTERN PrioritizationResponse {
   OSUINT32 stationID;
   OSUINT8 priorState;
   OSUINT8 signalGroup;
   OSRTDList extElem1;
} PrioritizationResponse;

EXTERN int asn1PE_PrioritizationResponse (OSCTXT* pctxt, PrioritizationResponse* pvalue);

EXTERN int asn1PD_PrioritizationResponse (OSCTXT* pctxt, PrioritizationResponse* pvalue);

EXTERN int asn1Init_PrioritizationResponse (PrioritizationResponse* pvalue);

/**************************************************************/
/*                                                            */
/*  PrioritizationResponseList                                */
/*                                                            */
/**************************************************************/
/*
PrioritizationResponseList ::= SEQUENCE (SIZE (1..10)) OF PrioritizationResponse
*/
/* List of PrioritizationResponse */
typedef OSRTDList PrioritizationResponseList;

EXTERN int asn1PE_PrioritizationResponseList (OSCTXT* pctxt, PrioritizationResponseList* pvalue);

EXTERN int asn1PD_PrioritizationResponseList (OSCTXT* pctxt, PrioritizationResponseList* pvalue);

EXTERN int asn1Init_PrioritizationResponseList (PrioritizationResponseList* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleToLanePosition                                     */
/*                                                            */
/**************************************************************/
/*
VehicleToLanePosition ::= SEQUENCE {
   stationID [0] StationID,
   laneID [1] LaneID,
   ...
}
*/
typedef struct EXTERN VehicleToLanePosition {
   OSUINT32 stationID;
   OSUINT8 laneID;
   OSRTDList extElem1;
} VehicleToLanePosition;

EXTERN int asn1PE_VehicleToLanePosition (OSCTXT* pctxt, VehicleToLanePosition* pvalue);

EXTERN int asn1PD_VehicleToLanePosition (OSCTXT* pctxt, VehicleToLanePosition* pvalue);

EXTERN int asn1Init_VehicleToLanePosition (VehicleToLanePosition* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleToLanePositionList                                 */
/*                                                            */
/**************************************************************/
/*
VehicleToLanePositionList ::= SEQUENCE (SIZE (1..5)) OF VehicleToLanePosition
*/
/* List of VehicleToLanePosition */
typedef OSRTDList VehicleToLanePositionList;

EXTERN int asn1PE_VehicleToLanePositionList (OSCTXT* pctxt, VehicleToLanePositionList* pvalue);

EXTERN int asn1PD_VehicleToLanePositionList (OSCTXT* pctxt, VehicleToLanePositionList* pvalue);

EXTERN int asn1Init_VehicleToLanePositionList (VehicleToLanePositionList* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectionManeuverAssist_addGrpC                          */
/*                                                            */
/**************************************************************/
/*
ConnectionManeuverAssist-addGrpC ::= SEQUENCE {
   vehicleToLanePositions [0] VehicleToLanePositionList,
   rsuDistanceFromAnchor [1] EXPLICIT NodeOffsetPointXY OPTIONAL
}
*/
typedef struct EXTERN ConnectionManeuverAssist_addGrpC {
   struct {
      OSUINT8 rsuDistanceFromAnchorPresent : 1;
   } m;
   VehicleToLanePositionList vehicleToLanePositions;
   struct NodeOffsetPointXY *rsuDistanceFromAnchor;
} ConnectionManeuverAssist_addGrpC;

EXTERN int asn1PE_ConnectionManeuverAssist_addGrpC (OSCTXT* pctxt, ConnectionManeuverAssist_addGrpC* pvalue);

EXTERN int asn1PD_ConnectionManeuverAssist_addGrpC (OSCTXT* pctxt, ConnectionManeuverAssist_addGrpC* pvalue);

EXTERN int asn1Init_ConnectionManeuverAssist_addGrpC (
   ConnectionManeuverAssist_addGrpC* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionState_addGrpC                                 */
/*                                                            */
/**************************************************************/
/*
IntersectionState-addGrpC ::= SEQUENCE {
   activePrioritizations [0] PrioritizationResponseList OPTIONAL,
   ...
}
*/
typedef struct EXTERN IntersectionState_addGrpC {
   struct {
      OSUINT8 activePrioritizationsPresent : 1;
   } m;
   PrioritizationResponseList activePrioritizations;
   OSRTDList extElem1;
} IntersectionState_addGrpC;

EXTERN int asn1PE_IntersectionState_addGrpC (OSCTXT* pctxt, IntersectionState_addGrpC* pvalue);

EXTERN int asn1PD_IntersectionState_addGrpC (OSCTXT* pctxt, IntersectionState_addGrpC* pvalue);

EXTERN int asn1Init_IntersectionState_addGrpC (IntersectionState_addGrpC* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalHeadLocation                                        */
/*                                                            */
/**************************************************************/
/*
SignalHeadLocation ::= SEQUENCE {
   node [0] EXPLICIT NodeOffsetPointXY, -- the location
   signalGroupID [1] SignalGroupID,
   ...
}
*/
typedef struct EXTERN SignalHeadLocation {
   struct NodeOffsetPointXY *node;
   OSUINT8 signalGroupID;
   OSRTDList extElem1;
} SignalHeadLocation;

EXTERN int asn1PE_SignalHeadLocation (OSCTXT* pctxt, SignalHeadLocation* pvalue);

EXTERN int asn1PD_SignalHeadLocation (OSCTXT* pctxt, SignalHeadLocation* pvalue);

EXTERN int asn1Init_SignalHeadLocation (SignalHeadLocation* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalHeadLocationList                                    */
/*                                                            */
/**************************************************************/
/*
SignalHeadLocationList ::= SEQUENCE (SIZE (1..20)) OF SignalHeadLocation
*/
/* List of SignalHeadLocation */
typedef OSRTDList SignalHeadLocationList;

EXTERN int asn1PE_SignalHeadLocationList (OSCTXT* pctxt, SignalHeadLocationList* pvalue);

EXTERN int asn1PD_SignalHeadLocationList (OSCTXT* pctxt, SignalHeadLocationList* pvalue);

EXTERN int asn1Init_SignalHeadLocationList (SignalHeadLocationList* pvalue);

/**************************************************************/
/*                                                            */
/*  MapData_addGrpC                                           */
/*                                                            */
/**************************************************************/
/*
MapData-addGrpC ::= SEQUENCE {
   signalHeadLocations [0] SignalHeadLocationList OPTIONAL,
   ...
}
*/
typedef struct EXTERN MapData_addGrpC {
   struct {
      OSUINT8 signalHeadLocationsPresent : 1;
   } m;
   SignalHeadLocationList signalHeadLocations;
   OSRTDList extElem1;
} MapData_addGrpC;

EXTERN int asn1PE_MapData_addGrpC (OSCTXT* pctxt, MapData_addGrpC* pvalue);

EXTERN int asn1PD_MapData_addGrpC (OSCTXT* pctxt, MapData_addGrpC* pvalue);

EXTERN int asn1Init_MapData_addGrpC (MapData_addGrpC* pvalue);

/**************************************************************/
/*                                                            */
/*  Position3D_addGrpC                                        */
/*                                                            */
/**************************************************************/
/*
Position3D-addGrpC ::= SEQUENCE {
   altitude [0] Altitude,
   ...
}
*/
typedef struct EXTERN Position3D_addGrpC {
   Altitude altitude;
   OSRTDList extElem1;
} Position3D_addGrpC;

EXTERN int asn1PE_Position3D_addGrpC (OSCTXT* pctxt, Position3D_addGrpC* pvalue);

EXTERN int asn1PD_Position3D_addGrpC (OSCTXT* pctxt, Position3D_addGrpC* pvalue);

EXTERN int asn1Init_Position3D_addGrpC (Position3D_addGrpC* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserType_addGrpC                               */
/*                                                            */
/**************************************************************/
/*
RestrictionUserType-addGrpC ::= SEQUENCE {
   emission [0] EmissionType OPTIONAL,
   ...
}
*/
typedef struct EXTERN RestrictionUserType_addGrpC {
   struct {
      OSUINT8 emissionPresent : 1;
   } m;
   EmissionType emission;
   OSRTDList extElem1;
} RestrictionUserType_addGrpC;

EXTERN int asn1PE_RestrictionUserType_addGrpC (OSCTXT* pctxt, RestrictionUserType_addGrpC* pvalue);

EXTERN int asn1PD_RestrictionUserType_addGrpC (OSCTXT* pctxt, RestrictionUserType_addGrpC* pvalue);

EXTERN int asn1Init_RestrictionUserType_addGrpC (RestrictionUserType_addGrpC* pvalue);

#ifdef __cplusplus
}
#endif

#endif
