/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.7.0, Date: 25-May-2023.
 *
 * Command:  asn1c CooperativeControlMsg-v1-ph.asn J2735-AddGrpB.asn J2735-AddGrpC.asn J2735-BasicSafetyMessage-v4.asn J2735-CommonSafetyRequest.asn J2735-Common-v7.asn J2735-EmergencyVehicleAlert.asn J2735-IntersectionCollision.asn J2735-ITIS.asn J2735-MapData-v1.asn J2735-MessageFrame-v5.asn J2735-NMEAcorrections.asn J2735-NTCIP.asn J2735-PersonalSafetyMessage.asn J2735-ProbeDataManagement.asn J2735-ProbeVehicleData.asn J2735-REGION.asn J2735-RoadSideAlert.asn J2735-RTCMcorrections.asn J2735-SignalRequestMessage.asn J2735-SignalStatusMessage.asn J2735-SPAT-v2.asn J2735-TestMessage00.asn J2735-TestMessage01.asn J2735-TestMessage02.asn J2735-TestMessage03.asn J2735-TestMessage04.asn J2735-TestMessage05.asn J2735-TestMessage06.asn J2735-TestMessage07.asn J2735-TestMessage08.asn J2735-TestMessage09.asn J2735-TestMessage10.asn J2735-TestMessage11.asn J2735-TestMessage12.asn J2735-TestMessage13.asn J2735-TestMessage14.asn J2735-TestMessage15.asn J2735-TravelerInformation-v2.asn MnvrSharingCoordMsg-v1-ph.asn PersonalSafetyMsg2-v1-ph.asn ProbeDataConfig-v0.30.asn ProbeDataReport-v0.30.asn RoadGeoAttributes-v2-ph.asn RoadSafetyMsg-v1-ph.asn RoadWeatherMessage.asn SensorDataSharingMsg-v1-ph.asn SignalControlAndPrioritizationRequest-v1-ph.asn SignalControlAndPrioritizationStatus-v1-ph.asn TollAdvertisementMsg-v0.10-ph.asn TollUsageAckMsg-v0.10-ph.asn TollUsageMsg-v0.10-ph.asn TrafficSignalPhaseAndTiming-v1-ph.asn -c -per -compact
 */
#ifndef ROADWEATHERMESSAGE_H
#define ROADWEATHERMESSAGE_H

#ifdef __cplusplus
extern "C" {
#endif

#include "rtkey.h"
#include "rtpersrc/asn1per.h"

#include "ITIS.h"

/**
 * Header file for ASN.1 module RoadWeatherMessage
 */
/**************************************************************/
/*                                                            */
/*  NTCIPEssAirTemperature                                    */
/*                                                            */
/**************************************************************/
/*
NTCIPEssAirTemperature ::= INTEGER (-1000..1001)
     The dry-bulb temperature in tenths of degrees Celsius. The
     temperature is an instantaneous reading at the height specified
     by essTemperatureSensorHeight

*/
typedef OSINT16 NTCIPEssAirTemperature;

EXTERN int asn1PE_NTCIPEssAirTemperature (OSCTXT* pctxt, NTCIPEssAirTemperature value);

EXTERN int asn1PD_NTCIPEssAirTemperature (OSCTXT* pctxt, NTCIPEssAirTemperature* pvalue);

/**************************************************************/
/*                                                            */
/*  TemperatureMeasurementStdDev                              */
/*                                                            */
/**************************************************************/
/*
TemperatureMeasurementStdDev ::= INTEGER (1..16)
     standard deviation in degrees

*/
typedef OSUINT8 TemperatureMeasurementStdDev;

EXTERN int asn1PE_TemperatureMeasurementStdDev (OSCTXT* pctxt, TemperatureMeasurementStdDev value);

EXTERN int asn1PD_TemperatureMeasurementStdDev (OSCTXT* pctxt, TemperatureMeasurementStdDev* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssTemperatureSensorHeight                           */
/*                                                            */
/**************************************************************/
/*
NTCIPEssTemperatureSensorHeight ::= INTEGER (-1000..1001)
     The height of the temperature sensor as measured in meters
     above essReferenceHeight

*/
typedef OSINT16 NTCIPEssTemperatureSensorHeight;

EXTERN int asn1PE_NTCIPEssTemperatureSensorHeight (OSCTXT* pctxt, NTCIPEssTemperatureSensorHeight value);

EXTERN int asn1PD_NTCIPEssTemperatureSensorHeight (OSCTXT* pctxt, NTCIPEssTemperatureSensorHeight* pvalue);

/**************************************************************/
/*                                                            */
/*  NtcipAirTemperature                                       */
/*                                                            */
/**************************************************************/
/*
NtcipAirTemperature ::= SEQUENCE {
   temperature [0] NTCIPEssAirTemperature,
   measurementStdDev [1] TemperatureMeasurementStdDev OPTIONAL,
   tempSensorHeight [2] NTCIPEssTemperatureSensorHeight OPTIONAL,
   ...
}
*/
typedef struct EXTERN NtcipAirTemperature {
   struct {
      OSUINT8 measurementStdDevPresent : 1;
      OSUINT8 tempSensorHeightPresent : 1;
   } m;
   NTCIPEssAirTemperature temperature;
   TemperatureMeasurementStdDev measurementStdDev;
   NTCIPEssTemperatureSensorHeight tempSensorHeight;
   OSRTDList extElem1;
} NtcipAirTemperature;

EXTERN int asn1PE_NtcipAirTemperature (OSCTXT* pctxt, NtcipAirTemperature* pvalue);

EXTERN int asn1PD_NtcipAirTemperature (OSCTXT* pctxt, NtcipAirTemperature* pvalue);

EXTERN int asn1Init_NtcipAirTemperature (NtcipAirTemperature* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssPressureSensorAtmosphericPressure                 */
/*                                                            */
/**************************************************************/
/*
NTCIPEssPressureSensorAtmosphericPressure ::= INTEGER (0..65535)
     The force per unit area exerted by the atmosphere in 1/10ths of
     millibars, a.k.a. tenths of hectoPascals

*/
typedef OSUINT16 NTCIPEssPressureSensorAtmosphericPressure;

EXTERN int asn1PE_NTCIPEssPressureSensorAtmosphericPressure (OSCTXT* pctxt, NTCIPEssPressureSensorAtmosphericPressure value);

EXTERN int asn1PD_NTCIPEssPressureSensorAtmosphericPressure (OSCTXT* pctxt, NTCIPEssPressureSensorAtmosphericPressure* pvalue);

/**************************************************************/
/*                                                            */
/*  AtmosPressureMeasurementStdDev                            */
/*                                                            */
/**************************************************************/
/*
AtmosPressureMeasurementStdDev ::= INTEGER (1..16)
    standard deviation in tenths of hPa

*/
typedef OSUINT8 AtmosPressureMeasurementStdDev;

EXTERN int asn1PE_AtmosPressureMeasurementStdDev (OSCTXT* pctxt, AtmosPressureMeasurementStdDev value);

EXTERN int asn1PD_AtmosPressureMeasurementStdDev (OSCTXT* pctxt, AtmosPressureMeasurementStdDev* pvalue);

/**************************************************************/
/*                                                            */
/*  NtcipAtmosphericPressure                                  */
/*                                                            */
/**************************************************************/
/*
NtcipAtmosphericPressure ::= SEQUENCE {
   pressure [0] NTCIPEssPressureSensorAtmosphericPressure,
   measurementStdDev [1] AtmosPressureMeasurementStdDev OPTIONAL,
   ...
}
*/
typedef struct EXTERN NtcipAtmosphericPressure {
   struct {
      OSUINT8 measurementStdDevPresent : 1;
   } m;
   NTCIPEssPressureSensorAtmosphericPressure pressure;
   AtmosPressureMeasurementStdDev measurementStdDev;
   OSRTDList extElem1;
} NtcipAtmosphericPressure;

EXTERN int asn1PE_NtcipAtmosphericPressure (OSCTXT* pctxt, NtcipAtmosphericPressure* pvalue);

EXTERN int asn1PD_NtcipAtmosphericPressure (OSCTXT* pctxt, NtcipAtmosphericPressure* pvalue);

EXTERN int asn1Init_NtcipAtmosphericPressure (NtcipAtmosphericPressure* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPWindSensorAvgSpeed                                   */
/*                                                            */
/**************************************************************/
/*
NTCIPWindSensorAvgSpeed ::= INTEGER (0..65535)
     A two minute average of the wind speed in tenths of
     meters per second as measured by the wind sensor

*/
typedef OSUINT16 NTCIPWindSensorAvgSpeed;

EXTERN int asn1PE_NTCIPWindSensorAvgSpeed (OSCTXT* pctxt, NTCIPWindSensorAvgSpeed value);

EXTERN int asn1PD_NTCIPWindSensorAvgSpeed (OSCTXT* pctxt, NTCIPWindSensorAvgSpeed* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPWindSensorAvgDirection                               */
/*                                                            */
/**************************************************************/
/*
NTCIPWindSensorAvgDirection ::= INTEGER (0..361)
     A two minute mode (average) of the direction from which the wind is
     blowing measured clockwise in degrees from true north as measured
     by the wind sensor

*/
typedef OSUINT16 NTCIPWindSensorAvgDirection;

EXTERN int asn1PE_NTCIPWindSensorAvgDirection (OSCTXT* pctxt, NTCIPWindSensorAvgDirection value);

EXTERN int asn1PD_NTCIPWindSensorAvgDirection (OSCTXT* pctxt, NTCIPWindSensorAvgDirection* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPWindSensorSpotSpeed                                  */
/*                                                            */
/**************************************************************/
/*
NTCIPWindSensorSpotSpeed ::= INTEGER (0..65535)
     Definition>The wind speed in tenths of meters per second measured by
     the wind sensor. For mobile platforms, the wind speed shall be
     corrected for vehicle movement

*/
typedef OSUINT16 NTCIPWindSensorSpotSpeed;

EXTERN int asn1PE_NTCIPWindSensorSpotSpeed (OSCTXT* pctxt, NTCIPWindSensorSpotSpeed value);

EXTERN int asn1PD_NTCIPWindSensorSpotSpeed (OSCTXT* pctxt, NTCIPWindSensorSpotSpeed* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPWindSensorSpotDirection                              */
/*                                                            */
/**************************************************************/
/*
NTCIPWindSensorSpotDirection ::= INTEGER (0..361)
     The direction from which the wind is blowing measured in
     degrees clockwise from true North as measured by the wind sensor.
     For mobile platforms, the wind direction shall be corrected for
     vehicle movement

*/
typedef OSUINT16 NTCIPWindSensorSpotDirection;

EXTERN int asn1PE_NTCIPWindSensorSpotDirection (OSCTXT* pctxt, NTCIPWindSensorSpotDirection value);

EXTERN int asn1PD_NTCIPWindSensorSpotDirection (OSCTXT* pctxt, NTCIPWindSensorSpotDirection* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPWindSensorGustSpeed                                  */
/*                                                            */
/**************************************************************/
/*
NTCIPWindSensorGustSpeed ::= INTEGER (0..65535)
     The maximum wind gust recorded by the wind sensor during
     the 10 minutes preceding the observation measured in tenths of
     meters per second

*/
typedef OSUINT16 NTCIPWindSensorGustSpeed;

EXTERN int asn1PE_NTCIPWindSensorGustSpeed (OSCTXT* pctxt, NTCIPWindSensorGustSpeed value);

EXTERN int asn1PD_NTCIPWindSensorGustSpeed (OSCTXT* pctxt, NTCIPWindSensorGustSpeed* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPWindSensorGustDirection                              */
/*                                                            */
/**************************************************************/
/*
NTCIPWindSensorGustDirection ::= INTEGER (0..361)
     The direction of the maximum wind gust recorded during the 10
     minutes preceding the observation measured in degrees clockwise
     from true North by the wind sensor.

*/
typedef OSUINT16 NTCIPWindSensorGustDirection;

EXTERN int asn1PE_NTCIPWindSensorGustDirection (OSCTXT* pctxt, NTCIPWindSensorGustDirection value);

EXTERN int asn1PD_NTCIPWindSensorGustDirection (OSCTXT* pctxt, NTCIPWindSensorGustDirection* pvalue);

/**************************************************************/
/*                                                            */
/*  NtcipWind                                                 */
/*                                                            */
/**************************************************************/
/*
NtcipWind ::= SEQUENCE {
   avgSpeed [0] NTCIPWindSensorAvgSpeed OPTIONAL,
   avgDirection [1] NTCIPWindSensorAvgDirection OPTIONAL,
   currentSpeed [2] NTCIPWindSensorSpotSpeed OPTIONAL,
   curDirection [3] NTCIPWindSensorSpotDirection OPTIONAL,
   gustSpeed [4] NTCIPWindSensorGustSpeed OPTIONAL,
   gustDirection [5] NTCIPWindSensorGustDirection OPTIONAL,
   ...
}
*/
typedef struct EXTERN NtcipWind {
   struct {
      OSUINT8 avgSpeedPresent : 1;
      OSUINT8 avgDirectionPresent : 1;
      OSUINT8 currentSpeedPresent : 1;
      OSUINT8 curDirectionPresent : 1;
      OSUINT8 gustSpeedPresent : 1;
      OSUINT8 gustDirectionPresent : 1;
   } m;
   NTCIPWindSensorAvgSpeed avgSpeed;
   NTCIPWindSensorAvgDirection avgDirection;
   NTCIPWindSensorSpotSpeed currentSpeed;
   NTCIPWindSensorSpotDirection curDirection;
   NTCIPWindSensorGustSpeed gustSpeed;
   NTCIPWindSensorGustDirection gustDirection;
   OSRTDList extElem1;
} NtcipWind;

EXTERN int asn1PE_NtcipWind (OSCTXT* pctxt, NtcipWind* pvalue);

EXTERN int asn1PD_NtcipWind (OSCTXT* pctxt, NtcipWind* pvalue);

EXTERN int asn1Init_NtcipWind (NtcipWind* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPHumiditySensorRelativeHumidity                       */
/*                                                            */
/**************************************************************/
/*
NTCIPHumiditySensorRelativeHumidity ::= INTEGER (0..101)
     The relative humidity in percent

*/
typedef OSUINT8 NTCIPHumiditySensorRelativeHumidity;

EXTERN int asn1PE_NTCIPHumiditySensorRelativeHumidity (OSCTXT* pctxt, NTCIPHumiditySensorRelativeHumidity value);

EXTERN int asn1PD_NTCIPHumiditySensorRelativeHumidity (OSCTXT* pctxt, NTCIPHumiditySensorRelativeHumidity* pvalue);

#include "rtxsrc/rtxEnum.h"
/**************************************************************/
/*                                                            */
/*  DataSourceInfo                                            */
/*                                                            */
/**************************************************************/
/*
DataSourceInfo ::= ENUMERATED { measured(0), derived(1), ... }
     Indicates source of the data

*/
typedef enum {
   measured = 0,
   derived = 1
} DataSourceInfo_Root;

typedef OSUINT8 DataSourceInfo;

EXTERN int asn1PE_DataSourceInfo (OSCTXT* pctxt, DataSourceInfo value);

EXTERN int asn1PD_DataSourceInfo (OSCTXT* pctxt, DataSourceInfo* pvalue);

EXTERN extern const OSEnumItem DataSourceInfo_ENUMTAB[];
#define DataSourceInfo_ENUMTABSIZE 2

EXTERN const OSUTF8CHAR* DataSourceInfo_ToString (OSINT32 value);

EXTERN int DataSourceInfo_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, DataSourceInfo* pvalue);

EXTERN int DataSourceInfo_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, DataSourceInfo* pvalue);

/**************************************************************/
/*                                                            */
/*  NtcipRelativeHumidity                                     */
/*                                                            */
/**************************************************************/
/*
NtcipRelativeHumidity ::= SEQUENCE {
   relHumidity [0] NTCIPHumiditySensorRelativeHumidity,
   source [1] DataSourceInfo OPTIONAL,
   ...
}
*/
typedef struct EXTERN NtcipRelativeHumidity {
   struct {
      OSUINT8 sourcePresent : 1;
   } m;
   NTCIPHumiditySensorRelativeHumidity relHumidity;
   DataSourceInfo source;
   OSRTDList extElem1;
} NtcipRelativeHumidity;

EXTERN int asn1PE_NtcipRelativeHumidity (OSCTXT* pctxt, NtcipRelativeHumidity* pvalue);

EXTERN int asn1PD_NtcipRelativeHumidity (OSCTXT* pctxt, NtcipRelativeHumidity* pvalue);

EXTERN int asn1Init_NtcipRelativeHumidity (NtcipRelativeHumidity* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssDewpointTemp                                      */
/*                                                            */
/**************************************************************/
/*
NTCIPEssDewpointTemp ::= INTEGER (-1000..1001)
     The dewpoint temperature in tenths of degrees Celsius. The
     temperature is an instantaneous reading by the temperature
     sensor specified in the first row specified of the
     essTemperatureSensorTable

*/
typedef OSINT16 NTCIPEssDewpointTemp;

EXTERN int asn1PE_NTCIPEssDewpointTemp (OSCTXT* pctxt, NTCIPEssDewpointTemp value);

EXTERN int asn1PD_NTCIPEssDewpointTemp (OSCTXT* pctxt, NTCIPEssDewpointTemp* pvalue);

/**************************************************************/
/*                                                            */
/*  DewPointTempMeasurementStdDev                             */
/*                                                            */
/**************************************************************/
/*
DewPointTempMeasurementStdDev ::= INTEGER (1..16)
    standard deviation in degrees

*/
typedef OSUINT8 DewPointTempMeasurementStdDev;

EXTERN int asn1PE_DewPointTempMeasurementStdDev (OSCTXT* pctxt, DewPointTempMeasurementStdDev value);

EXTERN int asn1PD_DewPointTempMeasurementStdDev (OSCTXT* pctxt, DewPointTempMeasurementStdDev* pvalue);

/**************************************************************/
/*                                                            */
/*  NtcipDewPoint                                             */
/*                                                            */
/**************************************************************/
/*
NtcipDewPoint ::= SEQUENCE {
   dewTemp [0] NTCIPEssDewpointTemp,
   source [1] DataSourceInfo OPTIONAL,
   measurementStdDev [2] DewPointTempMeasurementStdDev OPTIONAL,
   ...
}
*/
typedef struct EXTERN NtcipDewPoint {
   struct {
      OSUINT8 sourcePresent : 1;
      OSUINT8 measurementStdDevPresent : 1;
   } m;
   NTCIPEssDewpointTemp dewTemp;
   DataSourceInfo source;
   DewPointTempMeasurementStdDev measurementStdDev;
   OSRTDList extElem1;
} NtcipDewPoint;

EXTERN int asn1PE_NtcipDewPoint (OSCTXT* pctxt, NtcipDewPoint* pvalue);

EXTERN int asn1PD_NtcipDewPoint (OSCTXT* pctxt, NtcipDewPoint* pvalue);

EXTERN int asn1Init_NtcipDewPoint (NtcipDewPoint* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssSurfaceTemperature                                */
/*                                                            */
/**************************************************************/
/*
NTCIPEssSurfaceTemperature ::= INTEGER (-1000..1001)
     The current pavement surface temperature in tenths of degrees Celsius

*/
typedef OSINT16 NTCIPEssSurfaceTemperature;

EXTERN int asn1PE_NTCIPEssSurfaceTemperature (OSCTXT* pctxt, NTCIPEssSurfaceTemperature value);

EXTERN int asn1PD_NTCIPEssSurfaceTemperature (OSCTXT* pctxt, NTCIPEssSurfaceTemperature* pvalue);

/**************************************************************/
/*                                                            */
/*  SurfaceTempMeasurementStdDev                              */
/*                                                            */
/**************************************************************/
/*
SurfaceTempMeasurementStdDev ::= INTEGER (1..16)
    standard deviation in degrees

*/
typedef OSUINT8 SurfaceTempMeasurementStdDev;

EXTERN int asn1PE_SurfaceTempMeasurementStdDev (OSCTXT* pctxt, SurfaceTempMeasurementStdDev value);

EXTERN int asn1PD_SurfaceTempMeasurementStdDev (OSCTXT* pctxt, SurfaceTempMeasurementStdDev* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPPavementSensorSurfaceCondition                       */
/*                                                            */
/**************************************************************/
/*
NTCIPPavementSensorSurfaceCondition ::= ENUMERATED { other(1), error(2), dry(3), moist(4), chemicallyMoist(5), wet(6), chemicallyWet(7), standingWater(8), frost(9), slush(10), snow(11), ice(12), noReport(13), ... }
*/
typedef enum {
   other_4 = 1,
   error_1 = 2,
   dry_2 = 3,
   moist = 4,
   chemicallyMoist = 5,
   wet_1 = 6,
   chemicallyWet = 7,
   standingWater = 8,
   frost = 9,
   slush = 10,
   snow = 11,
   ice = 12,
   noReport = 13
} NTCIPPavementSensorSurfaceCondition_Root;

typedef OSUINT8 NTCIPPavementSensorSurfaceCondition;

EXTERN int asn1PE_NTCIPPavementSensorSurfaceCondition (OSCTXT* pctxt, NTCIPPavementSensorSurfaceCondition value);

EXTERN int asn1PD_NTCIPPavementSensorSurfaceCondition (OSCTXT* pctxt, NTCIPPavementSensorSurfaceCondition* pvalue);

EXTERN extern const OSEnumItem NTCIPPavementSensorSurfaceCondition_ENUMTAB[];
#define NTCIPPavementSensorSurfaceCondition_ENUMTABSIZE 13

EXTERN const OSUTF8CHAR* NTCIPPavementSensorSurfaceCondition_ToString (OSINT32 value);

EXTERN int NTCIPPavementSensorSurfaceCondition_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, NTCIPPavementSensorSurfaceCondition* pvalue);

EXTERN int NTCIPPavementSensorSurfaceCondition_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      NTCIPPavementSensorSurfaceCondition* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssSurfaceIceOrWaterDepth                            */
/*                                                            */
/**************************************************************/
/*
NTCIPEssSurfaceIceOrWaterDepth ::= INTEGER (0..65535)
     The current thickness of ice or depth of water on the surface of the
     roadway measured in 1/10th of millimeters

*/
typedef OSUINT16 NTCIPEssSurfaceIceOrWaterDepth;

EXTERN int asn1PE_NTCIPEssSurfaceIceOrWaterDepth (OSCTXT* pctxt, NTCIPEssSurfaceIceOrWaterDepth value);

EXTERN int asn1PD_NTCIPEssSurfaceIceOrWaterDepth (OSCTXT* pctxt, NTCIPEssSurfaceIceOrWaterDepth* pvalue);

/**************************************************************/
/*                                                            */
/*  NtcipPavement                                             */
/*                                                            */
/**************************************************************/
/*
NtcipPavement ::= SEQUENCE {
   surfaceTemp [0] NTCIPEssSurfaceTemperature OPTIONAL,
   tempStdDev [1] SurfaceTempMeasurementStdDev OPTIONAL,
   condition [2] NTCIPPavementSensorSurfaceCondition OPTIONAL,
   moistureDepth [3] NTCIPEssSurfaceIceOrWaterDepth OPTIONAL,
   roadRoughness [4] RoadRoughness OPTIONAL,
   ...
}
*/
typedef struct EXTERN NtcipPavement {
   struct {
      OSUINT8 surfaceTempPresent : 1;
      OSUINT8 tempStdDevPresent : 1;
      OSUINT8 conditionPresent : 1;
      OSUINT8 moistureDepthPresent : 1;
      OSUINT8 roadRoughnessPresent : 1;
   } m;
   NTCIPEssSurfaceTemperature surfaceTemp;
   SurfaceTempMeasurementStdDev tempStdDev;
   NTCIPPavementSensorSurfaceCondition condition;
   NTCIPEssSurfaceIceOrWaterDepth moistureDepth;
   struct RoadRoughness *roadRoughness;
   OSRTDList extElem1;
} NtcipPavement;

EXTERN int asn1PE_NtcipPavement (OSCTXT* pctxt, NtcipPavement* pvalue);

EXTERN int asn1PD_NtcipPavement (OSCTXT* pctxt, NtcipPavement* pvalue);

EXTERN int asn1Init_NtcipPavement (NtcipPavement* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssVisibility                                        */
/*                                                            */
/**************************************************************/
/*
NTCIPEssVisibility ::= INTEGER (0..1000001)
     Surface visibility measured in one tenth of a meter

*/
typedef OSUINT32 NTCIPEssVisibility;

EXTERN int asn1PE_NTCIPEssVisibility (OSCTXT* pctxt, NTCIPEssVisibility value);

EXTERN int asn1PD_NTCIPEssVisibility (OSCTXT* pctxt, NTCIPEssVisibility* pvalue);

/**************************************************************/
/*                                                            */
/*  NtcipVisibility                                           */
/*                                                            */
/**************************************************************/
/*
NtcipVisibility ::= SEQUENCE {
   visibility [0] NTCIPEssVisibility,
   ...
}
*/
typedef struct EXTERN NtcipVisibility {
   NTCIPEssVisibility visibility;
   OSRTDList extElem1;
} NtcipVisibility;

EXTERN int asn1PE_NtcipVisibility (OSCTXT* pctxt, NtcipVisibility* pvalue);

EXTERN int asn1PD_NtcipVisibility (OSCTXT* pctxt, NtcipVisibility* pvalue);

EXTERN int asn1Init_NtcipVisibility (NtcipVisibility* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssVisibilitySituation                               */
/*                                                            */
/**************************************************************/
/*
NTCIPEssVisibilitySituation ::= ENUMERATED { other(1), unknown(2), clear(3), fogNotPatchy(4), patchyFog(5), blowingSnow(6), smoke(7), seaSpray(8), vehicleSpray(9), blowingDustOrSand(10), sunGlare(11), swarmsOfInsects(12), ... }
*/
typedef enum {
   other_5 = 1,
   unknown_9 = 2,
   clear = 3,
   fogNotPatchy = 4,
   patchyFog = 5,
   blowingSnow = 6,
   smoke = 7,
   seaSpray = 8,
   vehicleSpray = 9,
   blowingDustOrSand = 10,
   sunGlare = 11,
   swarmsOfInsects = 12
} NTCIPEssVisibilitySituation_Root;

typedef OSUINT8 NTCIPEssVisibilitySituation;

EXTERN int asn1PE_NTCIPEssVisibilitySituation (OSCTXT* pctxt, NTCIPEssVisibilitySituation value);

EXTERN int asn1PD_NTCIPEssVisibilitySituation (OSCTXT* pctxt, NTCIPEssVisibilitySituation* pvalue);

EXTERN extern const OSEnumItem NTCIPEssVisibilitySituation_ENUMTAB[];
#define NTCIPEssVisibilitySituation_ENUMTABSIZE 12

EXTERN const OSUTF8CHAR* NTCIPEssVisibilitySituation_ToString (OSINT32 value);

EXTERN int NTCIPEssVisibilitySituation_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, NTCIPEssVisibilitySituation* pvalue);

EXTERN int NTCIPEssVisibilitySituation_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      NTCIPEssVisibilitySituation* pvalue);

/**************************************************************/
/*                                                            */
/*  NtcipVisibilitySituation                                  */
/*                                                            */
/**************************************************************/
/*
NtcipVisibilitySituation ::= SEQUENCE {
   situation [0] NTCIPEssVisibilitySituation,
   ...
}
*/
typedef struct EXTERN NtcipVisibilitySituation {
   NTCIPEssVisibilitySituation situation;
   OSRTDList extElem1;
} NtcipVisibilitySituation;

EXTERN int asn1PE_NtcipVisibilitySituation (OSCTXT* pctxt, NtcipVisibilitySituation* pvalue);

EXTERN int asn1PD_NtcipVisibilitySituation (OSCTXT* pctxt, NtcipVisibilitySituation* pvalue);

EXTERN int asn1Init_NtcipVisibilitySituation (NtcipVisibilitySituation* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssCloudSituationV4                                  */
/*                                                            */
/**************************************************************/
/*
NTCIPEssCloudSituationV4 ::= INTEGER (0..8)
     Describes the amount of cloud cover in the sky, measured in oktas,
     as defined in WMO code table 2700

*/
typedef OSUINT8 NTCIPEssCloudSituationV4;

EXTERN int asn1PE_NTCIPEssCloudSituationV4 (OSCTXT* pctxt, NTCIPEssCloudSituationV4 value);

EXTERN int asn1PD_NTCIPEssCloudSituationV4 (OSCTXT* pctxt, NTCIPEssCloudSituationV4* pvalue);

/**************************************************************/
/*                                                            */
/*  NtcipCloudSituation                                       */
/*                                                            */
/**************************************************************/
/*
NtcipCloudSituation ::= SEQUENCE {
   situation [0] NTCIPEssCloudSituationV4,
   ...
}
*/
typedef struct EXTERN NtcipCloudSituation {
   NTCIPEssCloudSituationV4 situation;
   OSRTDList extElem1;
} NtcipCloudSituation;

EXTERN int asn1PE_NtcipCloudSituation (OSCTXT* pctxt, NtcipCloudSituation* pvalue);

EXTERN int asn1PD_NtcipCloudSituation (OSCTXT* pctxt, NtcipCloudSituation* pvalue);

EXTERN int asn1Init_NtcipCloudSituation (NtcipCloudSituation* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPPrecipitationSensorPrecipSituation                   */
/*                                                            */
/**************************************************************/
/*
NTCIPPrecipitationSensorPrecipSituation ::= ENUMERATED { other(1), unknown(2), noPrecipitation(3), unidentifiedSlight(4), unidentifiedModerate(5), unidentifiedHeavy(6), snowSlight(7), snowModerate(8), snowHeavy(9), rainSlight(10), rainModerate(11), rainHeavy(12), frozenPrecipitationSlight(13), frozenPrecipitationModerate(14), frozenPrecipitationHeavy(15), ... }
*/
typedef enum {
   other_6 = 1,
   unknown_10 = 2,
   noPrecipitation_1 = 3,
   unidentifiedSlight_1 = 4,
   unidentifiedModerate_1 = 5,
   unidentifiedHeavy_1 = 6,
   snowSlight_1 = 7,
   snowModerate_1 = 8,
   snowHeavy_1 = 9,
   rainSlight_1 = 10,
   rainModerate_1 = 11,
   rainHeavy_1 = 12,
   frozenPrecipitationSlight_1 = 13,
   frozenPrecipitationModerate_1 = 14,
   frozenPrecipitationHeavy_1 = 15
} NTCIPPrecipitationSensorPrecipSituation_Root;

typedef OSUINT8 NTCIPPrecipitationSensorPrecipSituation;

EXTERN int asn1PE_NTCIPPrecipitationSensorPrecipSituation (OSCTXT* pctxt, NTCIPPrecipitationSensorPrecipSituation value);

EXTERN int asn1PD_NTCIPPrecipitationSensorPrecipSituation (OSCTXT* pctxt, NTCIPPrecipitationSensorPrecipSituation* pvalue);

EXTERN extern const OSEnumItem NTCIPPrecipitationSensorPrecipSituation_ENUMTAB[];
#define NTCIPPrecipitationSensorPrecipSituation_ENUMTABSIZE 15

EXTERN const OSUTF8CHAR* NTCIPPrecipitationSensorPrecipSituation_ToString (OSINT32 value);

EXTERN int NTCIPPrecipitationSensorPrecipSituation_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, NTCIPPrecipitationSensorPrecipSituation* pvalue);

EXTERN int NTCIPPrecipitationSensorPrecipSituation_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      NTCIPPrecipitationSensorPrecipSituation* pvalue);

/**************************************************************/
/*                                                            */
/*  NtcipPrecipitation                                        */
/*                                                            */
/**************************************************************/
/*
NtcipPrecipitation ::= SEQUENCE {
   precipitation [0] NTCIPPrecipitationSensorPrecipSituation,
   ...
}
*/
typedef struct EXTERN NtcipPrecipitation {
   NTCIPPrecipitationSensorPrecipSituation precipitation;
   OSRTDList extElem1;
} NtcipPrecipitation;

EXTERN int asn1PE_NtcipPrecipitation (OSCTXT* pctxt, NtcipPrecipitation* pvalue);

EXTERN int asn1PD_NtcipPrecipitation (OSCTXT* pctxt, NtcipPrecipitation* pvalue);

EXTERN int asn1Init_NtcipPrecipitation (NtcipPrecipitation* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssTotalRadiationV4                                  */
/*                                                            */
/**************************************************************/
/*
NTCIPEssTotalRadiationV4 ::= INTEGER (-2048..2049)
     The average total radiation hitting the earth's surface in watts per
     square meter during the radiation period

*/
typedef OSINT16 NTCIPEssTotalRadiationV4;

EXTERN int asn1PE_NTCIPEssTotalRadiationV4 (OSCTXT* pctxt, NTCIPEssTotalRadiationV4 value);

EXTERN int asn1PD_NTCIPEssTotalRadiationV4 (OSCTXT* pctxt, NTCIPEssTotalRadiationV4* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssTotalRadiationPeriod                              */
/*                                                            */
/**************************************************************/
/*
NTCIPEssTotalRadiationPeriod ::= INTEGER (0..86400)
     The rolling period, in seconds, that corresponds to the length of
     time the essTotalRadiation is averaged

*/
typedef OSUINT32 NTCIPEssTotalRadiationPeriod;

EXTERN int asn1PE_NTCIPEssTotalRadiationPeriod (OSCTXT* pctxt, NTCIPEssTotalRadiationPeriod value);

EXTERN int asn1PD_NTCIPEssTotalRadiationPeriod (OSCTXT* pctxt, NTCIPEssTotalRadiationPeriod* pvalue);

/**************************************************************/
/*                                                            */
/*  NtcipSolarRadiation                                       */
/*                                                            */
/**************************************************************/
/*
NtcipSolarRadiation ::= SEQUENCE {
   solarRadiation [0] NTCIPEssTotalRadiationV4,
   measurementPeriod [1] NTCIPEssTotalRadiationPeriod,
   ...
}
*/
typedef struct EXTERN NtcipSolarRadiation {
   NTCIPEssTotalRadiationV4 solarRadiation;
   NTCIPEssTotalRadiationPeriod measurementPeriod;
   OSRTDList extElem1;
} NtcipSolarRadiation;

EXTERN int asn1PE_NtcipSolarRadiation (OSCTXT* pctxt, NtcipSolarRadiation* pvalue);

EXTERN int asn1PD_NtcipSolarRadiation (OSCTXT* pctxt, NtcipSolarRadiation* pvalue);

EXTERN int asn1Init_NtcipSolarRadiation (NtcipSolarRadiation* pvalue);

/**************************************************************/
/*                                                            */
/*  NtcipEssData                                              */
/*                                                            */
/**************************************************************/
/*
NtcipEssData ::= SEQUENCE {
   airTemp [0] NtcipAirTemperature OPTIONAL,
   atmosphere [1] NtcipAtmosphericPressure OPTIONAL,
   wind [2] NtcipWind OPTIONAL,
   humidity [3] NtcipRelativeHumidity OPTIONAL,
   dewpoint [4] NtcipDewPoint OPTIONAL,
   pavement [5] NtcipPavement OPTIONAL,
   visibility [6] NtcipVisibility OPTIONAL,
   visSituation [7] NtcipVisibilitySituation OPTIONAL,
   cloudSitiation [8] NtcipCloudSituation OPTIONAL,
   precipitation [9] NtcipPrecipitation OPTIONAL,
   solarRadiation [10] NtcipSolarRadiation OPTIONAL,
   ...
}
*/
typedef struct EXTERN NtcipEssData {
   struct {
      OSUINT8 airTempPresent : 1;
      OSUINT8 atmospherePresent : 1;
      OSUINT8 windPresent : 1;
      OSUINT8 humidityPresent : 1;
      OSUINT8 dewpointPresent : 1;
      OSUINT8 pavementPresent : 1;
      OSUINT8 visibilityPresent : 1;
      OSUINT8 visSituationPresent : 1;
      OSUINT8 cloudSitiationPresent : 1;
      OSUINT8 precipitationPresent : 1;
      OSUINT8 solarRadiationPresent : 1;
   } m;
   NtcipAirTemperature airTemp;
   NtcipAtmosphericPressure atmosphere;
   NtcipWind wind;
   NtcipRelativeHumidity humidity;
   NtcipDewPoint dewpoint;
   NtcipPavement pavement;
   NtcipVisibility visibility;
   NtcipVisibilitySituation visSituation;
   NtcipCloudSituation cloudSitiation;
   NtcipPrecipitation precipitation;
   NtcipSolarRadiation solarRadiation;
   OSRTDList extElem1;
} NtcipEssData;

EXTERN int asn1PE_NtcipEssData (OSCTXT* pctxt, NtcipEssData* pvalue);

EXTERN int asn1PD_NtcipEssData (OSCTXT* pctxt, NtcipEssData* pvalue);

EXTERN int asn1Init_NtcipEssData (NtcipEssData* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssPavementTreatmentLatitude                         */
/*                                                            */
/**************************************************************/
/*
NTCIPEssPavementTreatmentLatitude ::= INTEGER (-90000000..90000001)
     The latitude in 10^-6 degrees of the pavement treatment system, per
     WGS-84 datum

*/
typedef OSINT32 NTCIPEssPavementTreatmentLatitude;

EXTERN int asn1PE_NTCIPEssPavementTreatmentLatitude (OSCTXT* pctxt, NTCIPEssPavementTreatmentLatitude value);

EXTERN int asn1PD_NTCIPEssPavementTreatmentLatitude (OSCTXT* pctxt, NTCIPEssPavementTreatmentLatitude* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssPavementTreatmentLongitude                        */
/*                                                            */
/**************************************************************/
/*
NTCIPEssPavementTreatmentLongitude ::= INTEGER (-180000000..180000001)
     The east longitude in 10^-6 degrees from the Prime Meridian of the
     pavement treatment system location

*/
typedef OSINT32 NTCIPEssPavementTreatmentLongitude;

EXTERN int asn1PE_NTCIPEssPavementTreatmentLongitude (OSCTXT* pctxt, NTCIPEssPavementTreatmentLongitude value);

EXTERN int asn1PD_NTCIPEssPavementTreatmentLongitude (OSCTXT* pctxt, NTCIPEssPavementTreatmentLongitude* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssPavementTreatmentLocation                         */
/*                                                            */
/**************************************************************/
/*
NTCIPEssPavementTreatmentLocation ::= IA5String (SIZE (1..255))
     A textual string indicating the location of the pavement treatment
     system

*/
typedef const char* NTCIPEssPavementTreatmentLocation;

EXTERN int asn1PE_NTCIPEssPavementTreatmentLocation (OSCTXT* pctxt, NTCIPEssPavementTreatmentLocation value);

EXTERN int asn1PD_NTCIPEssPavementTreatmentLocation (OSCTXT* pctxt, NTCIPEssPavementTreatmentLocation* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssPaveTreatProductType                              */
/*                                                            */
/**************************************************************/
/*
NTCIPEssPaveTreatProductType ::= ENUMERATED { other(1), sand(2), dirt(3), gravel(4), cinders(5), water(6), enhancedSalts(7), naCl(8), caCl(9), mgCl(10), cMA(11), kAC(12), naFormate(13), naA(14), ... }
*/
typedef enum {
   other_2 = 1,
   sand = 2,
   dirt = 3,
   gravel = 4,
   cinders = 5,
   water = 6,
   enhancedSalts = 7,
   naCl = 8,
   caCl = 9,
   mgCl = 10,
   cMA = 11,
   kAC = 12,
   naFormate = 13,
   naA = 14
} NTCIPEssPaveTreatProductType_Root;

typedef OSUINT8 NTCIPEssPaveTreatProductType;

EXTERN int asn1PE_NTCIPEssPaveTreatProductType (OSCTXT* pctxt, NTCIPEssPaveTreatProductType value);

EXTERN int asn1PD_NTCIPEssPaveTreatProductType (OSCTXT* pctxt, NTCIPEssPaveTreatProductType* pvalue);

EXTERN extern const OSEnumItem NTCIPEssPaveTreatProductType_ENUMTAB[];
#define NTCIPEssPaveTreatProductType_ENUMTABSIZE 14

EXTERN const OSUTF8CHAR* NTCIPEssPaveTreatProductType_ToString (OSINT32 value);

EXTERN int NTCIPEssPaveTreatProductType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, NTCIPEssPaveTreatProductType* pvalue);

EXTERN int NTCIPEssPaveTreatProductType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      NTCIPEssPaveTreatProductType* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssPaveTreatProductForm                              */
/*                                                            */
/**************************************************************/
/*
NTCIPEssPaveTreatProductForm ::= ENUMERATED { other(1), dry(2), prewet(3), liquid(4), ... }
*/
typedef enum {
   other_3 = 1,
   dry_1 = 2,
   prewet = 3,
   liquid = 4
} NTCIPEssPaveTreatProductForm_Root;

typedef OSUINT8 NTCIPEssPaveTreatProductForm;

EXTERN int asn1PE_NTCIPEssPaveTreatProductForm (OSCTXT* pctxt, NTCIPEssPaveTreatProductForm value);

EXTERN int asn1PD_NTCIPEssPaveTreatProductForm (OSCTXT* pctxt, NTCIPEssPaveTreatProductForm* pvalue);

EXTERN extern const OSEnumItem NTCIPEssPaveTreatProductForm_ENUMTAB[];
#define NTCIPEssPaveTreatProductForm_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* NTCIPEssPaveTreatProductForm_ToString (OSINT32 value);

EXTERN int NTCIPEssPaveTreatProductForm_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, NTCIPEssPaveTreatProductForm* pvalue);

EXTERN int NTCIPEssPaveTreatProductForm_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, 
      NTCIPEssPaveTreatProductForm* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssPercentProductMix                                 */
/*                                                            */
/**************************************************************/
/*
NTCIPEssPercentProductMix ::= INTEGER (0..100)
     Indicates the percentage of the total application mix by weight that
     is of the type specified in essPaveTreatProductType

*/
typedef OSUINT8 NTCIPEssPercentProductMix;

EXTERN int asn1PE_NTCIPEssPercentProductMix (OSCTXT* pctxt, NTCIPEssPercentProductMix value);

EXTERN int asn1PD_NTCIPEssPercentProductMix (OSCTXT* pctxt, NTCIPEssPercentProductMix* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssPaveTreatmentAmount                               */
/*                                                            */
/**************************************************************/
/*
NTCIPEssPaveTreatmentAmount ::= INTEGER (0..255)
     Indicates quantity of the treatment being applied in kilograms per
     lane kilometer

*/
typedef OSUINT8 NTCIPEssPaveTreatmentAmount;

EXTERN int asn1PE_NTCIPEssPaveTreatmentAmount (OSCTXT* pctxt, NTCIPEssPaveTreatmentAmount value);

EXTERN int asn1PD_NTCIPEssPaveTreatmentAmount (OSCTXT* pctxt, NTCIPEssPaveTreatmentAmount* pvalue);

/**************************************************************/
/*                                                            */
/*  NTCIPEssPaveTreatmentWidth                                */
/*                                                            */
/**************************************************************/
/*
NTCIPEssPaveTreatmentWidth ::= INTEGER (0..255)
     Indicates the width of the spread of treatment in meters

*/
typedef OSUINT8 NTCIPEssPaveTreatmentWidth;

EXTERN int asn1PE_NTCIPEssPaveTreatmentWidth (OSCTXT* pctxt, NTCIPEssPaveTreatmentWidth value);

EXTERN int asn1PD_NTCIPEssPaveTreatmentWidth (OSCTXT* pctxt, NTCIPEssPaveTreatmentWidth* pvalue);

/**************************************************************/
/*                                                            */
/*  SnapShot                                                  */
/*                                                            */
/**************************************************************/
/*
SnapShot ::= SEQUENCE {
   thePosition [0] FullPositionVector,
         -- data of the position and speed,
   safetyExt [1] VehicleSafetyExtensions OPTIONAL,
   dataSet [2] VehicleStatus OPTIONAL,
   ...,
   weatherData [3] NtcipEssData OPTIONAL
         -- Added by J2945/3
}
*/
typedef struct EXTERN SnapShot {
   struct {
      OSUINT8 safetyExtPresent : 1;
      OSUINT8 dataSetPresent : 1;
      OSUINT8 weatherDataPresent : 1;
   } m;
   struct FullPositionVector *thePosition;
   struct VehicleSafetyExtensions *safetyExt;
   struct VehicleStatus *dataSet;
   NtcipEssData weatherData;
   OSRTDList extElem1;
} SnapShot;

EXTERN int asn1PE_SnapShot (OSCTXT* pctxt, SnapShot* pvalue);

EXTERN int asn1PD_SnapShot (OSCTXT* pctxt, SnapShot* pvalue);

EXTERN int asn1Init_SnapShot (SnapShot* pvalue);

/**************************************************************/
/*                                                            */
/*  NtcipPavementTreatment                                    */
/*                                                            */
/**************************************************************/
/*
NtcipPavementTreatment ::= SEQUENCE {
   latitude [0] NTCIPEssPavementTreatmentLatitude,
   longitude [1] NTCIPEssPavementTreatmentLongitude,
   location [2] NTCIPEssPavementTreatmentLocation,
   productType [3] NTCIPEssPaveTreatProductType OPTIONAL,
   form [4] NTCIPEssPaveTreatProductForm OPTIONAL,
   percentage [5] NTCIPEssPercentProductMix OPTIONAL,
   amount [6] NTCIPEssPaveTreatmentAmount OPTIONAL,
   width [7] NTCIPEssPaveTreatmentWidth OPTIONAL,
   ...
}
*/
typedef struct EXTERN NtcipPavementTreatment {
   struct {
      OSUINT8 productTypePresent : 1;
      OSUINT8 formPresent : 1;
      OSUINT8 percentagePresent : 1;
      OSUINT8 amountPresent : 1;
      OSUINT8 widthPresent : 1;
   } m;
   NTCIPEssPavementTreatmentLatitude latitude;
   NTCIPEssPavementTreatmentLongitude longitude;
   NTCIPEssPavementTreatmentLocation location;
   NTCIPEssPaveTreatProductType productType;
   NTCIPEssPaveTreatProductForm form;
   NTCIPEssPercentProductMix percentage;
   NTCIPEssPaveTreatmentAmount amount;
   NTCIPEssPaveTreatmentWidth width;
   OSRTDList extElem1;
} NtcipPavementTreatment;

EXTERN int asn1PE_NtcipPavementTreatment (OSCTXT* pctxt, NtcipPavementTreatment* pvalue);

EXTERN int asn1PD_NtcipPavementTreatment (OSCTXT* pctxt, NtcipPavementTreatment* pvalue);

EXTERN int asn1Init_NtcipPavementTreatment (NtcipPavementTreatment* pvalue);

/**************************************************************/
/*                                                            */
/*  WDMSFleetData                                             */
/*                                                            */
/**************************************************************/
/*
WDMSFleetData ::= SEQUENCE {
   pavementTreat [0] NtcipPavementTreatment OPTIONAL,
   routingAdvice [1] ITIStext OPTIONAL,
   ...
}
*/
typedef struct EXTERN WDMSFleetData {
   struct {
      OSUINT8 pavementTreatPresent : 1;
      OSUINT8 routingAdvicePresent : 1;
   } m;
   NtcipPavementTreatment pavementTreat;
   ITIStext routingAdvice;
   OSRTDList extElem1;
} WDMSFleetData;

EXTERN int asn1PE_WDMSFleetData (OSCTXT* pctxt, WDMSFleetData* pvalue);

EXTERN int asn1PD_WDMSFleetData (OSCTXT* pctxt, WDMSFleetData* pvalue);

EXTERN int asn1Init_WDMSFleetData (WDMSFleetData* pvalue);

/**************************************************************/
/*                                                            */
/*  VehicleReport                                             */
/*                                                            */
/**************************************************************/
/*
VehicleReport ::= SEQUENCE {
   snapShot [0] SnapShot,
   wdmsFleetData [1] WDMSFleetData OPTIONAL,
   ...
}
*/
typedef struct EXTERN VehicleReport {
   struct {
      OSUINT8 wdmsFleetDataPresent : 1;
   } m;
   SnapShot snapShot;
   WDMSFleetData wdmsFleetData;
   OSRTDList extElem1;
} VehicleReport;

EXTERN int asn1PE_VehicleReport (OSCTXT* pctxt, VehicleReport* pvalue);

EXTERN int asn1PD_VehicleReport (OSCTXT* pctxt, VehicleReport* pvalue);

EXTERN int asn1Init_VehicleReport (VehicleReport* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadWeatherUpload_vehicleReport                           */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RoadWeatherUpload'
*/
/* List of VehicleReport */
typedef OSRTDList RoadWeatherUpload_vehicleReport;

EXTERN int asn1PE_RoadWeatherUpload_vehicleReport (OSCTXT* pctxt, RoadWeatherUpload_vehicleReport* pvalue);

EXTERN int asn1PD_RoadWeatherUpload_vehicleReport (OSCTXT* pctxt, RoadWeatherUpload_vehicleReport* pvalue);

EXTERN int asn1Init_RoadWeatherUpload_vehicleReport (
   RoadWeatherUpload_vehicleReport* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadWeatherUpload                                         */
/*                                                            */
/**************************************************************/
/*
 Upload messages are sent from vehicles to infrastructure
RoadWeatherUpload ::= CHOICE {
   vehicleReport [0] SEQUENCE (SIZE (1..32)) OF VehicleReport,
   citizenReport [1] SnapShot,
   ...
}
*/
/* Choice tag constants */

#define T_RoadWeatherUpload_vehicleReport 1
#define T_RoadWeatherUpload_citizenReport 2
#define T_RoadWeatherUpload_extElem1    3

typedef struct EXTERN RoadWeatherUpload {
   OSINT32 t;
   union {
      /* t = 1 */
      RoadWeatherUpload_vehicleReport *vehicleReport;
      /* t = 2 */
      SnapShot *citizenReport;
      /* t = 3 */
      ASN1OpenType *extElem1;
   } u;
} RoadWeatherUpload;

EXTERN int asn1PE_RoadWeatherUpload (OSCTXT* pctxt, RoadWeatherUpload* pvalue);

EXTERN int asn1PD_RoadWeatherUpload (OSCTXT* pctxt, RoadWeatherUpload* pvalue);

EXTERN int asn1Init_RoadWeatherUpload (RoadWeatherUpload* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadWeatherDownload                                       */
/*                                                            */
/**************************************************************/
/*
 Download messages are sent from infrastructure to vehicles
RoadWeatherDownload ::= SEQUENCE {
   travelerData [0] TravelerDataFrameList,
   wdmsFleetData [1] WDMSFleetData OPTIONAL,
   ...
}
*/
typedef struct EXTERN RoadWeatherDownload {
   struct {
      OSUINT8 wdmsFleetDataPresent : 1;
   } m;
   OSRTDList travelerData;
   WDMSFleetData wdmsFleetData;
   OSRTDList extElem1;
} RoadWeatherDownload;

EXTERN int asn1PE_RoadWeatherDownload (OSCTXT* pctxt, RoadWeatherDownload* pvalue);

EXTERN int asn1PD_RoadWeatherDownload (OSCTXT* pctxt, RoadWeatherDownload* pvalue);

EXTERN int asn1Init_RoadWeatherDownload (RoadWeatherDownload* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadWeatherMessage                                        */
/*                                                            */
/**************************************************************/
/*

 Data elements that begin with "NTCIP" (all caps) are derived from NTCIP
 1204 v04 MIB objects.
 For example, the data element name "NTCIPEssPavementTreatmentLatitude"
 corresponds with the MIB entry "essPavementTreatmentLatitude".
 See NTCIP 1204 v04 for additional information.

RoadWeatherMessage ::= CHOICE {
   upload [0] EXPLICIT RoadWeatherUpload,
   download [1] RoadWeatherDownload,
   ...
}
*/
/* Choice tag constants */

#define T_RoadWeatherMessage_upload     1
#define T_RoadWeatherMessage_download   2
#define T_RoadWeatherMessage_extElem1   3

typedef struct EXTERN RoadWeatherMessage {
   OSINT32 t;
   union {
      /* t = 1 */
      RoadWeatherUpload *upload;
      /* t = 2 */
      RoadWeatherDownload *download;
      /* t = 3 */
      ASN1OpenType *extElem1;
   } u;
} RoadWeatherMessage;

EXTERN int asn1PE_RoadWeatherMessage (OSCTXT* pctxt, RoadWeatherMessage* pvalue);

EXTERN int asn1PD_RoadWeatherMessage (OSCTXT* pctxt, RoadWeatherMessage* pvalue);

EXTERN int asn1Init_RoadWeatherMessage (RoadWeatherMessage* pvalue);

#ifdef __cplusplus
}
#endif

#endif
