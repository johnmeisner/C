/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.7.0, Date: 25-May-2023.
 *
 * Command:  asn1c CooperativeControlMsg-v1-ph.asn J2735-AddGrpB.asn J2735-AddGrpC.asn J2735-BasicSafetyMessage-v4.asn J2735-CommonSafetyRequest.asn J2735-Common-v7.asn J2735-EmergencyVehicleAlert.asn J2735-IntersectionCollision.asn J2735-ITIS.asn J2735-MapData-v1.asn J2735-MessageFrame-v5.asn J2735-NMEAcorrections.asn J2735-NTCIP.asn J2735-PersonalSafetyMessage.asn J2735-ProbeDataManagement.asn J2735-ProbeVehicleData.asn J2735-REGION.asn J2735-RoadSideAlert.asn J2735-RTCMcorrections.asn J2735-SignalRequestMessage.asn J2735-SignalStatusMessage.asn J2735-SPAT-v2.asn J2735-TestMessage00.asn J2735-TestMessage01.asn J2735-TestMessage02.asn J2735-TestMessage03.asn J2735-TestMessage04.asn J2735-TestMessage05.asn J2735-TestMessage06.asn J2735-TestMessage07.asn J2735-TestMessage08.asn J2735-TestMessage09.asn J2735-TestMessage10.asn J2735-TestMessage11.asn J2735-TestMessage12.asn J2735-TestMessage13.asn J2735-TestMessage14.asn J2735-TestMessage15.asn J2735-TravelerInformation-v2.asn MnvrSharingCoordMsg-v1-ph.asn PersonalSafetyMsg2-v1-ph.asn ProbeDataConfig-v0.30.asn ProbeDataReport-v0.30.asn RoadGeoAttributes-v2-ph.asn RoadSafetyMsg-v1-ph.asn RoadWeatherMessage.asn SensorDataSharingMsg-v1-ph.asn SignalControlAndPrioritizationRequest-v1-ph.asn SignalControlAndPrioritizationStatus-v1-ph.asn TollAdvertisementMsg-v0.10-ph.asn TollUsageAckMsg-v0.10-ph.asn TollUsageMsg-v0.10-ph.asn TrafficSignalPhaseAndTiming-v1-ph.asn -c -per -compact
 */
#ifndef SPAT_H
#define SPAT_H

#ifdef __cplusplus
extern "C" {
#endif

#include "rtkey.h"
#include "rtpersrc/asn1per.h"

/**
 * Header file for ASN.1 module SPAT
 */
/**************************************************************/
/*                                                            */
/*  TimeIntervalConfidence                                    */
/*                                                            */
/**************************************************************/
/*
TimeIntervalConfidence ::= INTEGER (0..15)
    Value   Probability
      0         21%
      1         36%
      2         47%
      3         56%
      4         62%
      5         68%
      6         73%
      7         77%
      8         81%
      9         85%
      10        88%
      11        91%
      12        94%
      13        96%
      14        98%
      15        100%

*/
typedef OSUINT8 TimeIntervalConfidence;

EXTERN int asn1PE_TimeIntervalConfidence (OSCTXT* pctxt, TimeIntervalConfidence value);

EXTERN int asn1PD_TimeIntervalConfidence (OSCTXT* pctxt, TimeIntervalConfidence* pvalue);

#include "rtxsrc/rtxEnum.h"
/**************************************************************/
/*                                                            */
/*  AdvisorySpeedType                                         */
/*                                                            */
/**************************************************************/
/*
AdvisorySpeedType ::= ENUMERATED { none(0), greenwave(1), ecoDrive(2), transit(3), ... }
       Note: subject to further growth

*/
typedef enum {
   none_4 = 0,
   greenwave = 1,
   ecoDrive = 2,
   transit_1 = 3
} AdvisorySpeedType_Root;

typedef OSUINT8 AdvisorySpeedType;

EXTERN int asn1PE_AdvisorySpeedType (OSCTXT* pctxt, AdvisorySpeedType value);

EXTERN int asn1PD_AdvisorySpeedType (OSCTXT* pctxt, AdvisorySpeedType* pvalue);

EXTERN extern const OSEnumItem AdvisorySpeedType_ENUMTAB[];
#define AdvisorySpeedType_ENUMTABSIZE 4

EXTERN const OSUTF8CHAR* AdvisorySpeedType_ToString (OSINT32 value);

EXTERN int AdvisorySpeedType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, AdvisorySpeedType* pvalue);

EXTERN int AdvisorySpeedType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, AdvisorySpeedType* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionStatusObject                                  */
/*                                                            */
/**************************************************************/
/*
IntersectionStatusObject ::= BIT STRING  { manualControlIsEnabled(0), stopTimeIsActivated(1), failureFlash(2), preemptIsActive(3), signalPriorityIsActive(4), fixedTimeOperation(5), trafficDependentOperation(6), standbyOperation(7), failureMode(8), off(9), recentMAPmessageUpdate(10), recentChangeInMAPassignedLanesIDsUsed(11), noValidMAPisAvailableAtThisTime(12), noValidSPATisAvailableAtThisTime(13) } (SIZE (16))
*/
/* Named bit constants */

#define IntersectionStatusObject_manualControlIsEnabled          0
#define IntersectionStatusObject_stopTimeIsActivated             1
#define IntersectionStatusObject_failureFlash                    2
#define IntersectionStatusObject_preemptIsActive                 3
#define IntersectionStatusObject_signalPriorityIsActive          4
#define IntersectionStatusObject_fixedTimeOperation              5
#define IntersectionStatusObject_trafficDependentOperation       6
#define IntersectionStatusObject_standbyOperation                7
#define IntersectionStatusObject_failureMode                     8
#define IntersectionStatusObject_off                             9
#define IntersectionStatusObject_recentMAPmessageUpdate          10
#define IntersectionStatusObject_recentChangeInMAPassignedLanesIDsUsed 11
#define IntersectionStatusObject_noValidMAPisAvailableAtThisTime 12
#define IntersectionStatusObject_noValidSPATisAvailableAtThisTime 13

typedef struct IntersectionStatusObject {
   OSUINT32 numbits;
   OSOCTET data[2];
} IntersectionStatusObject;

EXTERN int asn1PE_IntersectionStatusObject (OSCTXT* pctxt, IntersectionStatusObject* pvalue);

EXTERN int asn1PD_IntersectionStatusObject (OSCTXT* pctxt, IntersectionStatusObject* pvalue);

EXTERN int asn1Init_IntersectionStatusObject (IntersectionStatusObject* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementPhaseState                                        */
/*                                                            */
/**************************************************************/
/*
MovementPhaseState ::= ENUMERATED { unavailable(0), dark(1), stop-Then-Proceed(2), stop-And-Remain(3), pre-Movement(4), permissive-Movement-Allowed(5), protected-Movement-Allowed(6), permissive-clearance(7), protected-clearance(8), caution-Conflicting-Traffic(9) }
     The above number assignments are not used with UPER encoding
     and are only to be used with DER or implicit encoding

*/
typedef enum {
   unavailable_29 = 0,
   dark = 1,
   stop_Then_Proceed = 2,
   stop_And_Remain = 3,
   pre_Movement = 4,
   permissive_Movement_Allowed = 5,
   protected_Movement_Allowed = 6,
   permissive_clearance = 7,
   protected_clearance = 8,
   caution_Conflicting_Traffic = 9
} MovementPhaseState_Root;

typedef OSUINT8 MovementPhaseState;

EXTERN int asn1PE_MovementPhaseState (OSCTXT* pctxt, MovementPhaseState value);

EXTERN int asn1PD_MovementPhaseState (OSCTXT* pctxt, MovementPhaseState* pvalue);

EXTERN extern const OSEnumItem MovementPhaseState_ENUMTAB[];
#define MovementPhaseState_ENUMTABSIZE 10

EXTERN const OSUTF8CHAR* MovementPhaseState_ToString (OSINT32 value);

EXTERN int MovementPhaseState_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, MovementPhaseState* pvalue);

EXTERN int MovementPhaseState_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, MovementPhaseState* pvalue);

/**************************************************************/
/*                                                            */
/*  PedestrianBicycleDetect                                   */
/*                                                            */
/**************************************************************/
/*
PedestrianBicycleDetect ::= BOOLEAN
                  true if ANY Pedestrians or Bicyclists are
                  detected crossing the target lane or lanes

*/
typedef OSBOOL PedestrianBicycleDetect;

EXTERN int asn1PE_PedestrianBicycleDetect (OSCTXT* pctxt, PedestrianBicycleDetect value);

EXTERN int asn1PD_PedestrianBicycleDetect (OSCTXT* pctxt, PedestrianBicycleDetect* pvalue);

/**************************************************************/
/*                                                            */
/*  SpeedAdvice                                               */
/*                                                            */
/**************************************************************/
/*
SpeedAdvice ::= INTEGER (0..500)
     LSB units are 0.1 m/s^2
     the value 499 shall be used for values at or greater than 49.9 m/s
     the value 500 shall be used to indicate that speed is unavailable

*/
typedef OSUINT16 SpeedAdvice;

EXTERN int asn1PE_SpeedAdvice (OSCTXT* pctxt, SpeedAdvice value);

EXTERN int asn1PD_SpeedAdvice (OSCTXT* pctxt, SpeedAdvice* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeMark                                                  */
/*                                                            */
/**************************************************************/
/*
TimeMark ::= INTEGER (0..36111)
    In units of 1/10th second from UTC time
    A range of 0~35999 covers one hour
    The values 36000..36009 are used when a leap second occurs
    The values 36010..36110 are reserved for future use
    36111 is to be used when the value is undefined or unknown
    Note that this is NOT expressed in GPS time
    or in local time

*/
typedef OSUINT16 SPAT_TimeMark;

EXTERN int asn1PE_SPAT_TimeMark (OSCTXT* pctxt, SPAT_TimeMark value);

EXTERN int asn1PD_SPAT_TimeMark (OSCTXT* pctxt, SPAT_TimeMark* pvalue);

/**************************************************************/
/*                                                            */
/*  WaitOnStopline                                            */
/*                                                            */
/**************************************************************/
/*
WaitOnStopline ::= BOOLEAN
                            
          True or False
          If "true," the vehicles on this specific connecting
          maneuver have to stop on the stop-line
          and not to enter the collision area

*/
typedef OSBOOL WaitOnStopline;

EXTERN int asn1PE_WaitOnStopline (OSCTXT* pctxt, WaitOnStopline value);

EXTERN int asn1PD_WaitOnStopline (OSCTXT* pctxt, WaitOnStopline* pvalue);

/**************************************************************/
/*                                                            */
/*  ZoneLength                                                */
/*                                                            */
/**************************************************************/
/*
ZoneLength ::= INTEGER (0..10000)
     Unit = 1 meter, 0 = unknown,
     The value 10000 to be used for Distances >=10000 m
     (e.g., from known point to another point along a
     known path, often against traffic flow direction
     when used for measuring queues)

*/
typedef OSUINT16 ZoneLength;

EXTERN int asn1PE_ZoneLength (OSCTXT* pctxt, ZoneLength value);

EXTERN int asn1PD_ZoneLength (OSCTXT* pctxt, ZoneLength* pvalue);

/**************************************************************/
/*                                                            */
/*  EnabledLaneList                                           */
/*                                                            */
/**************************************************************/
/*
EnabledLaneList ::= SEQUENCE (SIZE (1..16)) OF LaneID
    The unique ID numbers for each
    lane object which is 'active'
    as part of the dynamic map contents.

*/
typedef struct EXTERN EnabledLaneList {
   OSSIZE n;
   OSUINT8 *elem;
} EnabledLaneList;

EXTERN int asn1PE_EnabledLaneList (OSCTXT* pctxt, EnabledLaneList* pvalue);

EXTERN int asn1PD_EnabledLaneList (OSCTXT* pctxt, EnabledLaneList* pvalue);

EXTERN int asn1Init_EnabledLaneList (EnabledLaneList* pvalue);

/**************************************************************/
/*                                                            */
/*  TimeChangeDetails                                         */
/*                                                            */
/**************************************************************/
/*
TimeChangeDetails ::= SEQUENCE {
   startTime [0] TimeMark OPTIONAL,
               -- When this future phase will start
   minEndTime [1] TimeMark,
               -- Expected shortest end time
   maxEndTime [2] TimeMark OPTIONAL,
               -- Expected longest end time
   likelyTime [3] TimeMark OPTIONAL,
               -- Best predicted value based on other data
   confidence [4] TimeIntervalConfidence OPTIONAL,
               -- Applies to above time element only
   nextTime [5] TimeMark OPTIONAL
               -- A rough estimate of time when
               -- this phase may next occur again
               -- used to support various ECO driving power
               -- management needs.
}
*/
typedef struct EXTERN TimeChangeDetails {
   struct {
      OSUINT8 startTimePresent : 1;
      OSUINT8 maxEndTimePresent : 1;
      OSUINT8 likelyTimePresent : 1;
      OSUINT8 confidencePresent : 1;
      OSUINT8 nextTimePresent : 1;
   } m;
   SPAT_TimeMark startTime;
   SPAT_TimeMark minEndTime;
   SPAT_TimeMark maxEndTime;
   SPAT_TimeMark likelyTime;
   TimeIntervalConfidence confidence;
   SPAT_TimeMark nextTime;
} TimeChangeDetails;

EXTERN int asn1PE_TimeChangeDetails (OSCTXT* pctxt, TimeChangeDetails* pvalue);

EXTERN int asn1PD_TimeChangeDetails (OSCTXT* pctxt, TimeChangeDetails* pvalue);

EXTERN int asn1Init_TimeChangeDetails (TimeChangeDetails* pvalue);

/**************************************************************/
/*                                                            */
/*  AdvisorySpeed_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'AdvisorySpeed'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList AdvisorySpeed_regional;

EXTERN int asn1PE_AdvisorySpeed_regional (OSCTXT* pctxt, AdvisorySpeed_regional* pvalue);

EXTERN int asn1PD_AdvisorySpeed_regional (OSCTXT* pctxt, AdvisorySpeed_regional* pvalue);

EXTERN int asn1Init_AdvisorySpeed_regional (AdvisorySpeed_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  AdvisorySpeed                                             */
/*                                                            */
/**************************************************************/
/*
AdvisorySpeed ::= SEQUENCE {
   type [0] AdvisorySpeedType,
               -- the type of advisory which this is.
   speed [1] SpeedAdvice OPTIONAL,
               -- See Section 11 for converting and translating speed
               -- expressed in mph into units of m/s
               -- This element is optional ONLY when superceded
               -- by the presence of a regional speed element found in
               -- Reg-AdvisorySpeed entry
   confidence [2] SpeedConfidence OPTIONAL,
               -- A confidence value for the above speed
   distance [3] ZoneLength OPTIONAL,
               -- Unit = 1 meter,
               -- The distance indicates the region for which the advised speed
               -- is recommended, it is specified upstream from the stop bar
               -- along the connected egressing lane
   class [4] RestrictionClassID OPTIONAL,
               -- the vehicle types to which it applies
               -- when absent, the AdvisorySpeed applies to
               -- all motor vehicle types
   regional [5] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN AdvisorySpeed {
   struct {
      OSUINT8 speedPresent : 1;
      OSUINT8 confidencePresent : 1;
      OSUINT8 distancePresent : 1;
      OSUINT8 class_Present : 1;
      OSUINT8 regionalPresent : 1;
   } m;
   AdvisorySpeedType type;
   SpeedAdvice speed;
   OSUINT8 confidence;
   ZoneLength distance;
   OSUINT8 class_;
   AdvisorySpeed_regional regional;
   OSRTDList extElem1;
} AdvisorySpeed;

EXTERN int asn1PE_AdvisorySpeed (OSCTXT* pctxt, AdvisorySpeed* pvalue);

EXTERN int asn1PD_AdvisorySpeed (OSCTXT* pctxt, AdvisorySpeed* pvalue);

EXTERN int asn1Init_AdvisorySpeed (AdvisorySpeed* pvalue);

/**************************************************************/
/*                                                            */
/*  AdvisorySpeedList                                         */
/*                                                            */
/**************************************************************/
/*
AdvisorySpeedList ::= SEQUENCE (SIZE (1..16)) OF AdvisorySpeed
*/
/* List of AdvisorySpeed */
typedef OSRTDList AdvisorySpeedList;

EXTERN int asn1PE_AdvisorySpeedList (OSCTXT* pctxt, AdvisorySpeedList* pvalue);

EXTERN int asn1PD_AdvisorySpeedList (OSCTXT* pctxt, AdvisorySpeedList* pvalue);

EXTERN int asn1Init_AdvisorySpeedList (AdvisorySpeedList* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementEvent_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MovementEvent'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList MovementEvent_regional;

EXTERN int asn1PE_MovementEvent_regional (OSCTXT* pctxt, MovementEvent_regional* pvalue);

EXTERN int asn1PD_MovementEvent_regional (OSCTXT* pctxt, MovementEvent_regional* pvalue);

EXTERN int asn1Init_MovementEvent_regional (MovementEvent_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementEvent                                             */
/*                                                            */
/**************************************************************/
/*
MovementEvent ::= SEQUENCE {
   eventState [0] MovementPhaseState,
                -- Consisting of:
                -- Phase state (the basic 11 states)
                -- Directional, protected, or permissive state
   timing [1] TimeChangeDetails OPTIONAL,
                -- Timing Data in UTC time stamps for event
                -- includes start and min/max end times of phase
                -- confidence and estimated next occurrence
   speeds [2] AdvisorySpeedList OPTIONAL,
                -- various speed advisories for use by
                -- general and specific types of vehicles
                -- supporting green-wave and other flow needs
                -- See Section 11 for converting and translating
                -- speed expressed in mph into units of m/s
   regional [3] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN MovementEvent {
   struct {
      OSUINT8 timingPresent : 1;
      OSUINT8 speedsPresent : 1;
      OSUINT8 regionalPresent : 1;
   } m;
   MovementPhaseState eventState;
   TimeChangeDetails timing;
   AdvisorySpeedList speeds;
   MovementEvent_regional regional;
   OSRTDList extElem1;
} MovementEvent;

EXTERN int asn1PE_MovementEvent (OSCTXT* pctxt, MovementEvent* pvalue);

EXTERN int asn1PD_MovementEvent (OSCTXT* pctxt, MovementEvent* pvalue);

EXTERN int asn1Init_MovementEvent (MovementEvent* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementEventList                                         */
/*                                                            */
/**************************************************************/
/*
MovementEventList ::= SEQUENCE (SIZE (1..16)) OF MovementEvent
*/
/* List of MovementEvent */
typedef OSRTDList MovementEventList;

EXTERN int asn1PE_MovementEventList (OSCTXT* pctxt, MovementEventList* pvalue);

EXTERN int asn1PD_MovementEventList (OSCTXT* pctxt, MovementEventList* pvalue);

EXTERN int asn1Init_MovementEventList (MovementEventList* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectionManeuverAssist_regional                         */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'ConnectionManeuverAssist'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList ConnectionManeuverAssist_regional;

EXTERN int asn1PE_ConnectionManeuverAssist_regional (OSCTXT* pctxt, ConnectionManeuverAssist_regional* pvalue);

EXTERN int asn1PD_ConnectionManeuverAssist_regional (OSCTXT* pctxt, ConnectionManeuverAssist_regional* pvalue);

EXTERN int asn1Init_ConnectionManeuverAssist_regional (
   ConnectionManeuverAssist_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectionManeuverAssist                                  */
/*                                                            */
/**************************************************************/
/*
ConnectionManeuverAssist ::= SEQUENCE {
   connectionID [0] LaneConnectionID,
                        -- the common connectionID used by all lanes to which
                        -- this data applies
                        -- (this value traces to ConnectsTo entries in lanes)
   -- Expected Clearance Information
   queueLength [1] ZoneLength OPTIONAL,
                        -- Unit = 1 meter, 0 = no queue
                        -- The distance from the stop line to the back
                        -- edge of the last vehicle in the queue,
                        -- as measured along the lane center line.
   availableStorageLength [2] ZoneLength OPTIONAL,
                        -- Unit = 1 meter, 0 = no space remains
                        -- Distance (e.g., beginning from the downstream
                        -- stop-line up to a given distance) with a high
                        -- probability for successfully executing the
                        -- connecting maneuver between the two lanes
                        -- during the current cycle.
                        -- Used for enhancing the awareness of vehicles
                        -- to anticipate if they can pass the stop line
                        -- of the lane. Used for optimizing the green wave,
                        -- due to knowledge of vehicles waiting in front
                        -- of a red light (downstream).
                        -- The element nextTime in TimeChangeDetails
                        -- in the containing data frame contains the next
                        -- timemark at which an active phase is expected,
                        -- a form of storage flush interval.
   waitOnStop [3] WaitOnStopline OPTIONAL,
                        -- If "true," the vehicles on this specific connecting
                        -- maneuver have to stop on the stop-line and not
                        -- to enter the collision area
   pedBicycleDetect [4] PedestrianBicycleDetect OPTIONAL,
                        -- true if ANY ped or bicycles are detected crossing
                        -- the above lanes. Set to false ONLY if there is a
                        -- high certainty that there are none present,
                        -- otherwise element is not sent.
   regional [5] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN ConnectionManeuverAssist {
   struct {
      OSUINT8 queueLengthPresent : 1;
      OSUINT8 availableStorageLengthPresent : 1;
      OSUINT8 waitOnStopPresent : 1;
      OSUINT8 pedBicycleDetectPresent : 1;
      OSUINT8 regionalPresent : 1;
   } m;
   OSUINT8 connectionID;
   ZoneLength queueLength;
   ZoneLength availableStorageLength;
   WaitOnStopline waitOnStop;
   PedestrianBicycleDetect pedBicycleDetect;
   ConnectionManeuverAssist_regional regional;
   OSRTDList extElem1;
} ConnectionManeuverAssist;

EXTERN int asn1PE_ConnectionManeuverAssist (OSCTXT* pctxt, ConnectionManeuverAssist* pvalue);

EXTERN int asn1PD_ConnectionManeuverAssist (OSCTXT* pctxt, ConnectionManeuverAssist* pvalue);

EXTERN int asn1Init_ConnectionManeuverAssist (ConnectionManeuverAssist* pvalue);

/**************************************************************/
/*                                                            */
/*  ManeuverAssistList                                        */
/*                                                            */
/**************************************************************/
/*
ManeuverAssistList ::= SEQUENCE (SIZE (1..16)) OF ConnectionManeuverAssist
*/
/* List of ConnectionManeuverAssist */
typedef OSRTDList ManeuverAssistList;

EXTERN int asn1PE_ManeuverAssistList (OSCTXT* pctxt, ManeuverAssistList* pvalue);

EXTERN int asn1PD_ManeuverAssistList (OSCTXT* pctxt, ManeuverAssistList* pvalue);

EXTERN int asn1Init_ManeuverAssistList (ManeuverAssistList* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementState_regional                                    */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MovementState'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList MovementState_regional;

EXTERN int asn1PE_MovementState_regional (OSCTXT* pctxt, MovementState_regional* pvalue);

EXTERN int asn1PD_MovementState_regional (OSCTXT* pctxt, MovementState_regional* pvalue);

EXTERN int asn1Init_MovementState_regional (MovementState_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementState                                             */
/*                                                            */
/**************************************************************/
/*
MovementState ::= SEQUENCE {
   movementName [0] DescriptiveName OPTIONAL,
                      -- uniquely defines movement by name
                      -- human readable name for intersection
                      -- to be used only in debug mode
   signalGroup [1] SignalGroupID,
                      -- the group id is used to map to lists
                      -- of lanes (and their descriptions)
                      -- which this MovementState data applies to
                      -- see comments in the Remarks for usage details
   state-time-speed [2] MovementEventList,
                      -- Consisting of sets of movement data with:
                      -- a)  SignalPhaseState
                      -- b)  TimeChangeDetails,  and
                      -- c)  AdvisorySpeeds      (optional )
                      -- Note one or more of the movement events may be for
                      -- a future time and that this allows conveying multiple
                      -- predictive phase and movement timing for various uses
                      -- for the current signal group
   maneuverAssistList [3] ManeuverAssistList OPTIONAL,
                      -- This information may also be placed in the
                      -- IntersectionState when common information applies to
                      -- different lanes in the same way
   regional [4] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN MovementState {
   struct {
      OSUINT8 movementNamePresent : 1;
      OSUINT8 maneuverAssistListPresent : 1;
      OSUINT8 regionalPresent : 1;
   } m;
   const char* movementName;
   OSUINT8 signalGroup;
   MovementEventList state_time_speed;
   ManeuverAssistList maneuverAssistList;
   MovementState_regional regional;
   OSRTDList extElem1;
} MovementState;

EXTERN int asn1PE_MovementState (OSCTXT* pctxt, MovementState* pvalue);

EXTERN int asn1PD_MovementState (OSCTXT* pctxt, MovementState* pvalue);

EXTERN int asn1Init_MovementState (MovementState* pvalue);

/**************************************************************/
/*                                                            */
/*  MovementList                                              */
/*                                                            */
/**************************************************************/
/*
MovementList ::= SEQUENCE (SIZE (1..255)) OF MovementState
*/
/* List of MovementState */
typedef OSRTDList MovementList;

EXTERN int asn1PE_MovementList (OSCTXT* pctxt, MovementList* pvalue);

EXTERN int asn1PD_MovementList (OSCTXT* pctxt, MovementList* pvalue);

EXTERN int asn1Init_MovementList (MovementList* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionState_regional                                */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionState'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList IntersectionState_regional;

EXTERN int asn1PE_IntersectionState_regional (OSCTXT* pctxt, IntersectionState_regional* pvalue);

EXTERN int asn1PD_IntersectionState_regional (OSCTXT* pctxt, IntersectionState_regional* pvalue);

EXTERN int asn1Init_IntersectionState_regional (IntersectionState_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionState                                         */
/*                                                            */
/**************************************************************/
/*
IntersectionState ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
                -- human readable name for intersection
                -- to be used only in debug mode
   id [1] IntersectionReferenceID,
                -- A globally unique value set, consisting of a
                -- regionID and intersection ID assignment
                -- provides a unique mapping to the
                -- intersection MAP in question
                -- which provides complete location
                -- and approach/move/lane data
   revision [2] MsgCount,
   status [3] IntersectionStatusObject,
                -- general status of the controller(s)
   moy [4] MinuteOfTheYear OPTIONAL,
                -- Minute of current UTC year
                -- used only with messages to be archived
   timeStamp [5] DSecond OPTIONAL,
                -- the mSec point in the current UTC minute that
                -- this message was constructed
   enabledLanes [6] EnabledLaneList OPTIONAL,
                -- a list of lanes where the RevocableLane bit
                -- has been set which are now active and
                -- therefore part of the current intersection
   states [7] MovementList,
                -- Each Movement is given in turn
                -- and contains its signal phase state,
                -- mapping to the lanes it applies to, and
                -- point in time it will end, and it
                -- may contain both active and future states
   maneuverAssistList [8] ManeuverAssistList OPTIONAL,
                -- Assist data
   regional [9] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...,
   roadAuthorityID [10] EXPLICIT RoadAuthorityID OPTIONAL
}
*/
typedef struct EXTERN IntersectionState {
   struct {
      OSUINT8 namePresent : 1;
      OSUINT8 moyPresent : 1;
      OSUINT8 timeStampPresent : 1;
      OSUINT8 enabledLanesPresent : 1;
      OSUINT8 maneuverAssistListPresent : 1;
      OSUINT8 regionalPresent : 1;
      OSUINT8 roadAuthorityIDPresent : 1;
   } m;
   const char* name;
   struct IntersectionReferenceID *id;
   OSUINT8 revision;
   IntersectionStatusObject status;
   OSUINT32 moy;
   OSUINT16 timeStamp;
   EnabledLaneList enabledLanes;
   MovementList states;
   ManeuverAssistList maneuverAssistList;
   IntersectionState_regional regional;
   struct RoadAuthorityID *roadAuthorityID;
   OSRTDList extElem1;
} IntersectionState;

EXTERN int asn1PE_IntersectionState (OSCTXT* pctxt, IntersectionState* pvalue);

EXTERN int asn1PD_IntersectionState (OSCTXT* pctxt, IntersectionState* pvalue);

EXTERN int asn1Init_IntersectionState (IntersectionState* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionStateList                                     */
/*                                                            */
/**************************************************************/
/*
IntersectionStateList ::= SEQUENCE (SIZE (1..32)) OF IntersectionState
*/
/* List of IntersectionState */
typedef OSRTDList IntersectionStateList;

EXTERN int asn1PE_IntersectionStateList (OSCTXT* pctxt, IntersectionStateList* pvalue);

EXTERN int asn1PD_IntersectionStateList (OSCTXT* pctxt, IntersectionStateList* pvalue);

EXTERN int asn1Init_IntersectionStateList (IntersectionStateList* pvalue);

/**************************************************************/
/*                                                            */
/*  SPAT_regional                                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'SPAT'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList SPAT_regional;

EXTERN int asn1PE_SPAT_regional (OSCTXT* pctxt, SPAT_regional* pvalue);

EXTERN int asn1PD_SPAT_regional (OSCTXT* pctxt, SPAT_regional* pvalue);

EXTERN int asn1Init_SPAT_regional (SPAT_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  SPAT                                                      */
/*                                                            */
/**************************************************************/
/*
SPAT ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   name [1] DescriptiveName OPTIONAL,
                 -- human readable name for this collection
                 -- to be used only in debug mode
   intersections [2] IntersectionStateList,
                 -- sets of SPAT data (one per intersection)
   -- If PrioritizationResponse data is required, it is found
   -- in the RegionalSPAT entry below
   regional [3] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN SPAT {
   struct {
      OSUINT8 timeStampPresent : 1;
      OSUINT8 namePresent : 1;
      OSUINT8 regionalPresent : 1;
   } m;
   OSUINT32 timeStamp;
   const char* name;
   IntersectionStateList intersections;
   SPAT_regional regional;
   OSRTDList extElem1;
} SPAT;

EXTERN int asn1PE_SPAT (OSCTXT* pctxt, SPAT* pvalue);

EXTERN int asn1PD_SPAT (OSCTXT* pctxt, SPAT* pvalue);

EXTERN int asn1Init_SPAT (SPAT* pvalue);

#ifdef __cplusplus
}
#endif

#endif
