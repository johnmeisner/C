/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 7.7.0, Date: 25-May-2023.
 *
 * Command:  asn1c CooperativeControlMsg-v1-ph.asn J2735-AddGrpB.asn J2735-AddGrpC.asn J2735-BasicSafetyMessage-v4.asn J2735-CommonSafetyRequest.asn J2735-Common-v7.asn J2735-EmergencyVehicleAlert.asn J2735-IntersectionCollision.asn J2735-ITIS.asn J2735-MapData-v1.asn J2735-MessageFrame-v5.asn J2735-NMEAcorrections.asn J2735-NTCIP.asn J2735-PersonalSafetyMessage.asn J2735-ProbeDataManagement.asn J2735-ProbeVehicleData.asn J2735-REGION.asn J2735-RoadSideAlert.asn J2735-RTCMcorrections.asn J2735-SignalRequestMessage.asn J2735-SignalStatusMessage.asn J2735-SPAT-v2.asn J2735-TestMessage00.asn J2735-TestMessage01.asn J2735-TestMessage02.asn J2735-TestMessage03.asn J2735-TestMessage04.asn J2735-TestMessage05.asn J2735-TestMessage06.asn J2735-TestMessage07.asn J2735-TestMessage08.asn J2735-TestMessage09.asn J2735-TestMessage10.asn J2735-TestMessage11.asn J2735-TestMessage12.asn J2735-TestMessage13.asn J2735-TestMessage14.asn J2735-TestMessage15.asn J2735-TravelerInformation-v2.asn MnvrSharingCoordMsg-v1-ph.asn PersonalSafetyMsg2-v1-ph.asn ProbeDataConfig-v0.30.asn ProbeDataReport-v0.30.asn RoadGeoAttributes-v2-ph.asn RoadSafetyMsg-v1-ph.asn RoadWeatherMessage.asn SensorDataSharingMsg-v1-ph.asn SignalControlAndPrioritizationRequest-v1-ph.asn SignalControlAndPrioritizationStatus-v1-ph.asn TollAdvertisementMsg-v0.10-ph.asn TollUsageAckMsg-v0.10-ph.asn TollUsageMsg-v0.10-ph.asn TrafficSignalPhaseAndTiming-v1-ph.asn -c -per -compact
 */
#ifndef MAPDATA_H
#define MAPDATA_H

#ifdef __cplusplus
extern "C" {
#endif

#include "rtkey.h"
#include "rtpersrc/asn1per.h"

/**
 * Header file for ASN.1 module MapData
 */
/**************************************************************/
/*                                                            */
/*  AllowedManeuvers                                          */
/*                                                            */
/**************************************************************/
/*
AllowedManeuvers ::= BIT STRING  { maneuverStraightAllowed(0), maneuverLeftAllowed(1), maneuverRightAllowed(2), maneuverUTurnAllowed(3), maneuverLeftTurnOnRedAllowed(4), maneuverRightTurnOnRedAllowed(5), maneuverLaneChangeAllowed(6), maneuverNoStoppingAllowed(7), yieldAllwaysRequired(8), goWithHalt(9), caution(10), reserved1(11) } (SIZE (12))
*/
/* Named bit constants */

#define AllowedManeuvers_maneuverStraightAllowed         0
#define AllowedManeuvers_maneuverLeftAllowed             1
#define AllowedManeuvers_maneuverRightAllowed            2
#define AllowedManeuvers_maneuverUTurnAllowed            3
#define AllowedManeuvers_maneuverLeftTurnOnRedAllowed    4
#define AllowedManeuvers_maneuverRightTurnOnRedAllowed   5
#define AllowedManeuvers_maneuverLaneChangeAllowed       6
#define AllowedManeuvers_maneuverNoStoppingAllowed       7
#define AllowedManeuvers_yieldAllwaysRequired            8
#define AllowedManeuvers_goWithHalt                      9
#define AllowedManeuvers_caution                         10
#define AllowedManeuvers_reserved1                       11

typedef struct AllowedManeuvers {
   OSUINT32 numbits;
   OSOCTET data[2];
} AllowedManeuvers;

EXTERN int asn1PE_AllowedManeuvers (OSCTXT* pctxt, AllowedManeuvers* pvalue);

EXTERN int asn1PD_AllowedManeuvers (OSCTXT* pctxt, AllowedManeuvers* pvalue);

EXTERN int asn1Init_AllowedManeuvers (AllowedManeuvers* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Barrier                                    */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Barrier ::= BIT STRING  { median-RevocableLane(0), median(1), whiteLineHashing(2), stripedLines(3), doubleStripedLines(4), trafficCones(5), constructionBarrier(6), trafficChannels(7), lowCurbs(8), highCurbs(9) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_Barrier_median_RevocableLane            0
#define LaneAttributes_Barrier_median                          1
#define LaneAttributes_Barrier_whiteLineHashing                2
#define LaneAttributes_Barrier_stripedLines                    3
#define LaneAttributes_Barrier_doubleStripedLines              4
#define LaneAttributes_Barrier_trafficCones                    5
#define LaneAttributes_Barrier_constructionBarrier             6
#define LaneAttributes_Barrier_trafficChannels                 7
#define LaneAttributes_Barrier_lowCurbs                        8
#define LaneAttributes_Barrier_highCurbs                       9

typedef struct LaneAttributes_Barrier {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_Barrier;

EXTERN int asn1PE_LaneAttributes_Barrier (OSCTXT* pctxt, LaneAttributes_Barrier* pvalue);

EXTERN int asn1PD_LaneAttributes_Barrier (OSCTXT* pctxt, LaneAttributes_Barrier* pvalue);

EXTERN int asn1Init_LaneAttributes_Barrier (LaneAttributes_Barrier* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Bike                                       */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Bike ::= BIT STRING  { bikeRevocableLane(0), pedestrianUseAllowed(1), isBikeFlyOverLane(2), fixedCycleTime(3), biDirectionalCycleTimes(4), isolatedByBarrier(5), unsignalizedSegmentsPresent(6) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_Bike_bikeRevocableLane               0
#define LaneAttributes_Bike_pedestrianUseAllowed            1
#define LaneAttributes_Bike_isBikeFlyOverLane               2
#define LaneAttributes_Bike_fixedCycleTime                  3
#define LaneAttributes_Bike_biDirectionalCycleTimes         4
#define LaneAttributes_Bike_isolatedByBarrier               5
#define LaneAttributes_Bike_unsignalizedSegmentsPresent     6

typedef struct LaneAttributes_Bike {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_Bike;

EXTERN int asn1PE_LaneAttributes_Bike (OSCTXT* pctxt, LaneAttributes_Bike* pvalue);

EXTERN int asn1PD_LaneAttributes_Bike (OSCTXT* pctxt, LaneAttributes_Bike* pvalue);

EXTERN int asn1Init_LaneAttributes_Bike (LaneAttributes_Bike* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Crosswalk                                  */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Crosswalk ::= BIT STRING  { crosswalkRevocableLane(0), bicyleUseAllowed(1), isXwalkFlyOverLane(2), fixedCycleTime(3), biDirectionalCycleTimes(4), hasPushToWalkButton(5), audioSupport(6), rfSignalRequestPresent(7), unsignalizedSegmentsPresent(8) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_Crosswalk_crosswalkRevocableLane          0
#define LaneAttributes_Crosswalk_bicyleUseAllowed                1
#define LaneAttributes_Crosswalk_isXwalkFlyOverLane              2
#define LaneAttributes_Crosswalk_fixedCycleTime_1                3
#define LaneAttributes_Crosswalk_biDirectionalCycleTimes_1       4
#define LaneAttributes_Crosswalk_hasPushToWalkButton             5
#define LaneAttributes_Crosswalk_audioSupport                    6
#define LaneAttributes_Crosswalk_rfSignalRequestPresent          7
#define LaneAttributes_Crosswalk_unsignalizedSegmentsPresent_1   8

typedef struct LaneAttributes_Crosswalk {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_Crosswalk;

EXTERN int asn1PE_LaneAttributes_Crosswalk (OSCTXT* pctxt, LaneAttributes_Crosswalk* pvalue);

EXTERN int asn1PD_LaneAttributes_Crosswalk (OSCTXT* pctxt, LaneAttributes_Crosswalk* pvalue);

EXTERN int asn1Init_LaneAttributes_Crosswalk (LaneAttributes_Crosswalk* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Parking                                    */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Parking ::= BIT STRING  { parkingRevocableLane(0), parallelParkingInUse(1), headInParkingInUse(2), doNotParkZone(3), parkingForBusUse(4), parkingForTaxiUse(5), noPublicParkingUse(6) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_Parking_parkingRevocableLane            0
#define LaneAttributes_Parking_parallelParkingInUse            1
#define LaneAttributes_Parking_headInParkingInUse              2
#define LaneAttributes_Parking_doNotParkZone                   3
#define LaneAttributes_Parking_parkingForBusUse                4
#define LaneAttributes_Parking_parkingForTaxiUse               5
#define LaneAttributes_Parking_noPublicParkingUse              6

typedef struct LaneAttributes_Parking {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_Parking;

EXTERN int asn1PE_LaneAttributes_Parking (OSCTXT* pctxt, LaneAttributes_Parking* pvalue);

EXTERN int asn1PD_LaneAttributes_Parking (OSCTXT* pctxt, LaneAttributes_Parking* pvalue);

EXTERN int asn1Init_LaneAttributes_Parking (LaneAttributes_Parking* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Sidewalk                                   */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Sidewalk ::= BIT STRING  { sidewalk-RevocableLane(0), bicyleUseAllowed(1), isSidewalkFlyOverLane(2), walkBikes(3) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_Sidewalk_sidewalk_RevocableLane          0
#define LaneAttributes_Sidewalk_bicyleUseAllowed_1              1
#define LaneAttributes_Sidewalk_isSidewalkFlyOverLane           2
#define LaneAttributes_Sidewalk_walkBikes                       3

typedef struct LaneAttributes_Sidewalk {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_Sidewalk;

EXTERN int asn1PE_LaneAttributes_Sidewalk (OSCTXT* pctxt, LaneAttributes_Sidewalk* pvalue);

EXTERN int asn1PD_LaneAttributes_Sidewalk (OSCTXT* pctxt, LaneAttributes_Sidewalk* pvalue);

EXTERN int asn1Init_LaneAttributes_Sidewalk (LaneAttributes_Sidewalk* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Striping                                   */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Striping ::= BIT STRING  { stripeToConnectingLanesRevocableLane(0), stripeDrawOnLeft(1), stripeDrawOnRight(2), stripeToConnectingLanesLeft(3), stripeToConnectingLanesRight(4), stripeToConnectingLanesAhead(5) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_Striping_stripeToConnectingLanesRevocableLane 0
#define LaneAttributes_Striping_stripeDrawOnLeft                1
#define LaneAttributes_Striping_stripeDrawOnRight               2
#define LaneAttributes_Striping_stripeToConnectingLanesLeft     3
#define LaneAttributes_Striping_stripeToConnectingLanesRight    4
#define LaneAttributes_Striping_stripeToConnectingLanesAhead    5

typedef struct LaneAttributes_Striping {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_Striping;

EXTERN int asn1PE_LaneAttributes_Striping (OSCTXT* pctxt, LaneAttributes_Striping* pvalue);

EXTERN int asn1PD_LaneAttributes_Striping (OSCTXT* pctxt, LaneAttributes_Striping* pvalue);

EXTERN int asn1Init_LaneAttributes_Striping (LaneAttributes_Striping* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_TrackedVehicle                             */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-TrackedVehicle ::= BIT STRING  { spec-RevocableLane(0), spec-commuterRailRoadTrack(1), spec-lightRailRoadTrack(2), spec-heavyRailRoadTrack(3), spec-otherRailType(4) } (SIZE (16))
*/
/* Named bit constants */

#define LaneAttributes_TrackedVehicle_spec_RevocableLane              0
#define LaneAttributes_TrackedVehicle_spec_commuterRailRoadTrack      1
#define LaneAttributes_TrackedVehicle_spec_lightRailRoadTrack         2
#define LaneAttributes_TrackedVehicle_spec_heavyRailRoadTrack         3
#define LaneAttributes_TrackedVehicle_spec_otherRailType              4

typedef struct LaneAttributes_TrackedVehicle {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneAttributes_TrackedVehicle;

EXTERN int asn1PE_LaneAttributes_TrackedVehicle (OSCTXT* pctxt, LaneAttributes_TrackedVehicle* pvalue);

EXTERN int asn1PD_LaneAttributes_TrackedVehicle (OSCTXT* pctxt, LaneAttributes_TrackedVehicle* pvalue);

EXTERN int asn1Init_LaneAttributes_TrackedVehicle (
   LaneAttributes_TrackedVehicle* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes_Vehicle                                    */
/*                                                            */
/**************************************************************/
/*
LaneAttributes-Vehicle ::= BIT STRING  { isVehicleRevocableLane(0), isVehicleFlyOverLane(1), hovLaneUseOnly(2), restrictedToBusUse(3), restrictedToTaxiUse(4), restrictedFromPublicUse(5), hasIRbeaconCoverage(6), permissionOnRequest(7) } (SIZE (8, ...))
*/
/* Named bit constants */

#define LaneAttributes_Vehicle_isVehicleRevocableLane          0
#define LaneAttributes_Vehicle_isVehicleFlyOverLane            1
#define LaneAttributes_Vehicle_hovLaneUseOnly                  2
#define LaneAttributes_Vehicle_restrictedToBusUse              3
#define LaneAttributes_Vehicle_restrictedToTaxiUse             4
#define LaneAttributes_Vehicle_restrictedFromPublicUse         5
#define LaneAttributes_Vehicle_hasIRbeaconCoverage             6
#define LaneAttributes_Vehicle_permissionOnRequest             7

typedef struct LaneAttributes_Vehicle {
   OSUINT32 numbits;
   OSOCTET data[1];
   OSOCTET* extdata;
} LaneAttributes_Vehicle;

EXTERN int asn1PE_LaneAttributes_Vehicle (OSCTXT* pctxt, LaneAttributes_Vehicle* pvalue);

EXTERN int asn1PD_LaneAttributes_Vehicle (OSCTXT* pctxt, LaneAttributes_Vehicle* pvalue);

EXTERN int asn1Init_LaneAttributes_Vehicle (LaneAttributes_Vehicle* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneDirection                                             */
/*                                                            */
/**************************************************************/
/*
LaneDirection ::= BIT STRING  { ingressPath(0), egressPath(1) } (SIZE (2))
*/
/* Named bit constants */

#define LaneDirection_ingressPath                     0
#define LaneDirection_egressPath                      1

typedef struct LaneDirection {
   OSUINT32 numbits;
   OSOCTET data[1];
} LaneDirection;

EXTERN int asn1PE_LaneDirection (OSCTXT* pctxt, LaneDirection* pvalue);

EXTERN int asn1PD_LaneDirection (OSCTXT* pctxt, LaneDirection* pvalue);

EXTERN int asn1Init_LaneDirection (LaneDirection* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneSharing                                               */
/*                                                            */
/**************************************************************/
/*
LaneSharing ::= BIT STRING  { overlappingLaneDescriptionProvided(0), multipleLanesTreatedAsOneLane(1), otherNonMotorizedTrafficTypes(2), individualMotorizedVehicleTraffic(3), busVehicleTraffic(4), taxiVehicleTraffic(5), pedestriansTraffic(6), cyclistVehicleTraffic(7), trackedVehicleTraffic(8), reserved(9) } (SIZE (10))
     All zeros would indicate 'not shared' and 'not overlapping'

*/
/* Named bit constants */

#define LaneSharing_overlappingLaneDescriptionProvided 0
#define LaneSharing_multipleLanesTreatedAsOneLane   1
#define LaneSharing_otherNonMotorizedTrafficTypes   2
#define LaneSharing_individualMotorizedVehicleTraffic 3
#define LaneSharing_busVehicleTraffic               4
#define LaneSharing_taxiVehicleTraffic              5
#define LaneSharing_pedestriansTraffic              6
#define LaneSharing_cyclistVehicleTraffic           7
#define LaneSharing_trackedVehicleTraffic           8
#define LaneSharing_reserved                        9

typedef struct LaneSharing {
   OSUINT32 numbits;
   OSOCTET data[2];
} LaneSharing;

EXTERN int asn1PE_LaneSharing (OSCTXT* pctxt, LaneSharing* pvalue);

EXTERN int asn1PD_LaneSharing (OSCTXT* pctxt, LaneSharing* pvalue);

EXTERN int asn1Init_LaneSharing (LaneSharing* pvalue);

/**************************************************************/
/*                                                            */
/*  LayerID                                                   */
/*                                                            */
/**************************************************************/
/*
LayerID ::= INTEGER (0..100)
*/
typedef OSUINT8 LayerID;

EXTERN int asn1PE_LayerID (OSCTXT* pctxt, LayerID value);

EXTERN int asn1PD_LayerID (OSCTXT* pctxt, LayerID* pvalue);

#include "rtxsrc/rtxEnum.h"
/**************************************************************/
/*                                                            */
/*  LayerType                                                 */
/*                                                            */
/**************************************************************/
/*
LayerType ::= ENUMERATED { none(0), mixedContent(1), generalMapData(2), intersectionData(3), curveData(4), roadwaySectionData(5), parkingAreaData(6), sharedLaneData(7), ... }
*/
typedef enum {
   none_1 = 0,
   mixedContent = 1,
   generalMapData = 2,
   intersectionData = 3,
   curveData = 4,
   roadwaySectionData = 5,
   parkingAreaData = 6,
   sharedLaneData = 7
} LayerType_Root;

typedef OSUINT8 LayerType;

EXTERN int asn1PE_LayerType (OSCTXT* pctxt, LayerType value);

EXTERN int asn1PD_LayerType (OSCTXT* pctxt, LayerType* pvalue);

EXTERN extern const OSEnumItem LayerType_ENUMTAB[];
#define LayerType_ENUMTABSIZE 8

EXTERN const OSUTF8CHAR* LayerType_ToString (OSINT32 value);

EXTERN int LayerType_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, LayerType* pvalue);

EXTERN int LayerType_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, LayerType* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionAppliesTo                                      */
/*                                                            */
/**************************************************************/
/*
RestrictionAppliesTo ::= ENUMERATED { none(0), equippedTransit(1), equippedTaxis(2), equippedOther(3), emissionCompliant(4), equippedBicycle(5), weightCompliant(6), heightCompliant(7), pedestrians(8), slowMovingPersons(9), wheelchairUsers(10), visualDisabilities(11), audioDisabilities(12), otherUnknownDisabilities(13), ... }
*/
typedef enum {
   none_2 = 0,
   equippedTransit = 1,
   equippedTaxis = 2,
   equippedOther = 3,
   emissionCompliant = 4,
   equippedBicycle = 5,
   weightCompliant = 6,
   heightCompliant = 7,
   pedestrians = 8,
   slowMovingPersons = 9,
   wheelchairUsers = 10,
   visualDisabilities = 11,
   audioDisabilities = 12,
   otherUnknownDisabilities = 13
} RestrictionAppliesTo_Root;

typedef OSUINT8 RestrictionAppliesTo;

EXTERN int asn1PE_RestrictionAppliesTo (OSCTXT* pctxt, RestrictionAppliesTo value);

EXTERN int asn1PD_RestrictionAppliesTo (OSCTXT* pctxt, RestrictionAppliesTo* pvalue);

EXTERN extern const OSEnumItem RestrictionAppliesTo_ENUMTAB[];
#define RestrictionAppliesTo_ENUMTABSIZE 14

EXTERN const OSUTF8CHAR* RestrictionAppliesTo_ToString (OSINT32 value);

EXTERN int RestrictionAppliesTo_ToEnum (OSCTXT* pctxt,
   const OSUTF8CHAR* value, RestrictionAppliesTo* pvalue);

EXTERN int RestrictionAppliesTo_ToEnum2 (OSCTXT* pctxt,
   const OSUTF8CHAR* value, OSSIZE valueLen, RestrictionAppliesTo* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneTypeAttributes                                        */
/*                                                            */
/**************************************************************/
/*
LaneTypeAttributes ::= CHOICE {
   vehicle [0] LaneAttributes-Vehicle, -- motor vehicle lanes
   crosswalk [1] LaneAttributes-Crosswalk, -- pedestrian crosswalks
   bikeLane [2] LaneAttributes-Bike, -- bike lanes
   sidewalk [3] LaneAttributes-Sidewalk, -- pedestrian sidewalk paths
   median [4] LaneAttributes-Barrier, -- medians & channelization
   striping [5] LaneAttributes-Striping, -- roadway markings
   trackedVehicle [6] LaneAttributes-TrackedVehicle, -- trains and trolleys
   parking [7] LaneAttributes-Parking,
   ...
}
*/
/* Choice tag constants */

#define T_LaneTypeAttributes_vehicle    1
#define T_LaneTypeAttributes_crosswalk  2
#define T_LaneTypeAttributes_bikeLane   3
#define T_LaneTypeAttributes_sidewalk   4
#define T_LaneTypeAttributes_median     5
#define T_LaneTypeAttributes_striping   6
#define T_LaneTypeAttributes_trackedVehicle 7
#define T_LaneTypeAttributes_parking    8
#define T_LaneTypeAttributes_extElem1   9

typedef struct EXTERN LaneTypeAttributes {
   OSINT32 t;
   union {
      /* t = 1 */
      LaneAttributes_Vehicle *vehicle;
      /* t = 2 */
      LaneAttributes_Crosswalk *crosswalk;
      /* t = 3 */
      LaneAttributes_Bike *bikeLane;
      /* t = 4 */
      LaneAttributes_Sidewalk *sidewalk;
      /* t = 5 */
      LaneAttributes_Barrier *median;
      /* t = 6 */
      LaneAttributes_Striping *striping;
      /* t = 7 */
      LaneAttributes_TrackedVehicle *trackedVehicle;
      /* t = 8 */
      LaneAttributes_Parking *parking;
      /* t = 9 */
      ASN1OpenType *extElem1;
   } u;
} LaneTypeAttributes;

EXTERN int asn1PE_LaneTypeAttributes (OSCTXT* pctxt, LaneTypeAttributes* pvalue);

EXTERN int asn1PD_LaneTypeAttributes (OSCTXT* pctxt, LaneTypeAttributes* pvalue);

EXTERN int asn1Init_LaneTypeAttributes (LaneTypeAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneAttributes                                            */
/*                                                            */
/**************************************************************/
/*
LaneAttributes ::= SEQUENCE {
   directionalUse [0] LaneDirection, -- directions of lane use
   sharedWith [1] LaneSharing, -- co-users of the lane path
   laneType [2] EXPLICIT LaneTypeAttributes, -- specific lane type data
   regional [3] RegionalExtension OPTIONAL
}
*/
typedef struct EXTERN LaneAttributes {
   struct {
      OSUINT8 regionalPresent : 1;
   } m;
   LaneDirection directionalUse;
   LaneSharing sharedWith;
   LaneTypeAttributes laneType;
   struct RegionalExtension *regional;
} LaneAttributes;

EXTERN int asn1PE_LaneAttributes (OSCTXT* pctxt, LaneAttributes* pvalue);

EXTERN int asn1PD_LaneAttributes (OSCTXT* pctxt, LaneAttributes* pvalue);

EXTERN int asn1Init_LaneAttributes (LaneAttributes* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectingLane                                            */
/*                                                            */
/**************************************************************/
/*
ConnectingLane ::= SEQUENCE {
   lane [0] LaneID, -- Index of the connecting lane
   maneuver [1] AllowedManeuvers OPTIONAL
                       -- The Maneuver between
                       -- the enclosing lane and this lane
                       -- at the stop line to connect them
}
*/
typedef struct EXTERN ConnectingLane {
   struct {
      OSUINT8 maneuverPresent : 1;
   } m;
   OSUINT8 lane;
   AllowedManeuvers maneuver;
} ConnectingLane;

EXTERN int asn1PE_ConnectingLane (OSCTXT* pctxt, ConnectingLane* pvalue);

EXTERN int asn1PD_ConnectingLane (OSCTXT* pctxt, ConnectingLane* pvalue);

EXTERN int asn1Init_ConnectingLane (ConnectingLane* pvalue);

/**************************************************************/
/*                                                            */
/*  Connection                                                */
/*                                                            */
/**************************************************************/
/*
Connection ::= SEQUENCE {
   -- The subject lane connecting to this lane is:
   connectingLane [0] ConnectingLane,
                      -- The index of the connecting lane and also
                      -- the maneuver from the current lane to it
   remoteIntersection [1] IntersectionReferenceID OPTIONAL,
                      -- This entry is only used when the
                      -- indicated connecting lane belongs
                      -- to another intersection layout. This
                      -- provides a means to create meshes of lanes
   -- SPAT mapping details at the stop line are:
   signalGroup [2] SignalGroupID OPTIONAL,
                      -- The matching signal group send by
                      -- the SPAT message for this lane/maneuver.
                      -- Shall be present unless the connectingLane
                      -- has no signal group (is un-signalized)
   userClass [3] RestrictionClassID OPTIONAL,
                      -- The Restriction Class of users this applies to
                      -- The use of some lane/maneuver and SignalGroupID
                      -- pairings are restricted to selected users.
                      -- When absent, the SignalGroupID applies to all
   -- Movement assist details are given by:
   connectionID [4] LaneConnectionID OPTIONAL
                      -- An optional connection index used to
                      -- relate this lane connection to any dynamic
                      -- clearance data in the SPAT. Note that
                      -- the index may be shared with other
                      -- connections if the clearance data is common
}
*/
typedef struct EXTERN Connection {
   struct {
      OSUINT8 remoteIntersectionPresent : 1;
      OSUINT8 signalGroupPresent : 1;
      OSUINT8 userClassPresent : 1;
      OSUINT8 connectionIDPresent : 1;
   } m;
   ConnectingLane connectingLane;
   struct IntersectionReferenceID *remoteIntersection;
   OSUINT8 signalGroup;
   OSUINT8 userClass;
   OSUINT8 connectionID;
} Connection;

EXTERN int asn1PE_Connection (OSCTXT* pctxt, Connection* pvalue);

EXTERN int asn1PD_Connection (OSCTXT* pctxt, Connection* pvalue);

EXTERN int asn1Init_Connection (Connection* pvalue);

/**************************************************************/
/*                                                            */
/*  ConnectsToList                                            */
/*                                                            */
/**************************************************************/
/*
ConnectsToList ::= SEQUENCE (SIZE (1..16)) OF Connection
*/
/* List of Connection */
typedef OSRTDList ConnectsToList;

EXTERN int asn1PE_ConnectsToList (OSCTXT* pctxt, ConnectsToList* pvalue);

EXTERN int asn1PD_ConnectsToList (OSCTXT* pctxt, ConnectsToList* pvalue);

EXTERN int asn1Init_ConnectsToList (ConnectsToList* pvalue);

/**************************************************************/
/*                                                            */
/*  OverlayLaneList                                           */
/*                                                            */
/**************************************************************/
/*
OverlayLaneList ::= SEQUENCE (SIZE (1..5)) OF LaneID
    The unique ID numbers for any lane object which have
    spatial paths that overlay (run on top of, and not
    simply cross with) the current lane.
    Such as a train path that overlays a motor vehicle
    lane object for a roadway segment.

*/
typedef struct EXTERN OverlayLaneList {
   OSSIZE n;
   OSUINT8 *elem;
} OverlayLaneList;

EXTERN int asn1PE_OverlayLaneList (OSCTXT* pctxt, OverlayLaneList* pvalue);

EXTERN int asn1PD_OverlayLaneList (OSCTXT* pctxt, OverlayLaneList* pvalue);

EXTERN int asn1Init_OverlayLaneList (OverlayLaneList* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericLane_regional                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'GenericLane'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList GenericLane_regional;

EXTERN int asn1PE_GenericLane_regional (OSCTXT* pctxt, GenericLane_regional* pvalue);

EXTERN int asn1PD_GenericLane_regional (OSCTXT* pctxt, GenericLane_regional* pvalue);

EXTERN int asn1Init_GenericLane_regional (GenericLane_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  GenericLane                                               */
/*                                                            */
/**************************************************************/
/*
GenericLane ::= SEQUENCE {
   laneID [0] LaneID,
                    -- The unique ID number assigned
                    -- to this lane object
   name [1] DescriptiveName OPTIONAL,
                    -- often for debug use only
                    -- but at times used to name ped crossings
   ingressApproach [2] ApproachID OPTIONAL, -- inbound
   egressApproach [3] ApproachID OPTIONAL, -- outbound
                    -- Approach IDs to which this lane belongs
   laneAttributes [4] LaneAttributes,
                    -- All Attribute information about
                    -- the basic selected lane type
                    -- Directions of use, Geometric co-sharing
                    -- and Type Specific Attributes
                    -- These Attributes are 'lane - global' that is,
                    -- they are true for the entire length of the lane
   maneuvers [5] AllowedManeuvers OPTIONAL,
                    -- the permitted maneuvers for this lane
   nodeList [6] EXPLICIT NodeListXY,
                    -- Lane spatial path information as well as
                    -- various Attribute information along the node path
                    -- Attributes found here are more general and may
                    -- come and go over the length of the lane.
   connectsTo [7] ConnectsToList OPTIONAL,
                    -- a list of other lanes and their signal group IDs
                    -- each connecting lane and its signal group ID
                    -- is given, therefore this element provides the
                    -- information formerly in "signalGroups" in prior
                    -- editions.
   overlays [8] OverlayLaneList OPTIONAL,
                    -- A list of any lanes which have spatial paths that
                    -- overlay (run on top of, and not simply cross)
                    -- the path of this lane when used. An overlay
                    -- for one lane can be applied to parallel lanes
                    -- without repeating OverlayLaneList for each GenericLane
                    -- entry.
   regional [9] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN GenericLane {
   struct {
      OSUINT8 namePresent : 1;
      OSUINT8 ingressApproachPresent : 1;
      OSUINT8 egressApproachPresent : 1;
      OSUINT8 maneuversPresent : 1;
      OSUINT8 connectsToPresent : 1;
      OSUINT8 overlaysPresent : 1;
      OSUINT8 regionalPresent : 1;
   } m;
   OSUINT8 laneID;
   const char* name;
   OSUINT8 ingressApproach;
   OSUINT8 egressApproach;
   LaneAttributes laneAttributes;
   AllowedManeuvers maneuvers;
   struct NodeListXY *nodeList;
   ConnectsToList connectsTo;
   OverlayLaneList overlays;
   GenericLane_regional regional;
   OSRTDList extElem1;
} GenericLane;

EXTERN int asn1PE_GenericLane (OSCTXT* pctxt, GenericLane* pvalue);

EXTERN int asn1PD_GenericLane (OSCTXT* pctxt, GenericLane* pvalue);

EXTERN int asn1Init_GenericLane (GenericLane* pvalue);

/**************************************************************/
/*                                                            */
/*  LaneList                                                  */
/*                                                            */
/**************************************************************/
/*
LaneList ::= SEQUENCE (SIZE (1..255)) OF GenericLane
*/
/* List of GenericLane */
typedef OSRTDList LaneList;

EXTERN int asn1PE_LaneList (OSCTXT* pctxt, LaneList* pvalue);

EXTERN int asn1PD_LaneList (OSCTXT* pctxt, LaneList* pvalue);

EXTERN int asn1Init_LaneList (LaneList* pvalue);

/**************************************************************/
/*                                                            */
/*  SignalControlZone                                         */
/*                                                            */
/**************************************************************/
/*
SignalControlZone ::= SEQUENCE {
   zone [0] RegionalExtension,
   ...
}
*/
typedef struct EXTERN SignalControlZone {
   struct RegionalExtension *zone;
   OSRTDList extElem1;
} SignalControlZone;

EXTERN int asn1PE_SignalControlZone (OSCTXT* pctxt, SignalControlZone* pvalue);

EXTERN int asn1PD_SignalControlZone (OSCTXT* pctxt, SignalControlZone* pvalue);

EXTERN int asn1Init_SignalControlZone (SignalControlZone* pvalue);

/**************************************************************/
/*                                                            */
/*  PreemptPriorityList                                       */
/*                                                            */
/**************************************************************/
/*
PreemptPriorityList ::= SEQUENCE (SIZE (1..32)) OF SignalControlZone
*/
/* List of SignalControlZone */
typedef OSRTDList PreemptPriorityList;

EXTERN int asn1PE_PreemptPriorityList (OSCTXT* pctxt, PreemptPriorityList* pvalue);

EXTERN int asn1PD_PreemptPriorityList (OSCTXT* pctxt, PreemptPriorityList* pvalue);

EXTERN int asn1Init_PreemptPriorityList (PreemptPriorityList* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometry_regional                             */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'IntersectionGeometry'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList IntersectionGeometry_regional;

EXTERN int asn1PE_IntersectionGeometry_regional (OSCTXT* pctxt, IntersectionGeometry_regional* pvalue);

EXTERN int asn1PD_IntersectionGeometry_regional (OSCTXT* pctxt, IntersectionGeometry_regional* pvalue);

EXTERN int asn1Init_IntersectionGeometry_regional (
   IntersectionGeometry_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometry                                      */
/*                                                            */
/**************************************************************/
/*
IntersectionGeometry ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
                            -- For debug use only
   id [1] IntersectionReferenceID,
                            -- A globally unique value set,
                            -- consisting of a regionID and
                            -- intersection ID assignment
   revision [2] MsgCount,
   -- Required default values about lane descriptions follow
   refPoint [3] Position3D, -- The reference from which subsequent
                            -- data points are offset until a new
                            -- point is used.
   laneWidth [4] LaneWidth OPTIONAL,
                            -- Reference width used by all subsequent
                            -- lanes unless a new width is given
   speedLimits [5] SpeedLimitList OPTIONAL,
                            -- Reference regulatory speed limits
                            -- used by all subsequent
                            -- lanes unless a new speed is given
                            -- See Section 11 for converting and
                            -- translating speed expressed in mph
                            -- into units of m/s
   -- Complete details regarding each lane type in this intersection
   laneSet [6] LaneList, -- Data about one or more lanes
                            -- (all lane data is found here)
   -- Data describing how to use and request preemption and
   -- priority services from this intersection (if supported)
   -- NOTE Additonal data may be added in the next release of the
   -- standard at this point to handle this concept
   preemptPriorityData [7] PreemptPriorityList OPTIONAL,
                           -- data about one or more regional
                           -- preempt or priority zones
   regional [8] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...,
   roadAuthorityID [9] EXPLICIT RoadAuthorityID OPTIONAL
}
*/
typedef struct EXTERN IntersectionGeometry {
   struct {
      OSUINT8 namePresent : 1;
      OSUINT8 laneWidthPresent : 1;
      OSUINT8 speedLimitsPresent : 1;
      OSUINT8 preemptPriorityDataPresent : 1;
      OSUINT8 regionalPresent : 1;
      OSUINT8 roadAuthorityIDPresent : 1;
   } m;
   const char* name;
   struct IntersectionReferenceID *id;
   OSUINT8 revision;
   struct Position3D *refPoint;
   OSUINT16 laneWidth;
   OSRTDList speedLimits;
   LaneList laneSet;
   PreemptPriorityList preemptPriorityData;
   IntersectionGeometry_regional regional;
   struct RoadAuthorityID *roadAuthorityID;
   OSRTDList extElem1;
} IntersectionGeometry;

EXTERN int asn1PE_IntersectionGeometry (OSCTXT* pctxt, IntersectionGeometry* pvalue);

EXTERN int asn1PD_IntersectionGeometry (OSCTXT* pctxt, IntersectionGeometry* pvalue);

EXTERN int asn1Init_IntersectionGeometry (IntersectionGeometry* pvalue);

/**************************************************************/
/*                                                            */
/*  IntersectionGeometryList                                  */
/*                                                            */
/**************************************************************/
/*
IntersectionGeometryList ::= SEQUENCE (SIZE (1..32)) OF IntersectionGeometry
*/
/* List of IntersectionGeometry */
typedef OSRTDList IntersectionGeometryList;

EXTERN int asn1PE_IntersectionGeometryList (OSCTXT* pctxt, IntersectionGeometryList* pvalue);

EXTERN int asn1PD_IntersectionGeometryList (OSCTXT* pctxt, IntersectionGeometryList* pvalue);

EXTERN int asn1Init_IntersectionGeometryList (IntersectionGeometryList* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadLaneSetList                                           */
/*                                                            */
/**************************************************************/
/*
RoadLaneSetList ::= SEQUENCE (SIZE (1..255)) OF GenericLane
*/
/* List of GenericLane */
typedef OSRTDList RoadLaneSetList;

EXTERN int asn1PE_RoadLaneSetList (OSCTXT* pctxt, RoadLaneSetList* pvalue);

EXTERN int asn1PD_RoadLaneSetList (OSCTXT* pctxt, RoadLaneSetList* pvalue);

EXTERN int asn1Init_RoadLaneSetList (RoadLaneSetList* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegment_regional                                      */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RoadSegment'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList RoadSegment_regional;

EXTERN int asn1PE_RoadSegment_regional (OSCTXT* pctxt, RoadSegment_regional* pvalue);

EXTERN int asn1PD_RoadSegment_regional (OSCTXT* pctxt, RoadSegment_regional* pvalue);

EXTERN int asn1Init_RoadSegment_regional (RoadSegment_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegment                                               */
/*                                                            */
/**************************************************************/
/*
RoadSegment ::= SEQUENCE {
   name [0] DescriptiveName OPTIONAL,
   id [1] RoadSegmentReferenceID,
                           -- a globally unique value for the segment
   revision [2] MsgCount,
   -- Required default values about the descriptions to follow
   refPoint [3] Position3D, -- the reference from which subsequent
                           -- data points are offset until a new
                           -- point is used.
   laneWidth [4] LaneWidth OPTIONAL,
                            -- Reference width used by all subsequent
                            -- lanes unless a new width is given
   speedLimits [5] SpeedLimitList OPTIONAL,
                            -- Reference regulatory speed limits
                            -- used by all subsequent
                            -- lanes unless a new speed is given
                            -- See Section 11 for converting and
                            -- translating speed expressed in mph
                            -- into units of m/s
   -- Data describing disruptions in the RoadSegment
   -- such as work zones etc will be added here;
   -- in the US the SAE ITIS codes would be used here
   -- The details regarding each lane type in the RoadSegment
   roadLaneSet [6] RoadLaneSetList,
   regional [7] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN RoadSegment {
   struct {
      OSUINT8 namePresent : 1;
      OSUINT8 laneWidthPresent : 1;
      OSUINT8 speedLimitsPresent : 1;
      OSUINT8 regionalPresent : 1;
   } m;
   const char* name;
   struct RoadSegmentReferenceID *id;
   OSUINT8 revision;
   struct Position3D *refPoint;
   OSUINT16 laneWidth;
   OSRTDList speedLimits;
   RoadLaneSetList roadLaneSet;
   RoadSegment_regional regional;
   OSRTDList extElem1;
} RoadSegment;

EXTERN int asn1PE_RoadSegment (OSCTXT* pctxt, RoadSegment* pvalue);

EXTERN int asn1PD_RoadSegment (OSCTXT* pctxt, RoadSegment* pvalue);

EXTERN int asn1Init_RoadSegment (RoadSegment* pvalue);

/**************************************************************/
/*                                                            */
/*  RoadSegmentList                                           */
/*                                                            */
/**************************************************************/
/*
RoadSegmentList ::= SEQUENCE (SIZE (1..32)) OF RoadSegment
*/
/* List of RoadSegment */
typedef OSRTDList RoadSegmentList;

EXTERN int asn1PE_RoadSegmentList (OSCTXT* pctxt, RoadSegmentList* pvalue);

EXTERN int asn1PD_RoadSegmentList (OSCTXT* pctxt, RoadSegmentList* pvalue);

EXTERN int asn1Init_RoadSegmentList (RoadSegmentList* pvalue);

/**************************************************************/
/*                                                            */
/*  DataParameters                                            */
/*                                                            */
/**************************************************************/
/*
DataParameters ::= SEQUENCE {
   processMethod [0] IA5String (SIZE (1..255)) OPTIONAL,
   processAgency [1] IA5String (SIZE (1..255)) OPTIONAL,
   lastCheckedDate [2] IA5String (SIZE (1..255)) OPTIONAL,
   geoidUsed [3] IA5String (SIZE (1..255)) OPTIONAL,
   ...
}
*/
typedef struct EXTERN DataParameters {
   struct {
      OSUINT8 processMethodPresent : 1;
      OSUINT8 processAgencyPresent : 1;
      OSUINT8 lastCheckedDatePresent : 1;
      OSUINT8 geoidUsedPresent : 1;
   } m;
   const char* processMethod;
   const char* processAgency;
   const char* lastCheckedDate;
   const char* geoidUsed;
   OSRTDList extElem1;
} DataParameters;

EXTERN int asn1PE_DataParameters (OSCTXT* pctxt, DataParameters* pvalue);

EXTERN int asn1PD_DataParameters (OSCTXT* pctxt, DataParameters* pvalue);

EXTERN int asn1Init_DataParameters (DataParameters* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserType_regional                              */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'RestrictionUserType'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList RestrictionUserType_regional;

EXTERN int asn1PE_RestrictionUserType_regional (OSCTXT* pctxt, RestrictionUserType_regional* pvalue);

EXTERN int asn1PD_RestrictionUserType_regional (OSCTXT* pctxt, RestrictionUserType_regional* pvalue);

EXTERN int asn1Init_RestrictionUserType_regional (
   RestrictionUserType_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserType                                       */
/*                                                            */
/**************************************************************/
/*
RestrictionUserType ::= CHOICE {
   basicType [0] RestrictionAppliesTo,
               -- a set of the most commonly used types
   regional [1] SEQUENCE (SIZE (1..4)) OF RegionalExtension,
   ...
}
*/
/* Choice tag constants */

#define T_RestrictionUserType_basicType 1
#define T_RestrictionUserType_regional  2
#define T_RestrictionUserType_extElem1  3

typedef struct EXTERN RestrictionUserType {
   OSINT32 t;
   union {
      /* t = 1 */
      RestrictionAppliesTo basicType;
      /* t = 2 */
      RestrictionUserType_regional *regional;
      /* t = 3 */
      ASN1OpenType *extElem1;
   } u;
} RestrictionUserType;

EXTERN int asn1PE_RestrictionUserType (OSCTXT* pctxt, RestrictionUserType* pvalue);

EXTERN int asn1PD_RestrictionUserType (OSCTXT* pctxt, RestrictionUserType* pvalue);

EXTERN int asn1Init_RestrictionUserType (RestrictionUserType* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionUserTypeList                                   */
/*                                                            */
/**************************************************************/
/*
RestrictionUserTypeList ::= SEQUENCE (SIZE (1..16)) OF RestrictionUserType
*/
/* List of RestrictionUserType */
typedef OSRTDList RestrictionUserTypeList;

EXTERN int asn1PE_RestrictionUserTypeList (OSCTXT* pctxt, RestrictionUserTypeList* pvalue);

EXTERN int asn1PD_RestrictionUserTypeList (OSCTXT* pctxt, RestrictionUserTypeList* pvalue);

EXTERN int asn1Init_RestrictionUserTypeList (RestrictionUserTypeList* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionClassAssignment                                */
/*                                                            */
/**************************************************************/
/*
RestrictionClassAssignment ::= SEQUENCE {
   id [0] RestrictionClassID,
            -- the unique value (within an intersection or local region)
            -- that is assigned to this group of users
   users [1] RestrictionUserTypeList
            -- The list of user types/classes
            -- to which this restriction ID applies
}
*/
typedef struct EXTERN RestrictionClassAssignment {
   OSUINT8 id;
   RestrictionUserTypeList users;
} RestrictionClassAssignment;

EXTERN int asn1PE_RestrictionClassAssignment (OSCTXT* pctxt, RestrictionClassAssignment* pvalue);

EXTERN int asn1PD_RestrictionClassAssignment (OSCTXT* pctxt, RestrictionClassAssignment* pvalue);

EXTERN int asn1Init_RestrictionClassAssignment (RestrictionClassAssignment* pvalue);

/**************************************************************/
/*                                                            */
/*  RestrictionClassList                                      */
/*                                                            */
/**************************************************************/
/*
RestrictionClassList ::= SEQUENCE (SIZE (1..254)) OF RestrictionClassAssignment
*/
/* List of RestrictionClassAssignment */
typedef OSRTDList RestrictionClassList;

EXTERN int asn1PE_RestrictionClassList (OSCTXT* pctxt, RestrictionClassList* pvalue);

EXTERN int asn1PD_RestrictionClassList (OSCTXT* pctxt, RestrictionClassList* pvalue);

EXTERN int asn1Init_RestrictionClassList (RestrictionClassList* pvalue);

/**************************************************************/
/*                                                            */
/*  MapData_regional                                          */
/*                                                            */
/**************************************************************/
/*
Type was extracted from 'MapData'
*/
struct EXTERN RegionalExtension;

/* List of RegionalExtension */
typedef OSRTDList MapData_regional;

EXTERN int asn1PE_MapData_regional (OSCTXT* pctxt, MapData_regional* pvalue);

EXTERN int asn1PD_MapData_regional (OSCTXT* pctxt, MapData_regional* pvalue);

EXTERN int asn1Init_MapData_regional (MapData_regional* pvalue);

/**************************************************************/
/*                                                            */
/*  MapData                                                   */
/*                                                            */
/**************************************************************/
/*
MapData ::= SEQUENCE {
   timeStamp [0] MinuteOfTheYear OPTIONAL,
   msgIssueRevision [1] MsgCount,
   layerType [2] LayerType OPTIONAL,
   layerID [3] LayerID OPTIONAL,
   intersections [4] IntersectionGeometryList OPTIONAL,
                     -- All Intersection definitions
   roadSegments [5] RoadSegmentList OPTIONAL,
                     -- All roadway descriptions
   dataParameters [6] DataParameters OPTIONAL,
                     -- Any meta data regarding the map contents
   restrictionList [7] RestrictionClassList OPTIONAL,
                     -- Any restriction ID tables which have
                     -- established for these map entries
   regional [8] SEQUENCE (SIZE (1..4)) OF RegionalExtension OPTIONAL,
   ...
}
*/
typedef struct EXTERN MapData {
   struct {
      OSUINT8 timeStampPresent : 1;
      OSUINT8 layerTypePresent : 1;
      OSUINT8 layerIDPresent : 1;
      OSUINT8 intersectionsPresent : 1;
      OSUINT8 roadSegmentsPresent : 1;
      OSUINT8 dataParametersPresent : 1;
      OSUINT8 restrictionListPresent : 1;
      OSUINT8 regionalPresent : 1;
   } m;
   OSUINT32 timeStamp;
   OSUINT8 msgIssueRevision;
   LayerType layerType;
   LayerID layerID;
   IntersectionGeometryList intersections;
   RoadSegmentList roadSegments;
   DataParameters dataParameters;
   RestrictionClassList restrictionList;
   MapData_regional regional;
   OSRTDList extElem1;
} MapData;

EXTERN int asn1PE_MapData (OSCTXT* pctxt, MapData* pvalue);

EXTERN int asn1PD_MapData (OSCTXT* pctxt, MapData* pvalue);

EXTERN int asn1Init_MapData (MapData* pvalue);

#ifdef __cplusplus
}
#endif

#endif
